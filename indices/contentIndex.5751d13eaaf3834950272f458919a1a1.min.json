{"/":{"title":"개발자 유니의 두 번째 뇌","content":"\n\u003cstrong\u003e백엔드 개발자\u003c/strong\u003e 신재윤입니다. \u003cbr\u003e\n\n\u003e 제텔카스텐 기법으로 구성된, 저의 두 번째 뇌 (Second Brain)에 오신것을 환영합니다. 때때로, 디지털-정원 (Digital-Garden)으로도 불리는 이곳에서는 꾸준히 모은 단편적인 개발 지식을 \u003cstrong\u003e새롭고 통합된 지식\u003c/strong\u003e으로 전환합니다. 천천히 저의 자그마한 정원을 둘러보며,  생각이라는 작은 씨앗들이 어떻게 자라며 연결되는지 확인해보세요!\n\n\u003chr\u003e\n\n\u003e [!note] 공개 지식 저장소 사용 방법 \n\u003e - 백링크와 연결된 그래프로 정보 간 연결 확인\n\u003e - 그래프 안보이면 새로고침\n\u003e - **cmd/ctrl + k**  : 검색 기능 활용\n\u003e \u003cbr\u003e\n\u003e 1.  🧑‍💻 Who is Uni? \u003cbr\u003e\n\u003e ↳ Look at my [portfolio](about) \u003cbr\u003e \n\u003e \n\u003e 2. 📚 How do I study? \u003cbr\u003e\n\u003e ↳ Record what I learned today [[notes/TIL/TIL]] \u003cbr\u003e\n\u003e \n\u003e 3. 💻  How prepare tech Interview? \u003cbr\u003e\n\u003e ↳ Through mock interview [[notes/Interview/Interview]] \u003cbr\u003e\n","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/about":{"title":"About","content":"신재윤은 어떤 개발자인가?\n","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/Interview/Interview":{"title":"Interview","content":"# Tech Interview\n\n\u003e 꼬리에 꼬리를 무는 면접 대비\n\n\u003cbr\u003e\n\n# 개발바닥 2사로 - 백엔드 면접 6팀 \n\n- \u003ca href='https://github.com/Shin-Jae-Yoon/Rebellion-Of-Interviewees' target='_blank'\u003eGithub Repository\u003c/a\u003e\n\t- 매주 수요일 20시 ~ 21시\n\t-  기록 툴 : GitHub + Notion\n\t\t-  PR, 이슈 이용\n\t-   예시: \u003ca href='https://github.com/whiteship/live-study/issues?q=is%3Aissue+is%3Aclosed' target='_blank'\u003e백기선님 스터디\u003c/a\u003e\n\n-   면접 방식\n\t-   2 VS 2\n\t-   공격자 2명이 미리 질문 내용 올리기\n\t-   매주 공수 교대\n\n-   서기 역할\n\t-   사회자 역할\n\t-   주차별 readme 작성\n\n\u003cbr\u003e\u003cbr\u003e\n\n## 1주차 스터디\n\n- [바로가기](notes/Interview/dog-week01)","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/Interview/dog-week01":{"title":"면접스터디 1주차","content":"\n\u003ca href='https://github.com/dingding-21/Rebellion-Of-Interviewees/issues/1' target='_blank'\u003e1주차 스터디 Issue\u003c/a\u003e\n\n\u003cbr\u003e\n\n\u003e[!note] TOPIC\n\u003e\n\u003e - 불변 객체가 무엇인지 설명하고 대표적인 Java의 예시를 설명해주세요.\n\u003e - Checked Exception / Unchecked Exception\n\u003e  \n\u003e \t- 공격 : 이강주님 / Cha Cha님\n\u003e \t- 수비 : 박현지님 / 이홍섭님\n\u003e \t- 서기 : 신재윤님\n","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/TIL":{"title":"TIL","content":"\n## Today I Leraned\n\n\u003e [!note] 기억의 활성화, 망각 곡선 이겨내기 \u003cbr\u003e\n\u003e \u003cbr\u003e\n\u003e 여러 학습을 통해서 습득한 단편적인 지식들을 \u003cbr\u003e\n\u003e 통합하여 새로운 지식으로 전환하여 \u003cbr\u003e\n\u003e 두 번째 뇌를 만드는 것이 궁극적인 목표\n\n1. [단편적 지식](notes/TIL/fragment/fragment)들을 보는 공간\n2. [통합된 지식](notes/TIL/integrated/integrated)을 보는 공간\n","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/fragment":{"title":"단편적 지식","content":"\n\u003cbr\u003e\n\n단편적인 지식들이 저장되는 공간 \u003cbr\u003e\n강의, 교재, 스터디 등을 통해 저장된 모든 지식이 작성됨 \u003cbr\u003e\n검색비용이 들지 않도록 최대한 **자세히** 작성됨 \u003cbr\u003e\n\n\u003cbr\u003e\n\n분류는 크게 **Language**, **Technique**, **Computer Science**로 구성됨 \u003cbr\u003e\n\n\u003cbr\u003e\u003cbr\u003e\n\n## Language \n\n\u003cbr\u003e\n\n학습하는 언어에 관하여 모든 내용을 작성\n\n\u003cbr\u003e\n\n### Java\n\n- 자바/스프링 개발자를 목표로 하기에 제일 메인 언어\n- 작동원리부터 사용법까지 최대한 자세하게\n- [바로가기](notes/TIL/fragment/lang/java/java)\n\n\u003cbr\u003e\n\n### HTML_CSS\n\n- 웹 페이지의 기본인 HTML과 CSS 기본 다루기\n- 최대한 직접 해보며 실습을 진행하였음\n- 데스크톱, 태블릿, 모바일 환경에 대한 반응형 항상 신경쓰기\n- [바로가기](notes/TIL/fragment/lang/html_css/html_css)\n\n\u003cbr\u003e\n\n### Javascript\n\n- HTML과 CSS로 만든 모양에 동작을 추가\n- 스크립트 언어의 특성을 이해하며 학습\n- [바로가기](notes/TIL/fragment/lang/javascript/javascript)\n\n\u003cbr\u003e\n\n### Python\n\n- 통계, 머신러닝을 위하여 가볍게 학습\n- [바로가기](notes/TIL/fragment/lang/python/python)\n\n\u003cbr\u003e\u003cbr\u003e\n\n## Technique\n\n\u003cbr\u003e\n\n라이브러리, 프레임워크 등 활용하는 모든 기술에 대한 작성\n\n\u003cbr\u003e\u003cbr\u003e\n\n## Computer Science","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/html_css/all-in-one-basic":{"title":"All-in-One 기초모듈","content":"\n## HTML\n\n\u003cbr\u003e\n\n### HTML 태그\n\n- 띄어쓰기를 하고 원하는 class 붙이면 클래스 2개 이상 가능\n\n```html\n\u003cdiv class=\"container text-center\"\u003e\u003c/div\u003e\n```\n\n\u003cbr\u003e\n\n### input 태그 name 속성\n\n- input 태그에 name 속성을 지정하면 서버에 name에 해당하는 변수로 데이터를 전송\n\n\n```html\n\u003cinput type=\"text\" name=\"age\" /\u003e\n\u003c!-- age라는 변수로 서버에 전송 --\u003e\n```\n\n\u003cbr\u003e\n\n- 서버에 데이터 전송할 때 방식 2개\n\n\t1. `\u003cinput type=\"submit\"\u003e`\n\t2. `\u003cbutton type=\"submit\"\u003e전송\u003c/button\u003e`\n\n\u003cbr\u003e\n\n### select 태그\n\n- 드롭다운 구현 가능\n\n```html\n\u003cselect\u003e\n\t\u003coption\u003e자장면\u003c/option\u003e\n\t\u003coption\u003e짬뽕\u003c/option\u003e\n\t\u003coption\u003e탕수육\u003c/option\u003e\n\u003c/select\u003e\n```\n\n\u003cbr\u003e\n\n### label 태그  \n\n- input 태그 체크박스 활용할 때 의미 없는 글자는 span 태그를 사용해도 되지만, label 태그를 이용해보자.\n\n- input태그의 id와 label 태그의 for를 동일하게 맞춰주면 label 태그의 글자를 클릭해도 체크박스가 선택된다.\n\n```html\n\u003cinput id=\"sub\" type=\"checkbox\" /\u003e \u003clabel for=\"sub\"\u003eSubscribe\u003c/label\u003e\n```\n\n\u003cbr\u003e\n\n### table\n\n- table 태그로 감싸며 thead 태그와 tbody 태그를 써주는 것이 보기 좋다.\n\n- 그리고 tr 태그로 행 먼저, 그 이후 td 태그로 열, 아래는 3행 3열 테이블\n\n```html\n\u003ctable\u003e\n\t\u003cthead\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/thead\u003e\n\t\u003ctbody\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\t\u003ctr\u003e\n\t\t\t\u003ctd\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003c/td\u003e\n\t\t\t\u003ctd\u003e\u003c/td\u003e\n\t\t\u003c/tr\u003e\n\t\u003c/tbody\u003e\n\u003c/table\u003e\n```\n\n- 셀 병합을 할때는 `\u003ctd colspan=\"4\"\u003e\u003c/td\u003e`와 같이 colspan에 합치기 원하는 숫자를 넣기\n\n- 추가로 html 테이블에서 td의 width를 설정하면 전체 열의 width가 변한다.\n\n\u003cbr\u003e\u003cbr\u003e\n\n## CSS\n\n\u003cbr\u003e\n\n### float 속성\n\n- float는 요소를 **공중에** 붕 띄워서 왼쪽/오른쪽 정렬하는 속성\n\n- 공중에 붕 띄는 속성 때문에 다음에 오는 div 박스가 보이지 않는 경우 발생\n\n- `clear: both`를 이용해서 초기화 해줘야함\n\n```css\n.box_practice .article01 {\n\tfloat: left;\n}\n\n.box_practice .article02 {\n\tfloat: right;\n}\n\n.box_practice .footer {\n\tclear: both;\n}\n```\n\n\u003cbr\u003e\n\n\u003e **참고**\n\u003e \u003cbr\u003e\n\u003e float 속성으로 가로 정렬할 때 float 박스들을 감싸난 하나의 큰 div 박스를 만들고 \u003cbr\u003e\n\u003e 폭을 지정해주는게 좋다. 그래야 모바일에서 흘러넘치지 않는다.\n\n```html\n\u003cdiv\u003e\n\t\u003cdiv class=\"left-box\"\u003e\u003c/div\u003e\n\t\u003cdiv class=\"right-box\"\u003e\u003c/div\u003e\n\t\u003cdiv class=\"footer\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n```\n\n\u003cbr\u003e\n\n### Selector 셀렉터\n\n- 셀렉터 사용 시 공백 말고 꺽쇠( `\u003e` )도 가능\n\n- 단, 꺽쇠 사용 시 4~5개 이상 연달아쓰는건 권장X 버그의 원인\n\n```html\n\u003cui class=\"navbar\"\u003e\n\t\u003cli\u003e\u003cspan\u003e안녕\u003c/span\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003c/li\u003e\n\t\u003cli\u003e\u003c/li\u003e\n\u003c/ui\u003e\n```\n\n```css\n.navbar li \u003e span {\n\tcolor: red;\n}\n```\n\n\u003cbr\u003e\n\n- `nth-child()` 셀렉터는 여러 요소 중 원하는 n번째 요소에 스타일을 주기 위함이다.\n\n```css\n.cart-table td:nth-child(2) {\n\tcolor: red;\n}\n\n.cart-table td:nth-child(n + 2) {\n\tcolor: blue;\n}\n```\n\n- 위의 코드는 2번째에 나오는 td에만 color를 주는 것이고\n\n- 아래의 코드는 2번째 이후에 나오는 td들에 color를 주겠다는 것\n\n\u003cbr\u003e\n\n### background 속성\n\n- 그냥 이미지를 넣어도 되지만, background도 생각\n\n- `background-image: url(./img/img03.png);` 배경 이미지 설정 (이때, url 여러개 넣어서 배경 겹치기 가능)\n\n- `background-size: cover;` 배경 이미지 div 박스에 꽉차게\n\n- `background-size: contain;` 배경 이미지 잘리지 않게\n\n- `background-repeat: no-repeat;` 반복되는거 없애기\n\n- `background-position: center;` center를 기준으로 배경 채움\n\n- `background-attachment: fixed;` 스크롤 될 때 배경 동작 설정 방식\n\n- `filter: brightness(50%)` 배경에 보정 입히기 - 명도 (단, 안에 글씨 있으면 글씨도 필터가 입혀지니까 이는 조심하자.)\n\n\u003cbr\u003e\n\n### 배경에 검은색 틴트 주기\n  \n```css\n.main-background {\n\tbackground-image: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),\n\turl(이미지경로~~);\n}\n```\n\n\u003cbr\u003e\n\n### margin collapse 현상\n\nmargin collapse 현상은, div 박스 두 개가 겹친 경우에 **박스 2개의 위쪽 테두리가 겹치면, margin도 합쳐지는 현상**을 의미한다.\n\n\u003cbr\u003e\n\n```html\n\u003cdiv class=\"main-background\"\u003e\n\t\u003ch4 class=\"main-title\"\u003eBuy Our Shoes!\u003c/h4\u003e\n\u003c/div\u003e\n```\n\n이 경우에서 박스 2개가 겹쳐지게 되어, main-title에 margin-top을 주면 margin이 합쳐진 현상이라 같이 내려가게 될 것이다. 해결방안으로는, 테두리가 안붙게 하면 된다. 부모 박스에 `padding: 1px`과 같은 조작을 취하면 된다.\n\n\u003cbr\u003e\n\n### 좌표 이동\n\n- `position` 속성 부여하여 좌표이동 가능해짐.\n\n- 특징 01 : 좌표 이동 가능\n\n- 특징 02 : float와 비슷하게 공중에 뜨는 원리\n\n- `position: relative` 내 원래 위치가 기준\n\n```css\n.main-button {\n\tposition: relative;\n\ttop: 100px; // 위쪽에서부터 100px\n\tleft: 100px; // 왼쪽에서부터 100px\n}\n```\n\n- `position: static` 좌표 이동 금지\n\n- `position: fixed` 현재 화면 (viewport) 기준으로 고정\n\n- navbar 같은거 스크롤 해도 상단에 고정시키면 좋으니까, 그럴 때 사용\n\n- `position: absolute` 내 부모 태그 중에 `position: relative` 가진 부모를 기준으로 한다.\n\n- `position: absolute` 요소를 **가운데 정렬**하는 방법\n\n```css\n.main-btn {\n\tposition: absolute;\n\tleft: 0;\n\tright: 0;\n\tmargin: auto;\n\twidth: 30%;\n}\n```\n\n\u003cbr\u003e\n\n### z-index\n\n- div 박스가 겹칠 때 우선순위를 두기\n\n- `z-index: 1`, `z-index: 5` 숫자가 클 수록 (높을 수록) 앞에 온다.\n\n\u003cbr\u003e\n\n### width의 영역에 관한 문제\n\n- width는 div 박스의 너비가 아니라 **width는 내부 content 영역의 너비를 의미한다.** padding이나 border에 width는 영향을 주지 않는다.\n\n- 해결하려면, content 부분만 width로 설정하는 것이 아니라, padding과 border를 모두 포함하라고 시키면 된다.\n\n- `box-sizing: border-box;` - width가 padding, border를 포함한다.\n\n- content-box는 padding과 border를 포함하지 않는 경우이다.\n\n- 아래의 예제로 box-sizing이 있고 없고를 비교해보기\n\n  \n```css\n.explain-box {\n\tposition: relative;\n\tmargin: auto;\n\tpadding: 20px;\n\ttext-align: center;\n\ttop: -80px;\n\tmax-width: 600px;\n\twidth: 80%;\n\theight: 40%;\n\tbackground-color: rgb(238, 237, 239);\n\tbox-sizing: border-box;\n}\n```\n\n\u003cbr\u003e\n\n### css 초기 설정시 편한 것, normalize\n\n```css\n\nbody {\n\tmargin: 0px;\n}\n\ndiv {\n\tbox-sizing: border-box;\n}\n\nhtml {\n\tline-height: 1.15; /* 기본 행간 높이 */\n}\n```\n\n혹은 크롬, 파이어폭스, 사파리와 같이 브라우저 호환성 이슈가 있을 때 css 파일에 추가하고 시작하면 좋은 설정들이 있다. (버튼의 크기나 이미지가 브라우저마다 다르거나 한 경우 때문에)\n\n\u003cbr\u003e\n\n\u003ca href='https://github.com/necolas/normalize.css/blob/master/normalize.css' target='_blank'\u003enormalize.css\u003c/a\u003e를 참고하도록 하자.\n\n\u003cbr\u003e\n\n### input type에 따른 css 셀렉터\n\n- 아래와 같이 지정하면 input type이 text인 아이들만 css 스타일링 가능\n\n```css\ninput[type='text'] {\n\tpadding: 10px;\n\tfont-size: 20px;\n\tborder: 1px solid black;\n}\n```\n\n\u003cbr\u003e\n\n### vertical-align 속성\n\n- inline/inline-block 요소 간의 세로정렬 할 때 vertical-align을 사용한다.\n\n- 테이블 사용 시 수직 정렬에도 사용 가능\n\n- pratice02.html에서 실패했던 이유는 ? div박스와 조작을 시도했기 때문\n\n- 해결책은 하나의 div 박스 내에서 img와 글자를 span태그로 묶어서 그 둘을 vertical-align 했으면 가능했을 듯하다.\n\n```html\n\u003cdiv\u003e\n\t\u003cimg\n\tsrc=\"https://mdn.mozillademos.org/files/12245/frame_image.svg\"\n\twidth=\"32\"\n\theight=\"32\"\n\t/\u003e\n\t\u003cspan style=\"vertical-align : middle;\"\u003e\n\timage with a default alignment.\u003c/span\u003e\n\u003c/div\u003e\n```\n\n\u003cbr\u003e\n\n### table 태그 border-radius 오류\n\n- border-collapse 속성을 table 태그에 적용했을 때 border-radius가 안먹는 오류가 있다.\n\n\u003cbr\u003e\n\n- 첫 번째 해결방안\n\n```css\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n(왼쪽위에있는 td) {\n\tborder-top-left-radius: 5px;\n}\n```\n\n\u003cbr\u003e\n\n- 두 번째 해결방안\n\t- box-shadow 속성을 이용하여 테두리를 가짜로 만들어내는 편법\n\n```css\n\ntable {\n\tborder-collapse: collapse;\n\tborder-radius: 7px;\n\tborder-style: hidden;\n\tbox-shadow: 0 0 0 1px #666;\n}\n```\n\n\u003cbr\u003e\n\n### button 태그 같이 hover 할 때 마우스 커서\n\n- `:hover`로 pseudo-class를 하지 않아도 `cursor:pointer`와 같이 작성하면 올렸을 때 마우스 커서 바뀜\n \n```css\nbutton {\n\tpadding: 15px;\n\tfont-size: 20px;\n\tborder: none;\n\tcursor: pointer;\n}\n```\n\n\u003cbr\u003e\n\n### input 태그 focus 스타일 안먹힐 때\n\n- `input:focus`를 해서 border 속성을 지정했는데 색깔이 안먹는 경우가 있다.\n- 그럴때는 크롬 기본속성인 outline을 none으로 설정해주자.\n\n```css\n.cart-footer .input-test:focus {\n\toutline: none;\n\tborder: 2px solid rgb(2, 77, 163);\n}\n```\n\n\u003cbr\u003e\n\n### css의 다양한 pseudo-class\n\n```css\n/* 외우는법 hofa */\n\n:hover /*마우스를 올려놓을 때*/\n:focus /*클릭 후 계속 포커스 상태일 때*/\n:active /*클릭 중일 때*/\n\n:link /* 방문 전 링크 */\n:visited /* 방문 후 링크 */\n:any-link /*방문 전, 방문 후 링크 한번에 선택할 때*/\n\n:playing /*동영상, 음성이 재생중일 때*/\n:paused /*동영상, 음성이 정지시*/\n:autofill /*input의 자동채우기 스타일*/\n:disabled /*disabled된 요소 스타일*/\n:checked /*체크박스나 라디오버튼 체크되었을 때*/\n\n:blank /*input이 비었을 때*/\n:valid /*이메일 input 등에 이메일 형식이 맞을 경우*/\n:invalid /*이메일 input 등에 이메일 형식이 맞지 않을 경우*/\n:required /*필수로 입력해야할 input의 스타일*/\n\n:nth-child(n) /*n번째 자식 선택*/\n:first-child /*첫째 자식 선택*/\n:last-child /*마지막 자식 선택*/\n```\n\n\u003cbr\u003e\n\n### 코드 양이 줄어드는 class 작명법 (OOCSS, BEM)\n\n- **OOCSS (Object Oriented CSS)**\n\n- CSS 양이 줄어들고, 유지보수 편리\n\n- 뼈대용 class, 살점용 class 각각 제작\n\n- 뼈대 디자인을 먼저 분리해놓고 색깔과 같은 살점을 추가하는 방식\n\n```html\n\u003cbutton class=\"main-btn bg-red\"\u003e버튼1\u003c/button\u003e\n\u003cbutton class=\"main-btn bg-blue\"\u003e버튼2\u003c/button\u003e\n```\n\n```css\n.main-btn {\n\tpadding: 15px;\n\tfont-size: 20px;\n\tborder: none;\n\tcursor: pointer;\n}\n\n.bg-red {\n\tbackground: red;\n}\n\n.bg-blue {\n\tbackground: blue;\n}\n```\n\n\u003cbr\u003e\n\n- OOCSS를 극단적으로 여러 **Utility class**를 만들어 놓을 수 있다.\n\n```css\n.f-small {\n\tfont-size: 12px;\n}\n\n.f-mid {\n\tfont-size: 16px;\n}\n\n.f-lg {\n\tfont-size: 20px;\n}\n\n.bg-red {\n\tbackground: red;\n}\n\n.bg-blue {\n\tbackground: blue;\n}\n\n```\n\n```html\n\u003cbutton class=\"main-btn bg-red f-lg\"\u003e버튼\u003c/button\u003e\n```\n\n\u003cbr\u003e\n\n- **BEM (Block\\_\\_Element--Modifier)**\n\n- class 작명할 때 창의력이 부족한 경우 BEM 작명법을 이용할 수 있다.\n\n- `class = \"덩어리이름__역할--세부특징\"`\n\n```html\n\u003cdiv class=\"profile\"\u003e\n\t\u003cimg class=\"profile__img\" /\u003e\n\t\u003ch4 class=\"profile__title\"\u003e\u003c/h4\u003e\n\t\u003cp class=\"profile__content\"\u003e\u003c/p\u003e\n\t  \n\t\u003cbutton class=\"profile__button--red\"\u003e버튼1\u003c/button\u003e\n\t\u003cbutton class=\"profile__button--blue\"\u003e버튼2\u003c/button\u003e\n\u003c/div\u003e\n\n```\n\n- 사람마다 다르다. OOCSS를 쓰면 html이 더러워져서 추천하지 않는 사람도 있음\n\n- BEM도 Modifer는 빼고 Block\\_\\_Element까지만 쓰는 사람도 있음\n\n- 최근, React나 Vue로 HTML 만들면 굳이 OOCSS, BEM 굳이 안쓰는 경우가 많아서 깊게 익힐 필요 X\n\n- React나 Vue에서는 html 페이지 단위가 아닌, 작은 덩어리 (component) 단위로 개발하게 된다. 이때 profile과 같이 class 명이 중복되어도 컴포넌트끼리 스타일이 간섭되지 않게 코드 작성이 가능하다. 대표적으로, React의 styled-components 라이브러리를 사용하면 가능하다.","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/html_css/all-in-one-last":{"title":"All-in-One 고급모듈","content":"\n## Pseudo-element\n- pseudo-class (다른 상태일 때 스타일 줄 때) `.class:`\n- pseudo-element (내부의 일부분만 스타일 줄 때) `.class::`\n\n\u003cbr\u003e\n\n기초 모듈 수업에서 pseudo-class 가 무엇인지 학습했었다. `:hover`와 같이 특정 요소가 다른 상태일 때 (ex. 마우스 올렸을 때) 스타일 줄 수 있게 해주는 것이었다. pseudo-element는 콜론 2개 `::`를 입력하여 사용한다.\n\n```css\n/* 이러면 pseudo 클래스의 첫 번째 글자만 빨간색으로 바뀜! */\n.pseudo::first-letter {\n\tcolor: red;\n\tfont-size: 2rem;\n}\n```\n\n\u003cbr\u003e\n\n보통 `::after (내부 맨 뒤에 뭔가 추가)`나 `::before (내부 맨 앞에 뭔가 추가)`를 어느정도 자주 사용하는 편이다.  \n\n```css\n/* 이러면 pseudo 클래스 맨 뒤에 '안녕' 글자 생김 */\n.pseudo::after {\n\tcontent: '안녕';\n\tcolor: red;\n\tfont-size: 2rem;\n}\n```\n\n만약, float를 사용해서 `clear: both;`를 하고 싶은 경우에 pseudo-element를 이용해서 빈 div 박스를 추가해줄 수 있다. (즉, 귀찮게 html 맨 밑에 div 박스 추가하고 style 줄 필요 없다는 말이지만, 나는 앞으로 float 안쓰고 flex 같은거 쓸거니깐... 그래도 혹시 모르니 메모 !)\n  \n```css\n.product-container::after {\n\tcontent: ''; /* 그냥 내용 없는거 */\n\tdisplay: block;\n\tclear: both;\n\tfloat: none;\n}\n```\n\n\u003cbr\u003e  \n\n`input 태그의 type이 file`인 경우 화면에 `파일 선택` 버튼 말고 `선택된 파일 없음`이라는 글자가 나온다. 아래에서 설명한 shadow dom인데 이 경우 단순히 input 태그를 조작하여서 버튼 색깔을 변경할 수는 없다.\n\n```css\n/* 이러면 \"선택된 파일 없음\" 여기 배경색이 바뀜 */\n.input_file {\n\tbackground: skyblue;\n}\n\n/* 이렇게 해야 \"파일 선택\" 버튼의 배경색이 바뀜 */\n.input_file::file-selector-button {\n\tbackground: skyblue;\n}\n\n/* pseudo-element에 pseudo-class도 사용 가능 */\n\n.input_file::file-selector-button:hover {\n\tbackground: blue;\n}\n```\n\n\u003cbr\u003e\n\n- Pseudo-element 활용한 쓸데없는 짓들\n\n- CSS 만으로 버튼에 마우스 올리면 배경 어둡게하기 https://codepen.io/css-tricks/pen/dxyfA\n\n- CSS만으로 3D 느낌 리본모양만들기 https://codepen.io/team/css-tricks/pen/mVZGKa\n\n- ol 태그의 숫자 스타일링하기 https://www.456bereastreet.com/archive/201105/ styling_ordered_list_numbers/\n\n- table 반응형으로 만드는 여러가지 방법 https://css-tricks.com/responsive-data-tables/\n\n- CSS만으로 영문 폰트 만들기 https://yusugomori.com/projects/css-sans/fonts\n\n\u003cbr\u003e  \n\n## Shadow DOM\n\n```html\n\u003cinput type=\"file\" /\u003e\n```\n\n이와 같은 코드 입력 시, 화면에 `파일 선택` 버튼 말고 `선택된 파일 없음`이라는 글자가 나온다. 분명 태그 하나만 사용했는데 2개를 사용한 것처럼 보인다. 이것은 **Shadow DOM**이라는 숨겨진 요소 때문이다.  \n\n\u003cbr\u003e\n\n크롬 개발자 도구 설정에서 Elements의 `Show user agent shadow DOM`을 체크한 이후 input 태그의 내부를 살펴보면 shadow-root가 있고 그 안에 보면 `pseudo=\"-webkit-file-upload-button\"`이 있을 것이다. 이것이 shadow DOM이다. input 태그 하나만 입력해도 span 태그인 선택된 파일 없음이 한 번에 입력되도록 개발자에게 편하려고 생긴 것이다.\n\n\u003cbr\u003e  \n\n그래서 결국, 버튼에 배경색을 주려면 위에서 했던 `.input_file::file-selector-button` 말고 어떻게 하지?\n\n\u003cbr\u003e\n\n**input [type=file]**\n\n```css\ninput[type='file']::-webkit-file-upload-button {\n\tbackground: black;\n\tcolor: white;\n}\n```\n\n크롬 개발자 도구 열어서 pseudo 부분을 pseudo-element 부분에다가 넣고 스타일링 하면 된다. 왜냐면 pseudo-element 역할 자체가 **내부의 일부분만 스타일 줄 때** 사용하는 것이니까 내부의 버튼에만 스타일을 주고싶은 거니까 이렇게 사용하는 것이다.\n\n\u003cbr\u003e\n\n추가로, `-webkit-`은 크롬, 사파리, Edge에서만 적용되는 스타일이다. Firefox는 `-moz`를 작성해야하고 Explorer는 `-ms-`를 사용한다. 즉, 브라우저마다 shadow DOM 까보면 살짝씩 다르다.\n\n\u003cbr\u003e\n\n\u003e [!quote]  실제 파일 업로드 버튼 만드는 것\n\u003e\n\u003e 글자를 눌러도 버튼이 선택되게 스타일링한다.\n그리고 input태그는 display를 none 줘버린다.\n\n\n```html\n\u003clabel for=\"sub\"\u003e\n\t파일 업로드\n\t\u003cinput id=\"sub\" type=\"file\" style=\"display: none\" /\u003e\n\u003c/label\u003e\n```\n\n\u003cbr\u003e  \n\n**input placeholder**\n\ninput 태그의 `placeholder`도 div 박스 두 개의 형태 같지 않는가? shadow DOM인가? 까보면 역시 그렇다.\n\n```css\n/* 이러면 placeholder 안에 글자 색깔 빨간색으로 바뀜 */\ninput::-webkit-input-placeholder {\n\tcolor: red;\n}\n```\n\n\u003cbr\u003e\n  \n**input [type=range]**\n\nrange 또한 마찬가지이다. range는 id가 track과 thumb 두 개가 있음을 확인 가능하다. 그런데 아마 손잡이 thumb는 pseudo 어쩌구가 없어서 선택 어떻게 해야하나 의문이 들 것이다. 눌러서 밑에 보면 `user agent stylesheet`가 보일 것인데 **브라우저 기본 CSS**를 의미한다. 우리가 스타일 주지 않아도 기본적으로 보이는 스타일이다. 따라서, 여기 `input[type='range']::-webkit-slider-thumb` 부분을 복사해오고 조작하면 된다. 따옴표나 i 이런건 지우고 사용한다. 이때, apperance가 기본 값이 auto라서 none으로 바꾸고 사용해야 한다. 손잡이 thumb의 apperance만 바꾸면 안되고 range 자체의 apperance를 바꿔야 적용될 것이다.\n\n\u003cbr\u003e\n\n```css\ninput[type='range'] {\n\tappearance: none;\n\tbackground-color: lightgray;\n\tborder-radius: 1rem;\n}\n\ninput[type='range']::-webkit-slider-thumb {\n\tappearance: none;\n\tbackground-color: green;\n\twidth: 1rem;\n\theight: 1rem;\n\tborder-radius: 1rem;\n}\n```\n\n\u003cbr\u003e\n\n**progress**\n\n```css\nprogress {\n\t/*기본 배경은 없애주는게 좋습니다*/\n\t-webkit-appearance: none;\n\t-moz-appearance: none;\n\tappearance: none;\n\tbackground: white;\n\t\n\t/* IE10 호환성용 */\n\tcolor: red;\n}\n\nprogress::-webkit-progress-bar {\n\tbackground-color: lightgray;\n\tborder-radius: 1rem;\n}\n\nprogress::-webkit-progress-value {\n\tbackground-color: red;\n\tborder-radius: 1rem;\n}\n\n/*파이어폭스 호환성을 위해*/\nprogress::-moz-progress-bar {\n\tbackground-color: red;\n\tborder-radius: 2px;\n}\n```\n\n\u003cbr\u003e\n\n## Sass\n\n- CSS를 개선한 CSS 전처리언어 (Preprocessor) = SASS\n\n- Sass에는 조건문, 반복문, 변수, 함수 존재\n\n- 즉, 문법이 존재한다는 의미 =\u003e 반복적인 부분 쉽게 처리 가능\n\n- SASS 파일은 `파일명.scss`\n\n- 웹 브라우저는 sass파일을 읽지 못하니까 css로 변환 작업이 필요하다. vscode extension에서 `Live Sass Compiler version 5 이상`을 설치한다. 그러면 vscode 하단에 `Watch Sass`가 보인다. 이를 누르면 scss에서 css로 변환이 된다.\n\n- 같이 생성되는 `.map`파일은 크롬 개발자도구 디버깅 용도이다. 크롬에서는 scss 파일을 읽는 것이 아니라 css 파일을 읽을 것이다. `.map` 파일이 있으면 크롬에서 css가 아닌 scss 파일로 분석해준다.\n\n\u003cbr\u003e\n\n1. 코드를 scss에 작성\n2. html에 파일 넣는건 css 파일 넣기\n\n\u003cbr\u003e\n\n\u003e [!quote] 하단에 바가 안보여서 watch sass를 찾을 수 없다면?\n\u003e\n\u003e View - Appearance - Status bar 켜기\n\n\u003cbr\u003e\n\n파일 확장명에 따른 차이\n\n- sass 문법을 작성해서 만든 파일명은 2개가 있음\n- `.scss` : 중괄호 써야 하는거 (보통 이거 많이 사용)\n- `.sass` : 중괄호 안써도 되는거\n\n\u003cbr\u003e\u003cbr\u003e\n\n### Sass 문법\n\n\u003cbr\u003e\n\n### 문법01. 값을 저장하고 사용하는 변수\n\n- 어려운 단어 기억해야할 때 변수 문법을 사용한다. `$변수명 : 저장해서 사용할 값;`\n- 규칙적인 스타일 만들 때도 변수를 사용하는 것은 도움이 된다.\n- 사칙연산 바로 가능 (단, %에서 px 빼는 행위는 하지 말고 같은 단위끼리 하자.)\n\n```css\n/* 기존 css 코드 */\n.background {\n\tbackground-color: #2a4cb2;\n}\n\n.box {\n\tcolor: #2a4cb2;\n}\n```\n  \n```scss\n// 변수 사용 scss 코드\n$메인컬러: #2a4cb2;\n\n.background {\n\tbackground-color: $메인컬러;\n}\n```\n\n```scss\n// scss 응용하기 좋은거\n$메인컬러: #2a4cb2;\n$서브컬러: #eeeeee;\n$기본사이즈: 16px;\n\n.background {\n\tbackground-color: $메인컬러;\n\tfont-size: $기본사이즈 - 2px;\n}\n\n.box {\n\tcolor: $서브컬러;\n\tfont-size: $기본사이즈 + 2px;\n}\n```\n\n위 코드는 font-size를 기본사이즈에서 빼고 더함으로써 **상대적인 크기**를 결정했다. 그래서 나중에 수정하기에 용이하다. 즉, 규칙적인 스타일 만들 때도 변수를 사용하는 것은 도움이 된다는 의미이다.\n\n\u003cbr\u003e  \n\n```scss\n// 괄호를 치는 것이 좋은 습관 !\n$기본사이즈: 16px;\n\n.box {\n\tfont-size: $기본사이즈 + 2px;\n\twidth: (100px * 2);\n\theight: (300px / 3);\n}\n```\n\n\u003cbr\u003e\n\n사실 CSS 기본 문법에도 변수 문법 이용 가능하고 사칙연산도 사용 가능하다. 근데 귀찮음\n\n\u003cbr\u003e  \n\n### 문법02. 셀렉터 대신 사용하는 Nesting\n\n- 관련있는 class들을 묶어서 사용할 때 편함\n- nesting 안에다가 또 nesting 가능하지만, 보통 2개 이상 중첩하지는 않음\n\n```css\n/* CSS 문법 */\n.navbar ul {\n\twidth: 100%;\n}\n\n.navbar li {\n\tcolor: black;\n}\n```\n\n```scss\n// sass 문법\n.navbar {\n\tul {\n\t\twidth: 100%;\n\t}\n\n\tli {\n\t\tcolor: black;\n\t}\n}\n```\n\n```scss\n// sass 문법으로 hover 사용법\n.navbar {\n\t:hover {\n\t\tcolor: blue;\n\t}\n}\n\n.navbar {\n\t\u0026:hover {\n\t\tcolor: blue;\n\t}\n}\n```\n\n- 위의 방식은 `.navbar :hover`\n- 밑의 방식은 `.navbar:hover`\n- 즉 `\u0026`기호를 붙히면 셀렉터를 스페이스바 없이 붙힐 수 있음\n\n\u003cbr\u003e\n\n### 문법03. 이미 있는 클래스를 확장하는 @extend\n\n- 반복되는 코드 없애고 싶을 때 사용\n- class 전체를 복사해주는 문법이 `@extend`\n- `%`는 `.` 대신 사용할 수 있는 임시 클래스\n- css에서 클래스로 컴파일하고 싶지 않을 때 사용\n- 컴파일 하고나면 `%` 안에 있는 것들은 모두 사라짐\n\n1. 중복된 스타일이 많으면 클래스로 묶는다\n2. `@extend`로 필요할 때 복사한다.\n\n```scss\n%btn {\n\twidth: 100px;\n\theight: 100px;\n\tpadding: 20px;\n}\n\n.btn-green {\n\t@extend %btn;\n\tcolor: green;\n}\n\n.btn-red {\n\t@extend %btn;\n\tcolor: red;\n}\n```\n\n```css\n/* 위의 scss에서 컴파일된 css 결과 */\n.btn-green,\n.btn-red {\n\twidth: 100px;\n\theight: 100px;\n\tpadding: 20px;\n}\n\n.btn-green {\n\tbackground: green;\n}\n\n.btn-red {\n\tbackground: red;\n}\n```\n\n\u003cbr\u003e\n\n### 문법04. 코드를 한 단어로 축약하는 @mixin\n\n- 약간 함수 같은 느낌\n- `@mixin`으로 선언, `@include`로 불러오기, `$ 변수 사용해서 파라미터`\n- `@extend`와 비슷해보이지만 파라미터 때문에 `@mixin`을 더 많이 사용함\n\n```scss\n@mixin 버튼기본디자인() {\n\tfont-size: 16px;\n\tpadding: 10px;\n}\n\n.btn-green {\n\t@include 버튼기본디자인();\n\tbackground: green;\n}\n```\n\n```scss\n@mixin 버튼기본디자인($구멍1, $구멍2) {\n\tfont-size: 16px;\n\tpadding: 10px;\n\tbackground: $구멍1;\n\tcolor: $구멍2;\n}\n\n.btn-green {\n\t@include 버튼기본디자인(green, black);\n}\n```\n\n```css\n/* 컴파일된 css 파일 */\n.btn-green {\n\tfont-size: 16px;\n\tpadding: 10px;\n\tbackground: green;\n\tcolor: black;\n}\n```\n\n만약, 글자 중간에 `$변수` 혹은 `$파라미터` 넣고 싶으면 `#{ $변수명 }`을 사용한다.\n\n```scss\n@mixin 폰트기본스타일($구멍1, $구멍2) {\n\tfont-size: $구멍1;\n\t#{ $구멍2 }: -1px;\n}\n\nh2 {\n\t@include 폰트기본스타일(40px, letter-spacing);\n}\n```\n\n```css\n/* 컴파일 된 css */\nh2 {\n\tfont-size: 40px;\n\tletter-spacing: -1px;\n}\n```\n\n\u003cbr\u003e\n\n### 문법05. 다른 파일에 있는 내용 가져오는 @use 문법\n  \n- 파이썬의 `@import`같은 느낌이다.\n- 예를 들어, 여러 파일에 공통적으로 사용되는 css 기본 세팅같은거 파일 저장해놓고 불러와서 사용\n- css 기본 문법에도 `@import` 있음 scss에서는 `@use` 쓰는거\n- 컴파일을 원하지 않는 파일은 `_파일명.scss`로 작명한다.\n- `@use '파일명'` 할 때 컴파일 안되게 언더바 붙힌 파일에서 언더바는 빼도 된다\n- 예를 들어, `sass01.scss` 파일에서 `_reset.scss` 파일 `@use`할 때, `@use 'reset'` 이까지만 적어도 되는거\n\n\u003cbr\u003e\n\n\u003e [!quote] Memo\n\u003e\n\u003e 뭐 기본세팅 .scss 파일은 종속적인 파일이니까 굳이 매번 .css로 컴파일 할 필요가 없잖아? 그러니까 언더바(_) 붙혀서 컴파일 못하게 하자.\n\n\u003cbr\u003e\n\n파일을 불러오면 거기에 있던 `@mixin`, `$변수` 이런거 다 사용 가능\n\n1. 다른 파일의 `$변수` 사용\n\t- `파일명.$변수`\n\n2. 다른 파일의 `@mixin` 사용\n\t- `@include 파일명.mixin이름`\n\n\u003cbr\u003e\u003cbr\u003e\n\n## HTML video, audio\n\n- `\u003cvideo src=\"영상.mp4\"\u003e\u003c/video\u003e`의 형태로 넣음\n- `\u003cvideo src=\"영상.mp4\" controls\u003e\u003c/video\u003e` 하면 재생버튼 생김 **controls**\n- 근데 영상 넣을때 `source`를 따로 넣는게 더 나\n\n\u003cbr\u003e\n\n**source 태그**를 이용해서 따로 넣는 방식의 장점은 **호환성을 챙길 수 있다**는 것이다. 비디오의 형식이 mp4, webM, mkv 등 브라우저마다 지원하는 비디오 확장자가 다르다. 따라서, 아래와 같은 코드로 작성하면 위에거 틀어보고 안되면 밑에거 틀어보세요~ 이런 말이다.  \n\n```html\n\u003c!-- 보통 용량이 작은 확장자부터 위에 작성한다. --\u003e\n\u003cvideo controls\u003e\n\t\u003csource src=\"영상-m.webm\" type=\"video/mp4\" /\u003e\n\t\u003csource src=\"영상-m.???\" type=\"video/mp4\" /\u003e\n\t\u003csource src=\"영상.mp4\" type=\"video/mp4\" /\u003e\n\u003c/video\u003e\n```\n\n\u003cbr\u003e\n\n**autoplay**는 크롬 브라우저에서 자동재생 정책상 그냥 `autoplay` 작성하면 안되고 `autoplay muted`해야 된다.\n\n```html\n\u003cvideo controls autoplay muted\u003e\n\t\u003csource src=\"영상.mp4\" type=\"video/mp4\" /\u003e\n\u003c/video\u003e\n```\n\n\u003cbr\u003e\n\n**preload**는 브라우저 로딩 시 영상을 미리 다운받을지, 말지, 적당히 받을지에 관한 속성 `\u003cvideo preload=\"metadata\"\u003e`  \n\n- `preload=\"none\"` : 미리 다운로드 X\n- `preload=\"auto\"` : 미리 다운로드 O\n- `preload=\"metadata\"` : 미리 다운로드 적당히, 초반 썸네일과 영상 초반부 약간 로딩. 제일 추천\n\n\u003cbr\u003e\n\n**poster**는 비디오 썸네일 결정 가능 `\u003cvideo poster=\"이미지.jpg\"\u003e\u003c/video\u003e`\n\n\u003cbr\u003e\n\n**loop**은 비디오 무한 재생 `\u003cvideo loop\u003e\u003c/video\u003e`\n\n\u003cbr\u003e\n\n**audio**도 마찬가지, `\u003caudio src=\"음악.mp3\" controls\u003e\u003c/audio\u003e` 추가로, autoplay 자동재생 기능은 애초에 안된다. 자바스크립트로 조작하면 가능\n\n\u003cbr\u003e\n\n## 궁극의 가운데 정렬\n\n어떤 요소를 진짜 극한으로 가운데 정렬할 때 사용하는 방법\n\n```css\n/* 어떤 요소 위 빈 박스 */\n.box {\n\theight: 500px;\n\twidth: 100%;\n\toverflow: hidden;\n\tposition: relative;\n}\n\n.container {\n\tposition: absolute;\n\twidth: 100%;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n\tz-index: 0;\n}\n```\n\n\u003cbr\u003e\n\n## 애니메이션 만들기 심화 (@keyframes)\n\n[중급 모듈](notes/TIL/fragment/lang/html_css/all-in-one-mid) 애니메이션 만들기에서 one-way 애니메이션 만드는 방법을 배웠었다. 그때는 a에서 b로만 가능했다. 아래와 같이 복잡한 애니메이션은 `@keyframes`로 구현한다. `transition`은 one-way 밖에 안되서이다.\n\n1. a -\u003e b -\u003e c\n2. a -\u003e b -\u003e a\n3. a -\u003e 1초정지 -\u003e b\n\n\u003cbr\u003e\n\n먼저, **transform**에 관하여 알아야한다.\n\n- `transform: rotate(숫자deg)` : 각도만큼 회전\n\n- `transform: translateX(숫자px)`: 숫자px 만큼 X축 좌표이동 (animation 줄 경우 margin-left 같은걸로 이동하는 것보다 부드럽게 이동함)\n\n- `transform: scale(숫자)` 숫자만큼 크기 변화 줌, 2라고 하면 2배 키워줌\n\n- `transform: skew(숫자deg)` : 각도만큼 비틀기\n\n\u003cbr\u003e\n\n**왜 복잡한 애니메이션을 만드는데 transform을 쓰면 좋다는 것인가?** 간단하다. 성능이 좋아서이다. 애니메이션이 느리고 버벅이면 역효과 일으키기 때문이다. 즉, `@keyframes`안에다가 transform을 안쓰고 margin을 쓰더라도 애니메이션을 만들 수 있겠지만, margin 변경은 transform에 비하여 느리다.\n\n\u003cbr\u003e\n\n**transform의 성능이 좋은 이유가 뭘까?** 웹브라우저는 HTML, CSS 코드를 2D 그래픽으로 바꿔주는 간단한 프로그램인데, 이때 브라우저가 그림 그리는 순서가 있다. 첫번째로 HTML, CSS를 쭉 읽으면서 Render Tree를 만든다. Render tree는 그림 그리기 전 CSS를 쭉 정리한 참고자료 느낌이다. 이걸보고 그림그리기 시작한다. 먼저 박스를 그리며 어디에 위치하는지 Layout을 잡고 다음으로 픽셀 하나하나에 색을 입히는 Paint를 하고 쓸데없는 Composite 단계의 css 속성들을 처리한다.\n\n\u003cbr\u003e\n\n정리하자면 1단계 Rander tree 그리면서 css 속성들 정리 2단계 Layout 잡기에 margin, padding, width, height 같은 속성들을 처리하고 3단계 Paint에서 background-color 같은거 처리하고 4단계 Composite 처리 단계에서 transform, opacity 같은거 처리한다.\n\n\u003cbr\u003e\n\n### 브라우저가 그림 그리는 순서 (렌더링 과정)\n\n1. Render tree\n\n2. Layout 잡기\n\n3. Paint 하기\n\n4. Composite 처리\n\n\u003cbr\u003e\n\n그러면, 만약 margin을 갑자기 변경했다고 하자. 그럼 브라우저는 margin을 변경하기 위하여 2단계 Layout 잡기 단계를 해야한다. 그러면 3단계, 4단계도 다시 해야하는 것이다. 즉, 다시 **렌더링** 된다는 말이다. 그러면 transform을 갑자기 변경하면? **4단계 composite 처리만 다시 하면 되니까 부담이 훨씬 덜하게 되는 것**이다. 결과적으로 transform의 성능이 margin보다 좋은 것이다. 특히, 자바스크립트가 너무 많은 사이트는 애니메이션을 항상 transform으로 줘야한다.\n\n\u003cbr\u003e\n\n추가로, **transform이 더 빠른 두 번째 이유**가 있다. 원래 웹 브라우저는 HTML, CSS 처리건 자바스크립트 실행이건 쓰레드 1개만 사용한다. 그런데, composite 처리 단계에 있는 css 속성들은 **다른 쓰레드에서 처리해준다.** 자바스크립트가 아무리 많아도 애초에 다른 쓰레드에서 처리하기 때문에 transform이 빠른 것이다.  \n\n\u003cbr\u003e\n\n다음으로, **keyframes**는 몇 퍼센트 진행했는지 진행도에 따라 나눠서 코드를 작성하면 된다. 그 이후, 사용하고자 하는 클래스에 `animation-name: 작명;` , `animation-duration: 몇초;`와 같은 식으로 작성하면 된다.\n\n```css\n@keyframes 작명 {\n\t0% {\n\n\t}\n\n\t50% {\n\t\n\t}\n\n\t100% {\n\t\n\t}\n}\n```\n\n\u003cbr\u003e\n\n**animation 관련 속성**\n\n```css\n.box:hover {\n\tanimation-name: 움찔움찔;\n\tanimation-duration: 1s;\n\t/* 베지어 주기 (처음에 실행할 지 나중에 실행할 지) */\n\tanimation-timing-function: linear;\n\t/* 시작 전 딜레이 */\n\tanimation-delay: 1s;\n\t/* 몇회 반복할것인가 */\n\tanimation-iteration-count: 3;\n\t/* 애니메이션을 멈추고 싶은 경우 자바스크립트로 이거 조정 */\n\tanimation-play-state: paused;\n\t/* 애니메이션 끝난 후에 원상복구 하지말고 정지 */\n\tanimation-fill-mode: forwards; \n}\n```\n\n\u003cbr\u003e\n\n## 애니메이션 성능 잡는 방법들\n\n1. `will-change` 사용\n\n```css\n.box {\n\twill-change: transform;\n}\n```\n\n애니메이션을 주는 `.box`가 약간 느리게 동작할 때 `will-change: 애니메이션 줄 속성`을 써놓으면 성능개선이 가능하다. 이는 **바뀔 내용을 미리 렌더링 해주는 속성**이기 때문이다. 애니메이션이 이상하게 버벅이면 사용하고 잘 작동하면 굳이 쓸 필요는 없다. 왜냐하면 많이쓰면 오히려 더 느려질 수 있기 때문이다. 이와 관련된 내용과 will-change에 관한 추가적인 내용은 \u003ca href='https://dev.opera.com/articles/ko/css-will-change-property/' target='_blank'\u003e여기\u003c/a\u003e에 있다.\n\n\u003cbr\u003e\n\n2. 하드웨어 가속\n\n애니메이션이 많아서 CPU만으로 연산이 불가능하면 GPU의 도움을 받으면 된다.\n\n```css\n.box {\n\ttransform: translate3d(0, 0, 0);\n}\n```\n\n이와 같이 쓰면 3D 이동도 가능한데, 이때 GPU를 사용해서 연산한다. 그래서 이걸 이용한 꼼수인데 `translate3d(0, 0, 0)`으로 사용하면 아무곳으로 이동하지 않는 3D 이동 명령을 주고 뒤에 필요한 transform을 적용한다면 GPU를 이용해서 box 클래스가 가진 transform 속성들을 연산하는 원리이다.\n\n\u003cbr\u003e\n\n## Css Grid\n\n- `display: grid`는 격자 모눈종이가 있다면 색칠해나가는 방식으로 생각\n\n- 부모 div에 `display: grid`, `grid-template-columns: `, `grid-template-rows: ` 주면 자식들은 모눈종이가 된다.\n\n- rows는 가로칸 갯수, 사이즈 columns는 세로칸 갯수, 사이즈\n\n- `grid-gap: `은 격자 간격\n\n\u003cbr\u003e  \n\n가로 2칸, 세로 3칸짜리 모눈종이\n\n```html\n\u003cdiv class=\"grid-container\"\u003e\n\t\u003cdiv\u003e\u003c/div\u003e\n\t\u003cdiv\u003e\u003c/div\u003e\n\t\u003cdiv\u003e\u003c/div\u003e\n\t\u003cdiv\u003e\u003c/div\u003e\n\t\u003cdiv\u003e\u003c/div\u003e\n\t\u003cdiv\u003e\u003c/div\u003e\n\u003c/div\u003e\n```\n\n```css\n.grid-container {\n\tdisplay: grid;\n\tgrid-template-columns: 100px 100px 100px;\n\tgrid-template-rows: 100px 100px;\n}\n```\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/1OMcnmg.png\" height=\"30%\" width=\"50%\"\u003e\u003c/p\u003e\n  \n\u003cbr\u003e\n\ngrid 컨테이너에서 사용하기 좋은 단위는 **fr(fraction)** 이다. 그리드 트랙 사이즈로 사용 되는 fr 단위는 유연한 단위로 그리드 컨테이너의 여유 공간을 비율로 나눠 설정한다. 퍼센트(%) 단위와 유사해 보일 수 있으나, 퍼센트 값과 다르게 길이가 아니다. **fr은 몇 배수**로 이해한다.\n\n\u003cbr\u003e\n\n```css\n/* 이러면 전체 가로에 대해 1배, 1배, 1배 */\n/* rows는 높이의 개념이라 height 속성이 있어야 fr 먹을거임 */\n.grid-container {\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr 1fr;\n\tgrid-template-rows: 100px 100px;\n}\n```\n\n\u003cbr\u003e\n\n**grid 이용한 레이아웃 만들 때**\n\n1. 내부 박스 크기 조절\n2. 그냥 부모 건드리기\n\n\u003cbr\u003e  \n\n**1번 방법**. 자식 div 높이와 폭을 조정하는 방법이다. 내부 박스에게 그냥 `grid-column`이나 `grid-row`를 줘본다.\n\n```css\n.grid-nav {\n\tgrid-column: 1 / 4;\n}\n```\n  \n`grid-column`은 세로 선을 의미한다. 이때 `display: grid`의 자식들에만 사용 가능하다. 따라서 여기서는 여러 div 박스를 의미한다. `1 / 4`가 의미하는 바는 세로선 1~4 만큼 차지해달라는 뜻이다.\n\n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/lEhjq3T.png\" height=\"30%\" width=\"50%\"\u003e\u003c/p\u003e  \n\n```css\n.grid-nav {\n\tgrid-row: 1 / 3;\n}\n```\n\n`grid-row`은 가로 선을 의미한다. 이때 `display: grid`의 자식들에만 사용 가능하다. 따라서 여기서는 여러 div 박스를 의미한다. `1 / 3`가 의미하는 바는 가로선 1~3 만큼 차지해달라는 뜻이다.\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/od9SQy1.png\" height=\"30%\" width=\"50%\"\u003e\u003c/p\u003e  \n\n\u003cbr\u003e\n\n이런식으로 작성하고 최종적으로 나머지 div박스 지운다.\n\n```html\n\u003cdiv class=\"grid-container\"\u003e\n\t\u003cdiv class=\"grid-nav\"\u003e\u003c/div\u003e\n\t\u003cdiv class=\"grid-sidebar\"\u003e\u003c/div\u003e\n\t\u003cdiv class=\"grid-content\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n```\n\n```css\n.grid-container {\n\tdisplay: grid;\n\tgrid-template-columns: 100px 100px 100px 100px;\n\tgrid-template-rows: 100px 100px 100px;\n}\n \n.grid-container div {\n\tborder: 1px solid black;\n}\n\n.grid-nav {\n\tgrid-column: 1 / 5;\n}\n\n.grid-sidebar {\n\tgrid-row: 2 / 4;\n}\n\n.grid-content {\n\tgrid-column: 2 / 5;\n\tgrid-row: 2 / 4;\n}\n```\n\n\u003cbr\u003e  \n\n**2번 방법**. 자식에 이름 쓰고 부모는 색칠하기\n\n```css\n.grid-nav {\n\tgrid-area: 헤더;\n}\n\n.grid-sidebar {\n\tgrid-area: 사이드;\n}\n```\n\n`grid-area: `는 자식에 이름짓는 속성이다. 그리고 이후에 `grid-template-areas: \" \" ` 형태로 배치해주면 된다. 배치할 때 기억자 같이 배치는 안되고 사각형 모양으로만 가능하다.\n\n```css\n.grid-container {\n\tdisplay: grid;\n\tgrid-template-columns: 100px 100px 100px 100px;\n\tgrid-template-rows: 100px 100px 100px;\n\tgrid-template-areas:\n\n\t'헤더 헤더 헤더 헤더'\n\t'사이드 . . .'\n\t'사이드 . . .';\n}\n```\n\n\u003cbr\u003e\n\n**Grid 숙제 관련**\n\n\u003cbr\u003e\n\n이미지 (img) 파일은 기본적으로 글자취급 받기 때문에 글자의 베이스라인처럼 이미지 밑에 하얀색 선이 거슬리게 나올 수 있다. 그때 반드시 `display: block;`을 줘서 없애도록 해보자!\n\n\u003cbr\u003e\u003cbr\u003e  \n\n## CSS 스킬 sticky\n\n- 스크롤해도 상단에 고정하고자 하는 속성에 `position: sticky;`\n\n- 주고 나서 어느 위치에 고정될 지도 정해준다. ex) top, bottom\n\n- sticky는 마치 fixed와 유사하다.\n\n- fixed는 viewport에다가 div 박스나 이미지를 고정시킬 때 쓰는 속성이었다. 그래서 fixed 해버리면 스크롤 해도 그 화면에 딱 고정된다.\n\n- 즉, sticky는 조건부 fixed이다. 그냥 스크롤 하다가 sticky 부여된 녀석을 만났을 때 조건적으로 fixed 되는 것이다.\n\n- 부모 박스 넘어서면 sticky는 해제된다.\n\n```css\n.image {\n\tfloat: right;\n\twidth: 400px;\n\tposition: sticky;\n\ttop: 100px;\n}\n```\n\n정리하자면, `position: sticky` \n\n1. 스크롤을 할 만한 부모 박스가 있어야 함\n2. top 등 좌표속성과 함께 써야 제대로 보임\n\n\u003cbr\u003e\u003cbr\u003e\n\n## 3D 애니메이션 (사진 뒤집기 예제)\n  \n- 앞면, 뒷면 배치는 `position: absolute` 사용해야함\n\n- inner 자체를 뒤집어버리는게 나음\n\n- `transform: rotate()`를 사용하는 것이라 처음에 뒷면을 미리 뒤집어놔야함\n\n- 뒷면의 모습이 안보이게 `transform-style: preserve-3d;`와 `front의 z-index 우선순위 높이기`, `backface-visibility: hidden;`\n\n- 내용은 \u003ca href='https://github.com/Shin-Jae-Yoon/TILbefore/blob/master/Language/html_css/lecture/codding_apple/%EA%B3%A0%EA%B8%89%EB%AA%A8%EB%93%88/threeD_animation.html' target='_blank'\u003ethreeD_animation.html\u003c/a\u003e 참고\n\n\u003cbr\u003e\n\n## 부트스트랩의 pill badge  \n\n부트스트랩에서 알약 모양 bill badge 썼을 때 알약이 깨지는 경우에는 `box-sizing: border-box;` 확인하자","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/html_css/all-in-one-mid":{"title":"All-in-One 중급모듈","content":"\n## 폰트 설정법\n\n- `font-family : '폰트'` 형식으로 설정한다.\n\n- 버그 없이 사용하려면 폰트의 영문명 사용\n\n- 폰트를 여러개 설정하는 이유는 안정석 확보를 위해서이다. 왼쪽부터 적용된다.\n\n- 아래 예시에서 gulim이 없어서 적용 안된다면 gothic으로 적용한다는 의미\n\n- 웹사이트 이용자의 컴퓨터에 설치가 된 폰트들을 적용할 수 있다.\n\n```css\nbody {\n\tfont-family: 'gulim', 'gothic';\n}\n```\n\n\u003cbr\u003e\n\n**사용자의 컴퓨터에 설치되지 않은 폰트를 사이트에서 이용하는 방법**\n\n- css 최상단에 `@font-face`로 적용할 폰트의 경로와 이름 작성\n\n- 웹 폰트용으로 나온 **woff**파일은 ttf에 비해 용량의 3분의 1 수준\n\n```css\n@font-face {\n\tfont-family: '폰트이름';\n\tsrc: url(폰트 저장 주소);\n}\n```\n\n\u003cbr\u003e\n\n**Google Fonts 사용**\n\n- 폰트 파일 없이, 구글 폰트를 직접 링크하는 방식\n\n- 구글이 호스팅해주는 폰트가 미리 정의된 css 파일을 가져다 사용하는 방식이다.\n\n- **내 사이트의 트래픽 절약 가능**\n\n- 크롬 브라우저가 이미 방문한 사이트는 캐싱해주기 때문에 많은 사람들이 이용할수록 더 빠르게 폰트를 이용 가능\n\n- html 적용 - `\u003clink\u003e` 부분\n\n- css 적용 - `@import` 부분\n\n\u003cbr\u003e\n\n## 폰트 Anti-aliasing  \n\n- 폰트 앤티앨리어싱은 폰트를 부드럽게 보여주는 기술\n\n- 픽셀의 각진 부분을 부드럽게 바꾸는 방법\n\n- mac은 자동으로 앤티앨리어싱 해주지만, window는 아님\n\n- 글자에 각도를 주고 살짝 돌리면 됨\n\n```css\np,\nh4,\nh3,\nh2,\nh1,\nspan,\nbutton {\n\ttransform: rotate(0.03deg);\n}\n```\n\n\u003cbr\u003e\n\n## flex\n\n- 가로 배치, 혹은 여러 배치에서 자주 사용할 flex 속성이다.\n\n- 부모 태그에 `display : flex;` 설정한다.\n\n- `justify-content: flex-start;` 좌측 정렬\n\n- `justify-content: flex-end;` 우측 정렬\n\n- `justify-content: flex-center;` 가운데 정렬\n\n- `justify-content: space-between;` 사이 사이 떨어뜨리게 꽉차게\n\n- 세로 배치 원하면, `flex-direction: column;`\n\n```css\n.flex-container {\n\tdisplay: flex;\n\tjustify-content: flex-start;\n}\n\n.flex-item {\n\twidth: 100px;\n\theight: 100px;\n\tbackground-color: gray;\n\tmargin: 5px;\n}\n```\n\n\u003cbr\u003e\n\n- flex에서 600px를 줬다고 하면, 실제 크기가 600px 되는 것이 아니라, 최대한 거기까지 키운다는 의미\n\n- width가 커서 밑으로 보내고 싶다면 `flex-wrap: wrap;` 속성 이용\n\n- flex 이용 시 상하 정렬은 `align-item: center;` 속성 이용\n\n```css\n/* 궁극적인 상하좌우 정렬 */\n\n.flex-container {\n\tdisplay: flex;\n\theight: 500px;\n\talign-items: center;\n\tjustify-content: center;\n}\n```\n\n\u003cbr\u003e\n\n- flex에서는 박스 크기를 px 말고 **비율**로 설정 가능하다.\n\n- `flex-grow` 속성은 몇 배수를 의미한다.\n\n- 아래의 예시는 1:2:1이다.\n\n```html\n\u003cdiv class=\"flex-container\"\u003e\n\t\u003cdiv class=\"flex-item\" style=\"flex-grow: 1\"\u003e1\u003c/div\u003e\n\t\u003cdiv class=\"flex-item\" style=\"flex-grow: 2\"\u003e2\u003c/div\u003e\n\t\u003cdiv class=\"flex-item\" style=\"flex-grow: 1\"\u003e3\u003c/div\u003e\n\u003c/div\u003e\n```\n\n\u003cbr\u003e\n\n- navbar 디자인 하고싶을 때 가운데를 붕 띄우고 싶으면 가운데만 비율주고 띄운다.\n\n```html\n\u003cdiv class=\"flex-container\"\u003e\n\t\u003cdiv class=\"flex-item\"\u003e1\u003c/div\u003e\n\t\u003cdiv class=\"flex-item\" style=\"flex-grow: 1\"\u003e2\u003c/div\u003e\n\t\u003cdiv class=\"flex-item\"\u003e3\u003c/div\u003e\n\u003c/div\u003e\n```\n\n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/S9vcMgL.png\" height=\"30%\" width=\"50%\"\u003e\u003c/p\u003e\n\n- \u003ca href='https://studiomeal.com/archives/197' target='_blank'\u003e1분 코딩 css-flex\u003c/a\u003e\n- \u003ca href='https://studiomeal.com/archives/533' target='_blank'\u003e1분 코딩 css-grid\u003c/a\u003e\n\n\u003cbr\u003e\n\n## HTML head 태그\n\n- head 태그에는 사이트 내에서 눈에 보이지 않는 중요한 정보들\n\n\u003cbr\u003e\n\n1. css 파일 첨부\n\t- link 태그 이용\n\t- 상대경로 방식, 절대경로 방식\n\n\u003cbr\u003e\n\n  \n\n2. 스타일 태그\n\t- css 파일과 유사하게 동작\n\t- body 태그 안에 있어도 동작하지만 html 파일 코드는 위에서 아래로 읽어나가는 방식이라서 body 태그에 뒀을 때 사이트 로딩 시 스타일이 깨질 수 있음\n\n\u003cbr\u003e\n\n3. 사이트 제목\n\t- 브라우저 탭에 뜨는 이름\n\n\u003cbr\u003e\n\n4. **meta 태그**\n\n```html\n\u003chead\u003e\n\t\u003cmeta charset=\"UTF-8\" /\u003e\n\t\u003cmeta name=\"description\" content=\"백엔드 마스터 신재윤입니다.\" /\u003e\n\t\u003cmeta name=\"keywords\" content=\"백엔드, backend, 개발자, 신재윤\" /\u003e\n\t\u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e\n\u003c/head\u003e\n```\n\n- 4-1 : 사이트 인코딩 형식 지정 방법\n\n- 4-2 : 사이트 검색 결과 화면에 뜨는 글귀\n\n- 4-3 : 검색에 도움을 주는 키워드\n\n- description은 구글 검색 시 파란 제목으로 뜨는 글귀\n\n- keywords는 검색에 도움을 주는 키워드\n\n- 4-4 : 사이트 초기 줌 레벨이나 폭을 지정해주는 것\n\n- `width=device-width`는 모바일 기기의 실제 폭으로 렌더링 해주는 것\n\n- 실제 접속 시 스마트폰 기기의 실제 가로폭을 보고 렌더링하라는 명령어\n\n- `initial-scale=1`은 접속시의 화면 줌 레벨 설정\n\n\u003cbr\u003e\n\n5. open graph\n\n```html\n\u003chead\u003e\n\t\u003cmeta property=\"og:image\" content=\"/이미지경로.jpg\" /\u003e\n\t\u003cmeta property=\"og:description\" content=\"사이트설명\" /\u003e\n\t\u003cmeta property=\"og:title\" content=\"사이트제목\" /\u003e\n\u003c/head\u003e\n```\n\n- og 메타 태그는 facebook이 만든 태그\n\n- 카카오톡, 페이스북 같은 sns에 링크를 공유했을 때 뜨는 박스\n\n- 그 박스에 보이는 이미지, 사이트 제목, 사이트 설명\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/IAP6Xwh.png\" height=\"30%\" width=\"50%\"\u003e\u003c/p\u003e\n\n\u003cbr\u003e  \n\n6. Favicon\n\n```html\n\u003chead\u003e\n\t\u003clink rel=\"icon\" href=\"아이콘경로.ico\" type=\"image/s-icon\" /\u003e\n\u003c/head\u003e\n```\n\n- 상단 탭 웹사이트 제목 옆에 뜨는 이미지 아이콘\n\n- ico 형식 대신 png도 가능, 하지만 ico가 호환성 best\n\n- 32 x 32 사이즈가 보편적\n\n- 웹 사이트를 바탕화면에 바로가기 추가했을 경우 뜨는 아이콘도 커스터마이징 가능\n\n- `rel=\"apple-touch-icon-precomposed\"` 이렇게 rel 속성을 조정\n\n- OS마다 요구하는 rel 속성이 달라지니까 그때그때 찾아서 적용\n\n- 혹은 favicon generator 검색하면 OS별로 알아서 만들어줌\n\n\u003cbr\u003e\n\n## **반응형 웹**\n\n\u003cbr\u003e\n\nvw (viewport width)\n- 브라우저 폭에 비례\n\n\u003cbr\u003e\n\nvh (viewport height)\n- 브라우저 높이에 비례\n\n\u003cbr\u003e  \n\n**rem (기본 폰트사이즈에 비례)**\n\n- 보통 html 태그 폰트 사이즈는 기본 16px로 설정되어있다.\n\n- 10rem이라고 하면 160px이 되는 것이다.\n\n- 버튼이든 패딩이든 마진이든 전부 rem으로 크기지정하면 기본 font-size가 커져도 모든게 같이 커진다는 장점이 있다.\n\n- 요즘은 컨트롤 누르고 마우스휠 올리면... 다 같이 커지기는 한다\n\n\u003cbr\u003e\n\nem (내 폰트 사이즈의 몇배)\n\n- 만약 내 폰트 사이즈가 15px, width가 20em이면 300px이 되는 것이다.\n\n\u003cbr\u003e\u003cbr\u003e\n\n반응형 웹사이트를 만들 때, html head 태그에 meta 태그를 반드시 추가해야한다. 느낌표 emmet 하면 들어가있기는 하다.\n\n```html\n\u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e\n```\n\n\u003cbr\u003e\n\n기본적인 원리는 media query 문법이다. 아래 코드는 현재 브라우저 폭이 1200px 이하인 경우 저 내용을 적용해라는 의미이다.\n\n```css\n@media screen and (max-width: 1200px) {\n\t.main-title {\n\t\tfont-size: 30px;\n\t}\n}\n```\n\n반응형 웹에서 breakpoint 기준은 **1200px, 992px, 768px, 576px** 단위를 많이 사용한다. 보통 1200px 부터 태블릿, 768px부터 모바일 이런식으로 많이 사용한다. breakpoint는 4개 이상으로 넘어가면 복잡해진다.\n\n\u003cbr\u003e\u003cbr\u003e\n\n## 크롬 개발자 도구 (디버깅)\n\n- css 스타일링을 바꿨는데 바뀌지 않는 오류가 있다면, 파일을 찾기보다 크롬 개발자 도구를 사용하자\n\n- **우선 적용중인 스타일을 맨 위에서 보여준다**\n\n- css의 !important 속성 (10000점)\n\n- html의 style 속성 (1000점)\n\n- css의 id 속성 (100점)\n\n- css의 class 속성 (10점)\n\n- html의 태그를 css에서 셀렉터 이용 (1점)\n\n\u003cbr\u003e\u003cbr\u003e\n\n## Font Awesome\n\n평소에 자주 사용하던 폰트어썸 사이트, 간단한 아이콘을 폰트 취급하여 사용\n\n\u003cbr\u003e\n\n사용방법\n\n  1. 웹 Kit 방식 : 폰트 어썸 사이트에서 kit 생성하고 html head 파일에 삽입하는 방식. 서버 용량이 많지 않거나 귀찮을때 그냥 사용한다. 간단한 프로젝트에서 보통 많이 사용함.\n\n2. CDN 방식 : Content Delivery Network (콘텐츠 전송 네트워크) 방식으로 폰트 어썸이 호스팅하는 서버에서 아이콘들을 받아와서 사용하는 방식이다.\n\n\u003e [!quote] Kit 방식 vs CDN 방식?\n\u003e\n\u003e 사실 kit 방식과 cdn 방식이 어떤 차이인지 모르겠다.\nkit 방식은 회원가입 후 발급받은 킷을 이용했고\ncdn 방식은 구글에 fontawesome cdn 검색해서 나오는\ncdnjs 사이트에서 그 링크를 이용했다.\ncdnjs에서 가져온 링크는 로그인 할 필요도 없이 바로\n사용할 수 있었다.\n\n\u003cbr\u003e\n\n3. css 파일 다운로드 : 위의 두 방식은 폰트어썸 측의 서버가 다운되면 나에게도 영향이 끼친다는 의미이다. 이를 방지하고자 css 파일을 다운로드 받고 사용하는 방식이 있다. 강의에서는 다운받은 zip 파일에서 css 폴더의 `all.css`, `all.min.css`, `webfonts 폴더` 빼고 모두 지웠다. 그리고 웹폰트 폴더에서도 용량이 적은 woff만 사용했다.\n\n\u003cbr\u003e\n\nFont Awesome 사용할 때 css 파일에서 font-size를 조절 혹은 html의 style 속성에서 font-size를 조절하곤 했는데, 간단한 약어로 아이콘 크기 조정, 회전, 애니메이션 효과, 아이콘 끼리 중첩 등이 가능했다. 보통 크기 조절은 간단하게 `\u003ci class=\"fa-solid fa-cart-shopping fa-3x\"\u003e\u003c/i\u003e`와 같이 `fa-1x` 부터 `fa-5x`까지 되는 것 같았다.\n\n\u003cbr\u003e\n\n- \u003ca href='https://nuknukhan.tistory.com/38' target='_blank'\u003eFontAwesome 스타일링 간단 사용법\u003c/a\u003e\n- \u003ca href='https://fontawesome.com/docs/web/style/styling' target='_blank'\u003eFontAwesome DOCS\u003c/a\u003e\n\n\u003cbr\u003e\u003cbr\u003e\n\n## 애니메이션 만드는 원리\n\n\u003cbr\u003e\n\none-way 애니메이션 만드는 방법 \n\n1. 시작스타일 만들기\n2. 최종스타일 만들기\n3. 언제 최종스타일로 변하는지 (ex. 마우스로 올렸을 때)\n4. transition으로 애니메이션 속성 주기\n\n\u003cbr\u003e\n\ntransition 세부 속성\n\n```css\n.box {\n\ttransition-delay: 1s; /* 시작 전 딜레이 */\n\ttransition-duration: 0.5s; /* transition 작동 속도 */\n\ttransition-property: opacity; /* 어떤 속성에 transition 입힐 지 */\n\ttransition-timing-function: ease-in; /* 동작 속도 그래프 조정 */\n}\n```\n\n- \u003ca href='https://github.com/Shin-Jae-Yoon/TIL/blob/master/Language/html_css/lecture/codding_apple/%EC%A4%91%EA%B8%89%EB%AA%A8%EB%93%88/hw_responsive.css' target='_blank'\u003e애니메이션 실습 예제 -  hw_responsive\u003c/a\u003e\n- \u003ca href='https://github.com/Shin-Jae-Yoon/TIL/blob/master/Language/html_css/lecture/codding_apple/%EC%A4%91%EA%B8%89%EB%AA%A8%EB%93%88/hw2_animation.css' target='_blank'\u003e애니메이션 숙제 예제 hw2_animation\u003c/a\u003e\n\n\u003cbr\u003e\n\n흘러넘치는거 숨겨주는 `overflow: hidden` 속성 까먹지 말자. overflow 속성은 박스의 폭이나 높이를 초과하는 내부요소를 처리하기 위한 속성이다. 만약 `overflow: visible`하면 넘치는 부분 보여주고 `overflow: scroll`하면 넘치는 요소를 보기 위한 스크롤 바가 생성된다.\n\n\u003cbr\u003e\n\n추가로 다른 사이트에서 애니메이션 작동원리 보려면 크롬 개발자 도구에서 마우스로 찍은 후에 점 세개 눌러서 more tools에서 animations 탭을 보면 어떤 속성이 어느 정도의 시간에 거쳐서 변화하는지 보여준다.\n\n\u003cbr\u003e\n\n## Bootstrap  \n\n- html, css 개발 속도를 빠르게 해주는 것\n- css와 js cdn을 복사해서 붙혀넣기 하면 사용할 수 있다. css는 head 태그, js는 body 태그\n- 유용한 키워드 : Navbar, Card, Carousel, Modal, Badge, Media Object, Shadow\n\n\u003cbr\u003e\n\n개발시간 단축하는 Utility class가 제공된다.  \n- container 클래스를 사용하면 여백 가진 박스가 생성된다.\n- margin-top 같은 경우 `mt-3`이라고 하면 margin-top이 3정도 들어간다. 1~5까지 있다.\n- padding-left와 right의 경우 `ps-5`, `pe-5`라고 한다. start와 end의 약자이다.\n- 가운데 정렬은 `text-center`하면 된다.\n- 폰트 사이즈는 `fs-3`로 하면된다. 1~6까지 있다.\n- width는 `w-50`으로 하면 된다. %수치라서 100%까지 된다.\n- 부트스트랩 홈페이지에서 Utilities에서 유틸리티 클래스 명을 찾을 수 있다.\n\n```html\n\u003cdiv class=\"container\"\u003e카드 같은거 ~\u003c/div\u003e\n\u003ch5 class=\"card-title mt-3\"\u003eCard title\u003c/h5\u003e\n\u003ch5 class=\"card-title text-center\"\u003eCard title\u003c/h5\u003e\n\u003ch5 class=\"card-title fs-5\"\u003eCard title\u003c/h5\u003e\n```\n\n\u003cbr\u003e  \n\n부트스트랩은 특히 **반응형 레이아웃**에 관한 개발속도를 향상시킨다. container 박스 안에 row와 col을 적절하게 배열하면 된다. 보통 한 행 기준 12칸으로 쪼개는데 `col-4`로 하면 정확하게 3등분 되는 것이다.\n\n```html\n\u003cdiv class=\"container\"\u003e\n\t\u003cdiv class=\"row text-center\"\u003e\n\t\t\u003cdiv class=\"col-4\"\u003e안녕하세요\u003c/div\u003e\n\t\t\u003cdiv class=\"col-4\"\u003e안녕하세요\u003c/div\u003e\n\t\t\u003cdiv class=\"col-4\"\u003e안녕하세요\u003c/div\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\n```\n\n\u003cbr\u003e\n\n여기서 반응형을 추가하는 방법은 **조건문**을 더하면 된다. 현재, 웹 사이즈에서는 가로로 배열되어있는데 모바일에서는 세로로 배열하고 싶다고 하자. 그때 `-md`를 달아본다. md는 768px 이상에서만 저 조건을 실행해달라는 의미이다. 추가적인 자료는 \u003ca href='https://getbootstrap.com/docs/5.1/layout/grid/' target='_blank'\u003eBootstrap 공식 문서\u003c/a\u003e에서 확인한다.\n\n\u003cbr\u003e\n\n반응형 웹을 디자인 할 때, 모바일 화면을 먼저 설계하는 것이 편하다.\n- \u003ca href='https://github.com/Shin-Jae-Yoon/TIL/blob/master/Language/html_css/lecture/codding_apple/%EC%A4%91%EA%B8%89%EB%AA%A8%EB%93%88/hw4_snsProfile.html' target='_blank'\u003ehw4_snsProfile 실습\u003c/a\u003e은 99% 부트스트랩으로 제작했음\n- 부트스트랩에서 flex의 shrink, grow가 헷갈린다? \u003ca href='https://studiomeal.com/archives/197' target='_blank'\u003e1분 코딩 css-flex\u003c/a\u003e, \u003ca href='https://darrengwon.tistory.com/130' target='_blank'\u003e티스토리 블로그\u003c/a\u003e 참고\n- 부트스트랩의 d-flex 등 다양한 레이아웃은 \u003ca href='https://espania.tistory.com/142' target='_blank'\u003e여기\u003c/a\u003e 참조\n\n\u003cbr\u003e\n\n## Bootstrap 수직정렬\n\n\u003cbr\u003e\n\n\u003ca href='https://github.com/Shin-Jae-Yoon/TIL/blob/master/Language/html_css/lecture/codding_apple/%EC%A4%91%EA%B8%89%EB%AA%A8%EB%93%88/bootstrap2.html' target='_blank'\u003ebootstrap2.html\u003c/a\u003e 예제에서 사진과 글자를 수직정렬할 때의 문제이다. css를 다룰 때 고질적으로 겪었던 오류이다. 부트스트랩의 `align-middle`을 아무리 써봐도 글자가 수직정렬 되지 않았다. 근본적인 해결책을 찾고자 한다.\n\n\u003cbr\u003e\n\n먼저, 글은 p 태그로 작성한 상태이다. \u003ca href='https://programmer-ririhan.tistory.com/83' target='_blank'\u003e티스토리 블로그 글\u003c/a\u003e에서 css를 통한 수직 정렬을 하는 vertical-align 속성은 block 요소가 아닌 inline 혹은 inline-block에서만 사용 가능하다는 점이다. 아차! 싶었다. p 태그는 display 기본 속성이 block 속성이다. 그래서 \u003ca href='https://getbootstrap.com/docs/5.1/utilities/vertical-align/' target='_blank'\u003eBootstrap docs Vertical alignment\u003c/a\u003e도 살펴보면, `To vertically center non-inline content (like \u003cdiv\u003es and more), use our flex box utilities.`라고 떡하니 나와있었다. block 속성은 flex box utilities를 이용하라고..\n\n\u003cbr\u003e\n\n또 vertical-align 속성에 대한 잘못된 지식이 있었음을 알 수 있었다. 하나의 div 박스가 있고 그 박스에 `text-align : middle;`속성을 줬을 때 가운데 정렬이 되었던 경험을 살려 `vertical-align: middle;`하면 되겠지~ 싶었는데 서로 다른 느낌이다. text-align은 말 그대로 박스 안의 가운데 정렬이 맞지만, vertical-align은 간단한 inline 내에서 높낮이 정도 조절하는 것이다. \u003ca href='https://developer.mozilla.org/ko/docs/Web/CSS/text-align' target='_blank'\u003etext-align MDN 공식문서\u003c/a\u003e에서 **블록 요소나 표의 칸 상자의 가로 정렬을 설정한다**고 떡하니 나와있고, \u003ca href='https://developer.mozilla.org/ko/docs/Web/CSS/vertical-align' target='_blank'\u003evertical-align MDN 공식문서\u003c/a\u003e에서 **inline 또는 table-cell box에서의 수직 정렬을 지정한다**고 떡하니 나와있다. 내가 가진 개념은 오개념이었다.\n\n\u003cbr\u003e\n\n\u003ca href='https://getbootstrap.com/docs/5.1/utilities/flex/#align-items' target='_blank'\u003eBootstrap docs align\u003c/a\u003e에서는 정의한다. `align-items-center`를 이용하여 flex 아이템들을 정렬시키든 `align-self-center`를 이용하여 정렬시키는 방법이 떡하니 나와있었다. 예제의 경우 `row` 클래스의 행 속성에 `align-items-center`를 이용하여 아이템들을 가운데 정렬 시키든가 혹은 `col`클래스의 열 속성에 `align-self-center`를 이용하여 가운데 정렬 시키든가 두 방법 중 하나를 선택하면 된다.\n\n\u003cbr\u003e\n\n추가로, flex 박스의 순서를 부여하고자 할 때는 `order`를 이용하도록 한다. 물론 order 클래스 역시 조건문을 달아서 반응형으로 제작 가능하다. `order-lg-3`의 형태로 !\n\n\u003cbr\u003e\n\n## CSS 레거시 코드 수정 방법\n\n원본 CSS 파일을 건들기 애매한 경우 CSS를 덮어쓰는 방법이 있다.\n\n1. 같은 클래스명 하단에 작성\n2. 우선순위 높이기\n3. specificity 높이기\n\n먼저, 1번의 방법을 설명하겠다. HTML 파일에서 main.css를 link하고 있다고 하자. 그러면 그 아래에 main2.css를 한 번 더 link 하는 방식이다.\n\n\n```css\n/* main.css */\n.custom {\n\tcolor: green;\n}\n\n/* main2.css */\n.custom {\n\tcolor: blue;\n}\n```\n\n이렇게 작성하면 결과적으로 색깔이 blue로 바뀔 것이다. **같은 class면 더 밑에 있는게 우선 적용되는 원리이다.** 즉, css 파일이 나뉘어져 있어도 밑에 있으면 더 우선적으로 적용되는 성질이다. media query도 밑에 작성하는 이유도 바로 이것이다.\n\n\u003cbr\u003e\n\n2번의 방법은 우선순위를 높이는 것이다. 위에서 **html의 style 속성 (1000점), css의 id 속성 (100점), css의 class 속성 (10점), html 태그 셀렉터 (1점)** 방법을 이용한다. 사실 10000점 짜리도 있다. `!important`가 붙은것은 무조건 최우선적으로 적용된다.\n\n```css\n.custom {\n\tcolor: red !important;\n}\n```\n\n그러나, 우선순위를 높이는 방식은 근본적인 해결방법이 아니다. 계속 우선순위를 높여갈 수 없지 않은가? 따라서 이 방법은 급할 때 사용하되 가능한 사용하지 않도록 한다.\n\n\u003cbr\u003e\n\n마지막으로 specificity 점수를 높이는 것이다. 클래스 명을 더 세부적으로 적어서 점수를 찔끔찔끔 올리는 방식이다.  \n\n```css\n/* 태그 셀렉터 1점 + class 10점 + class 10점 = 21점 */\ndiv.main-background .custom {\n\tcolor: green;\n}\n\n/* class 10점 = 10점 */\n.custom {\n\tcolor: red;\n}\n```\n\n\n따라서, .custom이 아래에 있다고 해도 위가 최종적으로 점수가 높기 때문에 위의 코드가 적용된다. 그러면 애초에 위처럼 누가 작성해놨다고 하면?\n\n```css\n/* 남이 짜놓은 레거시 코드, 21점 */\ndiv.main-background .custom {\n\tcolor: green;\n}\n\n/* 조금이라도 점수 올리기 위한 발악, 22점 */\ndiv.main-background p.custom {\n\tcolor: red;\n}\n```\n\n그래서, 처음부터 셀렉터를 너무 정확하게 적어놓으면 나중에 덮어쓰기 힘들 수 있다. 그래서 클래스명 하나를 작성하는 방식을 처음에 사용하도록 노력하자.\n\n\u003cbr\u003e\n\n**좋은 코드의 기준**\n\n1. 나중에 수정/관리가 쉬운 코드\n2. 확장성이 좋은 코드\n\n즉, 재활용 가능하고 확장해서 다른 class 만들기 쉽다면 좋은 css 코드라고 할 수 있다.","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/html_css/html_css":{"title":"HTML-CSS","content":"\n\u003cbr\u003e\n\n## 코딩애플 강의\n\n\u003ca href='https://codingapple.com/course/html-basics/' target='_blank'\u003eHTML/CSS All-in-one : 기초부터 Bootstrap, SASS, 고급 animation 까지 \u003c/a\u003e 강의를 정리한 내용\n\n- [All-in-One 기초모듈](notes/TIL/fragment/lang/html_css/all-in-one-basic)\n- [All-in-One 중급모듈](notes/TIL/fragment/lang/html_css/all-in-one-mid)\n- [All-in-One 고급모듈](notes/TIL/fragment/lang/html_css/all-in-one-last)","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/java/do-it/chap01":{"title":"","content":"","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/java/java":{"title":"Java","content":"\n# Java 언어 학습 계획\n\n  \n\n- Do it Java로 빠르게 입문서 완독\n\n- 이후 Java의 정석 회독을 늘리면서 익숙해지기\n\n- Do it 자료구조와 알고리즘도 함께 학습\n\n  \n\n\u003cbr\u003e\n\n  \n\n## Java 코딩 컨벤션\n\n  \n\n- 클래스 이름 : 대문자로 시작\n\n- 패키지 이름 : 모두 소문자로\n\n- public 클래스는 단 하나, public 클래스 이름과 자바 파일이름은 동일하게\n\n- 변수, 메서드 이름 : 소문자로 시작, 이름이 길어지는 경우 camel notation이용하여 중간중간 대문자로 구분하기\n\n  \n\n\u003cbr\u003e\n\n  \n\n## Java settings\n\n  \n\n### Windows\n\n  \n\n[환경 변수 설정법 링크](https://suzxc2468.tistory.com/141)\n\n  \n\n1. https://www.oracle.com/java/technologies/downloads/ 에서 Java 8에 Java SE Development Kit 8u341를 windows x64 다운로드 받기\n\n2. 검색창 - 내 pc(클릭 X, 마우스 우클릭) 속성 - 고급 시스템 설정 - 환경 변수\n\n  \n\n- 아래 시스템 변수 - 새로 만들기\n\n  \n\n- 변수 이름 : JAVA_HOME\n\n- 변수 값 : C:\\Program Files\\Java\\jdk1.8.0_341 (자바 JDK 설치 경로)\n\n  \n\n- 아래 시스템 변수 - Path - 편집 - 새로 만들기\n\n  \n\n- %JAVA_HOME%\\bin\n\n  \n\n- 아래 시스템 변수 - 새로 만들기\n\n- 변수 이름 : CLASSPATH\n\n- 변수 값 : %JAVA_HOME%\\lib\n\n  \n\n3. 환경변수 설정 이후 확인하려면 cmd에서 `javac -version` 입력\n\n4. 자바11 쓸거면 JAVA_HOME의 JDK 설치 경로만 11로 바꿔주면 됨\n\n  \n\n\u003cbr\u003e\n\n  \n\n### WSL2\n\n  \n\n1. `sudo vi /etc/apt/sources.list`에서 카카오 미러서버 되어있는지 부터 확인\n\n- 안되어 있으면 `%s /기존주소/mirror.kakao.com` 으로 변경하고 저장\n\n2. `sudo apt-get update`로 우분투 패치\n\n3. `sudo apt install openjdk-11-jdk`로 자바11 JDK 설치\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 환경설정\n\n  \n\n1. `which java`로 java 위치 파악, 결과 `/usr/bin/java`로 뜰 것\n\n2. `readlink -f /usr/bin/java` 하면 결과 `/usr/lib/jvm/java-8-openjdk-amd64/bin/java`로 뜰 것, 여기서 `/usr/lib/jvm/java-8-openjdk-amd64`를 기억\n\n3. `sudo vi /etc/environment`에서 기존에 있던거 지우고 `JAVA_HOME=/usr/lib/jvm/java-11-openjdk-arm64` 입력 후 저장\n\n4. `source /etc/environment`로 환경설정 파일 적용\n\n5. `echo $JAVA_HOME`로 JAVA 환경변수 작동 확인. 경로 나오면 제대로 된거\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 버전관리\n\n  \n\n1. [블로그 링크](https://codechacha.com/ko/ubuntu-install-open-jdk11/)를 따라하려고 했는데.. 나랑은 뭔가 달라서 일단\n\n2. `sudo apt install openjdk-8-jdk`로 자바8 jdk 설치\n\n3. `sudo update-alternatives --config java` 이거 해보면 알아서 적용 되어있음. 아마 환경설정할때 경로 다 날리고 JAVA_HOME만 냅둬서 그런듯\n\n4. 저기서 원하는 모드 선택하면 버전 왔다갔다 끝\n\n  \n\n\u003cbr\u003e\n\n  \n\n### Mac (M1)\n\n  \n\nhomebrew를 이용한 jdk 설치는 인텔 맥을 기반으로 되어있어서, arm 칩셋인 M1은 다른 방식으로 설치하여야 한다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n[zulu](https://www.azul.com/downloads/?version=java-17-lts\u0026os=macos\u0026architecture=arm-64-bit\u0026package=jdk)에서 제공하는 java 버전, ARM-64bit, JDK를 선택하고 설치가 편한 dmg파일로 설치한다.\n\n  \n\n- `/usr/libexec/java_home -V` : 설치된 자바 버전 목록\n\n- `java -version` : 현재 설정된 자바 버전 (상세한 버전)\n\n- `javac -version` : 현재 설정된 자바 버전 (간단히)\n\n  \n\n\u003cbr\u003e\n\n  \n\n이후 환경변수 설정을 위하여 zsh 설정 파일을 연다. (bash 쓰면 bash로)\n\n  \n\n- `code ~/.zshrc`\n\n- 혹시 zsh 커맨드가 안먹으면 vscode 명령 팔레트에서 **셀 명령 : PATH에 코드 명령 설치**를 이용하여 설치하자.\n\n  \n\n```bash\n\n# JAVA settings\n\nexport JAVA_HOME=$(/usr/libexec/java_home -v 1.8)\n\nalias setJava8='export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)'\n\nalias setJava11='export JAVA_HOME=$(/usr/libexec/java_home -v 11)'\n\nalias setJava17='export JAVA_HOME=$(/usr/libexec/java_home -v 17)'\n\nexport PATH=${PATH}:$JAVA_HOME/bin:\n\n```\n\n  \n\n이와 같은 코드를 추가한다. alias를 추가해준 이유는 버전 왔다갔다하면서 사용하려고 추가한 것이다.\n\n  \n  \n  \n\n## IntelliJ settings\n\n  \n\n1. 인텔리제이 pro버전 다운로드 체크는 전부 다 체크하고 맨 밑에 association만 java파일 연관 체크\n\n2. 깃허브 권한 설정으로 아이디 연동\n\n  \n\n\u003cbr\u003e","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/javascript/apple-js-01":{"title":"JS 입문과 웹 개발 01","content":"\n## 자바스크립트 사용 목적\n\nJavaScript는 html 파일 내부에 숨어서 **html 조작과 변경**을 담당하는 언어이다.\n\n- 탭, 모달 등 웹페이지 UI 제작 가능\n- 유저가 입력한 데이터 검사 가능\n- 유저가 버튼 누르면 서버로 데이터 요청 가능 등\n\nscript 태그 안에 넣어서 작성한다. 물론 js 파일을 따로 만들어서 link 해도 된다. script 태그 안에 적은 코드는 **브라우저 새로고침시 1번 실행된다.**\n\n\u003cbr\u003e\n\n**`document.getElementById('id명').무엇을 = '어떻게';`** \u003cbr\u003e\n\n`document.getElementById('hi').innerHTML = 'JS 고수에요';` \u003cbr\u003e\n\n- document : 문서, html 문서를 의미\n- 마침표 : ~의\n- getElementById('hi') : 아이디가 hi인 html 요소 (element)를 가져와라, 셀렉터\n- innerHTML : HTML 내부에서\n- 그리고 'JS 고수에요'를 대입하라.\n  \n```javascript\n// 글자 색깔 빨간색으로 변경\ndocument.getElementById('id').style.color = 'red';\n\n// img의 src 변경\ndocument.getElementById('id').src = './img/주소';\n```\n\n\u003cbr\u003e\n\n**`document.getElementsByClassName('class명')\\[인덱스].무엇을 = '어떻게';`**\u003cbr\u003e\n\n`document.getElementsByClassName('hi')[0].innerHTML = 'JS 고수에요';`\n\n- class는 여러 개 나올 수 있어서 인덱싱 해줘야함\n\n\u003cbr\u003e\u003cbr\u003e\n\n## querySelector\n\ngetElementsByClassName, getElementById와 같이 querySelector는 유용하다. css의 셀렉터 기능을 사용할 수 있게 해준다.\n\n```javascript\ndocument.querySelector('.test').innerHTML = '안녕';\ndocument.querySelector('#test').innerHTML = '안녕';\n```\n\n단, 클래스 사용 시 제일 최상단 요소만 선택되므로, 예를 들어, 두번째 요소를 선택하고 싶으면 querySelectorAll을 사용하고 인덱스를 줘야 한다.\n\n```html\n\u003cul class=\"list-group\"\u003e\n\t\u003cli class=\"list-group-item\"\u003eAn item\u003c/li\u003e\n\t\u003cli class=\"list-group-item\"\u003eA second item\u003c/li\u003e\n\t\u003cli class=\"list-group-item\"\u003eA third item\u003c/li\u003e\n\u003c/ul\u003e\n  \n\u003cscript\u003e\n\tdocument.querySelectorAll('list-group-item')[1].innerHTML = '두번째 아이템';\n\u003c/script\u003e\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n### getElementById와 비교\n\n\u003ca href='https://www.measurethat.net/Benchmarks/ShowResult/11974' target='_blank'\u003e벤치마크 결과\u003c/a\u003e를 살펴보면, getElement가 querySelector보다 약 1.2배 빠른 것을 확인 가능하다. getElement가 성능이 좋은 것은 확실하다.\n\n\u003cbr\u003e\n\n하지만, id는 getElementById, class는 getElementByClassName 등 요소마다 다른 것을 사용하는 것은 querySelector를 이용하여 셀렉터를 취급하는 것보다 분명 피곤한 일이다. 또, querySelector는 `id, class, [data-*=\"\"], input[name=\"\"]`등 다양한 셀렉터를 사용할 수 있다.\n\n\u003cbr\u003e\n\nquerySelector가 성능이 약간 떨어질 수 있지만 생산성이 높다는 말이다. 실제로 조금 더 느리다고는 하지만, querySelector는 초당 약 7,000,000 건의 작업을 처리할 수 있다. querySelector도 충분히 빠르다는 말이다. 성능 때문에 querySelector를 지양하고 getElement를 사용하라는 건 조금 받아드리기 힘들다. 실제로, querySelector보다 느린 \u003ca href='https://w3techs.com/technologies/history_overview/javascript_library/all/y' target='_blank'\u003ejQuery의 시장 점유율\u003c/a\u003e을 보면 2022년 8월 17일 기준 77.4%이다. 느려서 querySelector를 쓰지 말아야 한다면, jQuery도 사용하지 말아야 하는 것 아닌가?\n\n\u003cbr\u003e\n\n물론, 생산성 측면에서 봤을 때 jQuery가 querySelector보다 훨씬 높으니까 조~금 어불성설일 수 있지만, 말하고자 하는 것은 속도때문에 querySelector를 포기해야 할 이유가 있는가 하는 것이다. 하나의 주장일 뿐이지만 나도 굳이 getElement를 쓰기 보다는 querySelector를 쓰는 것에 한 표 던진다.\n\n\u003cbr\u003e\u003cbr\u003e\n\n## UI 만드는 법칙\n1. HTML/CSS로 미리 디자인 (필요하면 미리 숨김)\n\t- `display: none;` 이용\n2. 필요할때 보여주기 (자바스크립트 사용)\n\t- `display: block;` 이용\n\n이걸로 모달창, 드롭다운 메뉴 등 구현 가능\n\n\u003cbr\u003e\u003cbr\u003e\n\n## 자바스크립트 function\n\n- 긴 코드 축약하고 싶을 때 사용\n- 긴 코드 재사용이 잦을 때 사용\n- 함수명 영어 작명 시\n\n1. 소문자 시작\n2. camelCase\n\n`open_alert()` **X**, `openAlert()` **O**\n\n```javascript\nfunction 작명(파라미터) {\n\tdocument.getElementById('alert').style.display = 파라미터;\n}\n```\n\n```html\n\u003cbutton class=\"alert-open\" onclick=\"작명('flex')\"\u003e띄우기\u003c/button\u003e\n```\n\n- 파라미터 내부에 문자는 `' '` 안, 숫자는 바로  \n\n\u003cbr\u003e\u003cbr\u003e\n\n## 자바스크립트 초창기 겪는 문제들, 오류들\n\n\u003cbr\u003e\n\n1. script 태그를 body 내부에서 상단에 작성한 경우\n\nscript 태그를 body 내부에서 상단에 작성하면 잘 안되는 경우가 있다. script 태그를 조작할 html의 하단에 코드를 작성하는 이유는 렌더링 과정에서 위에서 아래로 읽어가기 때문이다. 따라서 상단에 작성하면 렌더링이 늦을 수 있다.\n\n  \u003cbr\u003e\n\n2. 셀렉터 오타 주의\n\n셀렉터 오타로 자바스크립트 실행이 안되는 경우, 크롬 개발자 도구에서 console 탭에서 에러 타입을 보자. **어쩌구 of null**은 대부분 셀렉터 오타이다. \"style을 읽고 싶은데 왼쪽에 있는것이 null이다~\" 라는 형태의 오류가 자주 보일 것이다.\n\n\u003cbr\u003e\n\n3. 기본 문법 오타  \n\n대문자, 소문자 확인 잘하자. `getElementById`를 `getElementByid`로 작성하지 않았는가? 뭐 잘 안보이면 항상 크롬 개발자도구 console 탭을 확인하자.\n\n\u003cbr\u003e\u003cbr\u003e\n\n## 자바스크립트 이벤트리스너\n\nhtml 버튼 태그에 `onclick` 붙히면 좀 더럽지 않음? 그때 `addEventListener()`을 자바스크립트에서 구현하자. 클릭, 키 입력, 스크롤, 드래그 등 웹 페이지에 조작을 가하는 행위가 **이벤트**이다. 이벤트가 일어나길 귀 기울여서 기다리는 친구가 **이벤트 리스너**이다.\n\n- `'click'` : 마우스 클릭\n- '`mouseover`' : 마우스 갖다대는거\n- `'scroll'` : 마우스 스크롤\n- `'keydown'` : 키 입력\n\n\u003ca href='https://developer.mozilla.org/en-US/docs/Web/Events' target='_blank'\u003e그 외 수많은 이벤트 목록 참고\u003c/a\u003e\n\n```javascript\n셀렉터로찾은요소.addEventListener('event명', function () {\n// 실행할 코드\n});\n\ndocument.getElementById('alert2_close').addEventListener('click', function () {\n\tdocument.getElementById('alert2').style.display = 'none';\n});\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n## 자바스크립트 콜백함수  \n\n위에 addEventListener 사용할 때 첫번째 파라미터에는 event 요소가 들어가고, 두번째 파라미터 자리에 들어갔던 function()이 있을거임\n\n```javascript\n셀렉터로찾은요소.addEventListener('event명', function () {\n// 실행할 코드\n});\n```\n\n- 이 function()이 바로 콜백함수\n- 자바스크립트에서 코드를 순차적으로 실행하고 싶을 때 콜백함수를 자주 사용\n- 콜백함수 자리에 만든 함수 넣어도 됨. 단, `함수()`의 형태가 아닌 `함수`로 넣어야 오류 없이 작동할 것\n\n\u003cbr\u003e\u003cbr\u003e\n\n## classList, toggle\n\nnavbar 같은 곳에서 주로 사용하는 버튼 눌렀을 때 등장하는 서브메뉴를 구현하려고 한다. 해당하는 UI 제작할 때는\n\n1. 미리 htmml/css 디자인 해놓고 `display: none;`으로 숨긴다.\n2. 버튼 누르면 display 속성 바꿔서 보여준다.\n\n이 경우 `document.getElementById('id').style.display = 'none'`과 같이 작성해도 되지만, class 탈부착식으로 만드는 것이 유지보수에 편리하기 때문이다.\n\n\u003cbr\u003e\n\n```css\n.list-group {\n\tdisplay: none;\n}\n\n.show {\n\tdisplay: block;\n}\n```\n\n다음과 같이 show 클래스를 list-group 클래스에 붙혔다 뗐다 하는 방식으로 만들면 될 것 같다. 이때 자바스크립트에서 html에 접근하여 클래스를 붙히는 기능을 해주는 것이 **classList**이다.\n\n```javascript\ndocument\n\t.getElementsByClassName('navbar-toggler')[0]\n\t.addEventListener('click', function () {\n\t\tdocument.getElementsByClassName('list-group')[0].classList.add('show');\n});\n```\n\n만약, 버튼을 한 번 더 누르면 서브메뉴를 숨기고 싶다면 if문, 변수문법을 사용해서 가능하다. 아직 안배웠으니까 쉬운 방법인 **toggle**을 이용한다.\n\n```javascript\ndocument\n\t.getElementsByClassName('navbar-toggler')[0]\n\t.addEventListener('click', function () {\n\tdocument.getElementsByClassName('list-group')[0].classList.toggle('show');\n});\n```\n\n이렇게 코드 작성 시, toggle 기능을 이용하여 show 클래스가 있다면 없애고 없다면 붙히는 방식이다.\n\n\u003cbr\u003e\u003cbr\u003e\n\n## jQuery 라이브러리\n\n자바스크립트 코드가 길고 더러워서 HTMl 조작을 쉽게하는 라이브러리들이 대표적으로 jQuery, React, Vue이다. React와 Vue는 자바스크립트 숙련도를 요구하기 때문에 간단하게 jQuery를 배워본다. jQuery는 라이브러리일 뿐 새로운 문법이나 이런게 아니라 함수명만 짧아진다. 예를 들어, `document.querySelect`와 같은 셀렉터는 짧게 `$` 하나로 바뀌고 `addEventListener`는 짧게 `on` 하나로 바뀐다.\n\n\u003cbr\u003e\n\njQuery CDN을 이용하여 사용한다.\n\n```javascript\n\u003cscript\nsrc=\"https://code.jquery.com/jquery-3.6.0.min.js\"\nintegrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\"\ncrossorigin=\"anonymous\"\u003e\u003c/script\u003e\n```\n\n거의 모든 자바스크립트 라이브러리는 로딩 속도 때문에 `\u003cbody\u003e` 태그 끝나기 전에 넣는 것을 권장한다. jQuery 설치한 곳 **하단**에서 jQuery 문법을 사용 가능하다. 상단에 코드 짜고 안된다고 울지말고 제발 하단에다가 짜라. 강의에서는 편의상 그냥 head 태그 끝에 jQuery를 설치했다. 로딩속도는 조금 느리겠지만, 코드 보기에 좋으니깐 편의상~\n\n\u003cbr\u003e\n\n- `$` : querySelectorAll의 역할\n\n- `.eq()` : querySelectorAll의 인덱스 역할\n\n- `.html` : jQuery로 html의 내용 변경\n\n- `.css('속성', '값')` : jQuery로 css의 내용 변경\n\n- `.addClass('클래스명')` : jQuery로 클래스 부착\n\n- `.removeClass('클래스명')` : jQuery로 클래스 제거\n\n- `.toggleClass('클래스명')` : jQuery로 클래스 토글\n\n```javascript\ndocument.querySelector('.hello').innerHTML('바보');\n$('.hello').html('바보');\n\ndocument.querySelector('.hello').style.color = 'red';\n$('.hello').css('color', 'red');\n```\n\nquerySelector를 쓰면 인덱스 하나하나 지정하고 바꿔줘야해서 양이 늘어난다. (뭐, 클래스명 같게 하고 querySelectorAll 말고 querySelector 쓰면 되긴 함) 근데 jQuery를 쓰면 그냥 한꺼번에 바꿀 수 있다.\n\n```html\n\u003cp class=\"hello\"\u003e안녕\u003c/p\u003e\n\u003cp class=\"hello\"\u003e안녕\u003c/p\u003e\n\u003cp class=\"hello\"\u003e안녕\u003c/p\u003e\n```\n\n```javascript\ndocument.querySelectorAll('.hello')[0].innerHTML = '바보';\ndocument.querySelectorAll('.hello')[1].innerHTML = '바보';\ndocument.querySelectorAll('.hello')[2].innerHTML = '바보';\n  \n$('.hello').html('바보');\n```\n\n\u003cbr\u003e\n\njQuery 이벤트리스너 사용법\n\n```javascript\n$(\"#test-btn\").on(\"click\", function () {\n\t어쩌구~\n});\n```\n\nstyle의 display 속성을 none으로 바꿔도 되지만 jQuery는 편리한 것들을 제공해줌  \n\n- `.hide()` : 사라지게\n\n- `.fadeOut()` : 서서히 사라지게\n\n- `.slideUp()` : 줄어들며 사라지게\n\n- `.show()` : 보이게\n\n- `.fadeIn()` : 서서히 보이게\n\n- `.slideDown()` : 늘어나며 보이게\n\n- `.fadeToggle()` : 누를때마다 fade\n\n\u003cbr\u003e\u003cbr\u003e\n\n## 모달(Modal) 창 제작 Tip\n\nModal창은 보통 페이지 맨 앞에, 모든 html 요소 제일 위에 존재하기 때문에 **html 맨 위에 적는 것**이 관습이다.  \n\n```css\n/* 모달창 국룰 세팅 */\n.modal {\n\tposition: fixed;\n\tz-index: 5;\n}\n```\n\n```html\n\u003cdiv class=\"black-bg\"\u003e\n\t\u003cdiv class=\"white-bg\"\u003e\n\t\t\u003ch4\u003e로그인하세요\u003c/h4\u003e\n\t\t\u003cbutton class=\"btn btn-danger\" id=\"close\"\u003e닫기\u003c/button\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\n\n\u003cbutton id=\"login\"\u003e로그인\u003c/button\u003e\n\n\u003cscript\u003e\n$('#login').on('click', function () {\n\t$('.black-bg').addClass('show-modal');\n});\n\n$('#close').on('click', function () {\n\t$('.black-bg').removeClass('show-modal');\n});\n\u003c/script\u003e\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n## UI에 애니메이션 추가\n  \n위의 예제 코드에서 addClass와 removeClass 대신에 fadeIn과 fadeOut을 넣으면 애니메이션을 넣을 수 있지만, 자바스크립트에 애니메이션을 넣는 것은 성능 때문에 좋은 관습은 아니고 css에 넣는 것이 좋다.\n\n- \u003ca href='/notes/TIL/fragment/lang/html_css/all-in-one-mid' target='_blank'\u003eone-way-animation\u003c/a\u003e\n\n- \u003ca href='/notes/TIL/fragment/lang/html_css/all-in-one-last' target='_blank'\u003eanimation 심화\u003c/a\u003e\n\n추가로, 애니메이션 제작 시 `display: none;` 보다 `visibility: hidden;`이 낫다.\n\n\u003cbr\u003e\n\n- 자바스크립트 (jQuery)로 애니메이션 넣은 코드\n\n```html\n\u003cbody\u003e\n\t\u003cdiv class=\"black-bg\"\u003e\n\t\t\u003cdiv class=\"white-bg\"\u003e\n\t\t\t\u003ch4\u003e로그인하세요\u003c/h4\u003e\n\t\t\t\u003cbutton class=\"btn btn-danger\" id=\"close\"\u003e닫기\u003c/button\u003e\n\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\n\t\u003cbutton id=\"login\"\u003e로그인\u003c/button\u003e\n\u003c/body\u003e\n  \n\u003cscript\u003e\n\t$('#login').on('click', function () {\n\t\t// fadeIn() 사용\n\t\t$('.black-bg').fadeIn();\n\t});\n\u003c/script\u003e\n```\n\n```css\n.black-bg {\n\twidth: 100%;\n\theight: 100%;\n\tposition: fixed;\n\tbackground: rgba(0, 0, 0, 0.5);\n\tz-index: 5;\n\tpadding: 30px;\n\t/* display: none 사용 */\n\tdisplay: none;\n}\n\n.show-modal {\n\t/* display: block 사용 */\n\tdisplay: block;\n}\n```\n\n\u003cbr\u003e\n\n- css로 애니메이션 적용한 코드  \n\n```html\n\u003cbody\u003e\n\t\u003cdiv class=\"black-bg\"\u003e\n\t\t\u003cdiv class=\"white-bg\"\u003e\n\t\t\t\u003ch4\u003e로그인하세요\u003c/h4\u003e\n\t\t\t\u003cbutton class=\"btn btn-danger\" id=\"close\"\u003e닫기\u003c/button\u003e\n\t\t\u003c/div\u003e\n\t\u003c/div\u003e\n\n\t\u003cbutton id=\"login\"\u003e로그인\u003c/button\u003e\n\u003c/body\u003e\n  \n\u003cscript\u003e\n\t$('#login').on('click', function () {\n\t\t// addClass() 사용\n\t\t$('.black-bg').addClass('show-modal');\n\t});\n\u003c/script\u003e\n```\n\n```css\n.black-bg {\n\twidth: 100%;\n\theight: 100%;\n\tposition: fixed;\n\tbackground: rgba(0, 0, 0, 0.5);\n\tz-index: 5;\n\tpadding: 30px;\n\n\t/* visibility, opacity, transition 사용 */\n\tvisibility: hidden;\n\topacity: 0;\n\ttransition: all 1s;\n}\n\n.show-modal {\n\t/* visibility, opacity 사용 */\n\tvisibility: visible;\n\topacity: 1;\n}\n```\n\n- 자바스크립트 (jQuery)로 애니메이션 넣은 서브메뉴바  \n\n```html\n\u003cscript\u003e\n\t$('.navbar-toggler').on('click', function () {\n\t\t$('.list-group').slideToggle();\n\t});\n\u003c/script\u003e\n```\n\n```css\n.list-group {\n\tdisplay: none;\n}\n```\n\n- css로 애니메이션 적용한 서브메뉴바\n\n```html\n\u003cscript\u003e\n\t$('.navbar-toggler').on('click', function () {\n\t\t$('.list-group').toggleClass('show-menubar');\n\t});\n\u003c/script\u003e\n```\n\n```css\n.list-group {\n\tdisplay: block;\n\theight: 0;\n\toverflow: hidden;\n\ttransition: all 1s;\n}\n\n.show-menubar {\n\theight: 210px;\n}\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n## form태그 if/else\n\n- form 태그 다룰 때, 전송 버튼은 반드시 `type=\"submit\"` 해줄 것 명심하자. 일반 버튼은 `type=\"button\"` 이렇게 해야 오류가 없다.\n- form 태그는 서버로 유저정보 전송하려고 쓰는 것이다.\n- `\u003cform action=\"url~~~\"\u003e\u003c/form\u003e` 서버 경로 제대로 설정하자.\n\n\u003cbr\u003e\n\n### 조건문 (if-else)\n\n```javascript\nif (조건) {\n\t조건이 참일 때 실행할 코드\n} else {\n\t조건이 거짓일 때 실행할 코드\n}\n```\n\n- 조건 사용 시 비교연산자 `==, ===, !=, !==, \u003c, \u003c=, \u003e, \u003e=`\n- 조건 사용 시 boolean `true(1), false(0)` 이용\n- 참고로 `elif`는 파이썬임 `else if`가 자바스크립트\n- `else if`는 위의 조건이 참이면 실행 안되는 것임\n\n```javascript\nif (1 == 3) {\n\tconsole.log('맞아요1');\n} else if (1 == 1) {\n\tconsole.log('맞아요2');\n}\n\n// 출력 : 맞아요2\nif (3 == 3) {\n\tconsole.log('맞아요1');\n} else if (1 == 1) {\n\tconsole.log('맞아요2');\n}\n\n// 출력 : 맞아요1\n// 위에가 참이니까 맞아요2는 출력안되고 그냥 끝남\n\nif (1 == 1) {\n\tconsole.log('맞아요1');\n}\n\nif (2 == 2) {\n\tconsole.log('맞아요2');\n}\n\n// 출력 : 맞아요1\n// 출력 : 맞아요2\n```\n\n\u003cbr\u003e\n\n### 비교 연산자\n\n그냥 비교할 때는 `==`, `!=` 타입까지 맞춰서 비교할 때는 `===`, `!==`\n\n- 동등 연산자(`==`) : 두 피연산자의 자료형을 일치시킨 후 비교 수행\n- 부등 연산자(`!=`) : 두 피연산자의 자료형을 일치시킨 후 비교 수행\n- 일치 연산자(`===`) : 자료형 변환 없이 비교 수행\n- 불일치 연산자(`!==`) : 자료형 변환 없이 비교 수행\n\n\u003cbr\u003e\n\n### 논리 연산자\n\n- `\u0026\u0026` : AND\n- `||` : OR\n- `!` : NOT\n\n\u003cbr\u003e\n\n## truthy, falsy 자료\n\n| truthy 자료 | falsy 자료 |\n| :---------: | :--------: |\n| 0 제외 숫자 | 0 |\n| '문자' | '' |\n| [] | null |\n| {} | undefined |\n| | NaN |  \n\n\u003cbr\u003e\n\n## undefined, null\n\nundefined와 null은 '값이 없다' 라는 점에서 유사하지만 엄밀히 말하면 다른 개념이다. typeof 연산자로 타입을 확인해보면 undefined는 undefined 타입이, null은 object 타입이라고 표시된다.\n\n- undefiend : 변수는 존재하나, 어떠한 값으로도 할당되지 않아 자료형이 정해지지(undefined) 않은 상태\n\n- null : 변수는 존재하나, null 로 (값이) 할당된 상태. 즉 null은 자료형이 정해진(defined) 상태\n\n```javascript\nvar var1;\n//undefined (어떤 값도 할당되지 않아서 자료형을 알 수 없음)\n\nvar var2 = null;\n//null (null로 (값이) 할당되어서 자료형을 알 수 있음 - null의 자료형은 object)\n``` \n\n근데, `undefined == null`을 비교하면 true값이 나온다. 이는 위에서 설명한 비교연산자 때문이다. 엄격한 비교인지 엄격하지 않은 비교인지 때문이다.\n\n```javascript\nundefined == null; //true , 형변환 까지 해줘서 true가 나옴\nundefined === null; //false , 형변환을 하지 않아서 false가 나옴\n```\n\n\u003cbr\u003e\n\n### if문 이용한 form 태그\n\n  \n\n```javascript\n// 물론 둘다 else if 말고 그냥 if 문들로 해도 됨\n// 근데 else if가 나은듯\n\ndocument\n\t.getElementsByTagName('form')[0]\n\t.addEventListener('submit', function (e) {\n\t\tif (document.getElementById('email').value == '') {\n\t\t\te.preventDefault();\n\t\t\talert('아이디를 입력 해주세요 !');\n\t\t} else if (document.getElementById('pw').value == '') {\n\t\t\te.preventDefault();\n\t\t\talert('비밀번호를 입력 해주세요 !');\n\t\t} else if (document.getElementById('pw').value.length \u003c 6) {\n\t\t\te.preventDefault();\n\t\t\talert('비밀번호를 6자리 이상 입력 해주세요 !');\n\t\t} else {\n\t\t\talert('정상적으로 제출되었습니다.');\n\t\t}\n});\n\n// jQuery 사용\n$('form').on('submit', function (e) {\n\tif (document.getElementById('email').value == '') {\n\t\te.preventDefault();\n\t\talert('아이디를 입력 해주세요 !');\n\t} else if (document.getElementById('pw').value == '') {\n\t\te.preventDefault();\n\t\talert('비밀번호를 입력 해주세요 !');\n\t} else if (document.getElementById('pw').value.length \u003c 6) {\n\t\te.preventDefault();\n\t\talert('비밀번호를 6자리 이상 입력 해주세요 !');\n\t} else {\n\t\talert('정상적으로 제출되었습니다.');\n\t}\n});\n```\n\n- getElementsByTagName 할 때도 인덱스 지정해줘야함\n\n- 제출버튼에 id 지정해줘도 되지만, form 태그의 이벤트를 submit으로 해줘도 됨\n\n- input의 값은 value로 가져옴\n\n- 전송을 원하지 않으면 function의 괄호 안에 `e`를 넣고 `e.preventDefault();` 해주면 됨\n\n\u003cbr\u003e\n\n## input 이벤트  \n\n```javascript\ndocument.getElementById('email').addEventListener('input', function () {});\n\ndocument.getElementById('email').addEventListener('change', function () {});\n```\n\n- 불러온 id 태그가 input 태그일 때 addEventListener 이벤트에 input / change 준 경우\n\n- input 태그에 유저가 입력한 값이 변할 때 실행된다는 의미\n\n- 이벤트 input 일 때 : input 태그에 입력한 값이 바뀔 때마다 실행\n\n- 이벤트 change 일 때 : input 태그에 입력한 값이 바뀌고 **포커스를 잃을 때** 실행\n\n- 응용하면 비밀번호 6자리 이상 입력해야할 때 그것보다 작게 입력하고 있으면 계속 ui 띄우는 경우가 있겠네\n\n\u003cbr\u003e\n\n## 변수 문법\n  \n\n```javascript\nvar 변수명 = 넣을자료;\n```\n\n변수를 사용하는 이유\n\n- 길고 복잡한 자료들 저장 가능\n- 특정 값을 기억하게 하려고 (count 같은거)\n- **좋은 관습 : 자주쓰는 셀렉터 변수에 넣어쓰기**\n\n\u003cbr\u003e\n\n변수는 **변수의 선언, 할당, 범위** 세 가지만 잘 기억하면 된다.  \n\n- 변수의 선언 : 변수 만들겠습니다.\n- 변수의 할당 : 변수에 자료 넣기\n- 변수의 범위\n- 함수 안에서 변수 만들면 사용가능 범위는 함수 내부 \u003cbr\u003e 함수 안에서 만든 변수를 함수 밖에서 사용하려고 하면 사용 불가능\n  \n```javascript\nvar 이름; // 변수의 선언\n이름 = 'kim'; // 변수의 할당\n\nvar 이름 = 'kim'; // 변수의 선언과 할당\n이름 = 'park'; // 변수의 재할당\n```\n\n```javascript\nfunction 함수() {\n\tvar 이름 = 'kim';\n\tconsole.log(이름);\n}\n// 출력 : kim\n\nfunction 함수() {\n\tvar 이름 = 'kim';\n}\n\nconsole.log(이름);\n// 출력 : Uncaught ReferenceError: 이름 is not defined\n```\n\n\u003cbr\u003e\n\n## var let const 차이\n\n| var | let | const |\n| :--------------------------------: | :-------------------------: | :-------------------------: |\n| 재선언O | 재선언X | 재선언X |\n| 재할당O | 재할당O | 재할당X |\n| 범위 function \u003cbr\u003e Function-scoped | 범위{ } \u003cbr\u003e {Block-scoped} | 범위{ } \u003cbr\u003e {Block-scoped} |\n\n- let 변수 : 재선언 불가\n\n- 코드가 길어지면 사용한 변수를 까먹고 또 만들 수 있다. \u003cbr\u003e let은 이것을 방지 가능\n\n```javascript\nlet 이름 = 'kim';\nlet 이름 = 'park';\n\n// 출력 : Uncaught SyntaxError: Identifier '이름' has already been declared\n```\n\n- const 변수 : 재선언 불가, 재할당 불가\n\n- 변하는 안되는 값을 보관할 때 좋다. 상수\n\n```javascript\nconst 이름 = 'kim';\n이름 = 'park';\n\n// 출력 : Uncaught TypeError: Assignment to constant variable.\n```\n\n- 추가로, let과 const는 function뿐만 아니라 중괄호 `{}` 내부는 모두 범위로 취급한다.\n\n```javascript\nif () {\n\tlet 이름;\n}\n\n// 이것도 밖에서 이름 사용 못함\n```\n\n\u003cbr\u003e\n\n## 문자 중간에 변수 쉽게 넣기\n\n- 백틱 기호를 사용한다.\n\n- 변수는 `${변수}`와 같이 담는다.\n\n```javascript\nlet a = '안녕';\nconsole.log('문자' + a + '문자');\nconsole.log(`문자${a}문자`);\n\n// 문자안녕문자\n```","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/javascript/apple-js-02":{"title":"JS 입문과 웹 개발 02","content":"\n## setTimeout, setInterval\n\n\u003cbr\u003e\n\n### setTimeout\n\n- 몇 초 **후** 코드 실행하기 위한 자바스크립트 기본 내장 함수\n- 1000ms = 1초\n- 콜백함수자리에 만들어둔 함수 당연히 넣을 수 있음\n\n```javascript\nsetTimeout(function () {\n\t실행할코드;\n}, ms);\n\n// 콜백함수에 함수 넣으면?\nsetTimeout(알림창제거, 3000);\n\nfunction 알림창제거() {\n\tdocument.querySelectorAll('.alert')[0].style.display = 'none';\n}\n```\n\n- 대신 만든 함수 넣을 때 `함수()` 말고 `함수`만 넣으셈\n\n```javascript\nsetTimeout(알림창제거(), 3000);\n```\n\nsetTimeout은 함수로의 참조를 받아올 것이라 예상한다. 위의 `알림창제거()`는 함수를 실행시킨다. 그리고 실행의 결과가 setTimeout으로 전달된다. 우리가 코딩했던 것들을 살펴봤을 때, 알림창제거()의 결과는 undefined (아무것도 리턴하지 않는 함수)이다.그러므로 아무것도 스케쥴되지 않으니까 `알림창제거`만 넣어라.\n\n- 타이머를 변수에 담아서 사용 가능!\n\n```javascript\nlet 타이머 = setTimeout(어쩌구);\n```\n\n\u003cbr\u003e\n\n### setInterval\n\n- 몇 초 **마다** 코드 실행하기 위한 자바스크립트 기본 내장 함수\n\n```javascript\nsetInterval(function () {\n\t실행할코드;\n}, ms);\n```\n\n\u003cbr\u003e\n\n### clearTimeout\n\n- 타이머를 삭제하고 싶으면 타이머를 변수에 담고 clearTimeout 하면 된다.\n\n- `clearTimeout()`, `clearInterval()` 상호교환 가능하다. 허나, 명확성을 위하여 그렇게 하지말라고 \u003ca href='https://developer.mozilla.org/en-US/docs/Web/API/clearTimeout' target='_blank'\u003e공식 문서\u003c/a\u003e에서 표기하고 있다.\n\n```javascript\nfunction 콘솔출력() {\n\tconsole.log('안녕');\n}\n\nlet 타이머 = setTimeout(콘솔출력, 1000);\nclearTimeout(타이머);\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n## JS 문법 vs 브라우저 사용법\n\n- 자바스크립트 문법 : `if, var, function`\n\n- 브라우저 사용법 : `document.querySelector(), setTimeout(), alert()`\n\n- 자바스크립트 문법은 브라우저 사용할 경우 프로그래밍적인 기능을 더하고 싶을 때 사용하는 것이다. (ex. 조건 분기, 잠깐 보관, 코드가 길때 축약 등)\n\n- 웹 브라우저 사용법은 정확하게 **Web Browser API 사용법** 이라고 한다.  \n\n\u003cbr\u003e\n\n## 정규식\n\n- 정규식(Regular Expression)  \n\n- 공백 검사 말고도 유저가 입력한게 이메일 형식인지 맞는지 검사하고 싶다면 정규식을 사용해보도록 하자.\n\n- \u003ca href='https://regexr.com/' target='_blank'\u003eregex test\u003c/a\u003e 사이트를 통해 표현이 맞는지 검사해보자.\n\n\u003cbr\u003e\n\n### includes()\n\n- 문자 검사하는 쉬운 방법이다.\n\n- 한계 : 왼쪽 문자에 한글이 들어있냐, 영어가 들어있냐, A로 끝나냐, 숫자가 1회 출현하냐 이런 것을 검사할 수 없다.\n\n```javascript\n'abc'.includes('a');\n// true\n\n'abc'.includes('d');\n// false\n```\n\n\u003cbr\u003e\n\n### 정규식 파헤치기\n\n- `/ /`안에 문자를 넣고 정규식을 사용한다.  \n\n```javascript\n/a/.test('abcde');\n// true\n```\n\n\u003cbr\u003e\n\n**정규식으로 범위 지정 가능**\n\n`/[a-z]/` : a ~ z 중 아무 글자 1개, 즉 범위 지정 가능\n\n```javascript\n/[a-z]/.test('abcde')\n// true\n\n/[a-z]/.test('바보')\n// false\n\n/[A-Z]/.test('abcde')\n// false\n\n/[A-Z]/.test('abcdA')\n// true\n```\n\n\u003cbr\u003e\n\n- `/[a-zA-z]/` : 아무 알파벳 1개\n\n- `/[ㄱ-ㅎ가-힣ㅏ-ㅣ]/` : 아무 한글문자 1개\n\n- `/[0-9]/` : 아무 숫자 1개\n\n- `/\\S/` : 아무 문자 **1개**, 특수기호까지 포함\n\n```javascript\n/[ㄱ-ㅎ가-힣]/.test('안녕')\n// true\n\n/[ㄱ-ㅎ가-힣]/.test('ㅏㅏㅏ')\n// false\n\n/[ㄱ-ㅎ가-힣ㅏ-ㅣ]/.test('ㅏㅏ')\n// true\n```\n\n\u003cbr\u003e\n\n\u003e [!quote] Memo\n\u003e\n\u003e 주의할 게, 지금 문자 1개를 찾는 것이다. /a/는 a 문자 1개\"만\" 찾는 것이다. 여러 개 찾고 싶으면 /a+/ 형태로 +를 사용하자. +는 왼쪽 문자 반복 검색이다.\n\n\u003cbr\u003e\u003cbr\u003e\n\n**정규식으로 시작`(^)`/끝문자`($)` 검사**  \n\n- `/^a/` : a로 문자 시작하냐\n\n- `/a$/` : a로 문자 끝나냐\n\n- `/a|b/` : a 또는(or) b 있냐\n\n- `/(a|b)/` : 괄호 사용 가능, 정규식에서 괄호는 묶어서 계산해줌\n\n\u003cbr\u003e\n\n**정규식으로 이메일형식 검사**\n\n- `.` : 정규식의 특별한 문법, 따로 dot을 사용하고 싶으면 `\\` 써주기\n\n- `+` : 왼쪽 문자 반복 검색\n\n```javascript\n/\\S@\\S\\.\\S/.test('aaa@bbb.ccc')\n// false\n// 모든문자 1개 + 골뱅이 + 모든문자 1개 + . + 모든문자 1개\n\n/\\S@\\S\\.\\S/.test('a@b.c')\n// true\n\n/\\S+@\\S+\\.\\S+/.test('aaa@bbb.ccc')\n// true\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n## Carousel (캐러셀)\n\n- carousel, 회전목마라는 뜻인데 간단히 이미지 슬라이드라고 이해하자.\n- one-way 애니메이션 기반 UI 이다.\n\n1. 애니메이션 시작 전 화면 제작\n2. 애니메이션 종료 후 화면 제작\n3. 언제 종료화면으로 변할지 JS 코드짜기\n4. transition 추가\n\n\u003cbr\u003e\n\n1. **시작 전 화면**\n\n\n```css\n.slide-container {\n\twidth: 300vw;\n\tdisplay: flex;\n}\n\n.slide-box {\n\twidth: 100vw;\n} \n\n.slide-box img {\n\twidth: 100%;\n}\n```\n\n- 이런 느낌으로 컨테이너 전체 너비를 `캐러셀 이미지 개수 * 100vw` 정도로 해놓는다.\n- 그리고 박스의 폭 각각을 `100vw`로 설정한다.\n- 이미지 너비를 `100%`로 하고 박스에 꽉차게 설정한다.\n- 현재 슬라이드 컨테이너 너비가 300vw라서 좌우 스크롤이 생길 것이다. 그를 막기 위해 slide-container를 감싸는 div 박스를 하나 만들고 `style=\"overflow: hidden\"` 줘서 흐르는걸 숨겨준다.\n\n\u003cbr\u003e\n\n2. **시작 후 화면**\n\n- margin-left 속성을 줘도 되지만, 성능 때문에 `transform: translateX()` 속성을 사용하자. 현재 상황에서 `-100vw`를 해주면 전체적으로 왼쪽으로 이동하니 두번째 캐러셀 이미지가 보일 것이다.\n\n```css\n.slide-container {\n\twidth: 300vw;\n\tdisplay: flex;\n\ttransform: translateX(-100vw);\n}\n```\n\n\u003cbr\u003e\n\n3. 언제 종료화면으로 변할지 JS 코드 짜기\n\n- 버튼을 클릭했을 때 이미지에 translateX() 속성 주는 방식\n- 해당하는 캐러셀 이미지에 가도록 X축 조절하면 됨\n\n```javascript\ndocument\n\t.querySelector(\".slide-2\")\n\t.addEventListener(\"click\", function () {\n\t\tdocument.querySelector(\".slide-container\").style.transform =\n\t\t\"translateX(-100vw)\";\n});\n```\n\n\u003cbr\u003e\n\n4. **transition**\n\n```css\n.slide-container {\n\twidth: 300vw;\n\tdisplay: flex;\n\ttransition: all 1s;\n}\n```\n\n\u003cbr\u003e\n\n**이전 버튼과 다음 버튼을** 활용할 때는 현재 상테에 대한 변수를 하나 두고 그 변수 값을 조정하며 코드를 짜도록 하자.\n\n\u003cbr\u003e\u003cbr\u003e\n\n## function() return 문법\n\n\u003ca href='/notes/TIL/fragment/lang/javascript/apple-js-01' target='_blank'\u003eJS 입문과 웹 개발 01\u003c/a\u003e에서 설명한 자바스크립트 함수는 긴 코드를 축약하는 것과 파라미터를 추가해서 사용하는 것에 장점이 있었다. **return은 함수쓰고 그 자리에 뭔가 뱉고 싶으면 쓰는 것이다.**\n\n```javascript\nfunction 함수() {\n\treturn 123;\n}\n\n함수(); // 이 자리에 123 퉤! 하고 뱉음\n\n// 확인해보자\nvar 변수 = 함수();\nconsole.log(변수);\n```\n\n- 반환할 때 숫자, 문자, 수식 다 가능하다.\n\n- return은 함수종료 기능도 있다. return 밑에는 더이상 실행되지 않는다.\n\n\u003cbr\u003e\n\n\u003e [!quote] 그래서 return 용도가 뭔데?\n\u003e\n\u003e  자료를 넣으면 다른 자료가 나오는 변환기를 만들고 싶을 때 사용\n  \n\u003cbr\u003e\n\n쇼핑몰을 만드는 예시에서 가격 밑에 부가세를 표현해주고 싶다고 하자. 그럼 함수를 만들고 가격(자료)을 넣으면 부가세(다른 자료) 나오는 계산기를 만들고 싶은 것이다.\n\n```javascript\nfunction 부가세(가격) {\n\treturn 가격 * 0.1;\n}\n\n부가세(50000); // 5000\n```\n\n`문자 -\u003e 문자 변환기`, `숫자 -\u003e true/false 변환기` 아무렇게나 제작 가능\n\n\u003cbr\u003e\u003cbr\u003e\n\n## 자바스크립트 소수점 다루기\n\n자바스크립트에서 소수점 있는 숫자연산시 주의해야한다. 약간의 오차가 발생할 수 있다.\n\n\n```javascript\nconsole.log(55555 * 1.1);\n// 61110.50000000001\n\nconsole.log(1.1 + 0.3);\n// 1.4000000000000001\n```\n\n컴퓨터는 2진법으로 설계되어있기 때문에, `10 + 20`이라고 하면 숫자 10과 숫자 20을 더하는 것이 아니라 2진법으로 변환하여 `1010 + 10100`을 계산한다. 이때, 소수점을 2진법으로 변환 시 문제가 발생한다.\n\n\u003cbr\u003e\n\n`1.1 -\u003e 1.00011001100110011001100....` 이렇게 무한히 `1100`이 반복되는 모습을 확인가능하다. 무한한 숫자를 저장하기에 저장공간이 작아서 중간에 자르고 반올림 시켜버린다.\n\n\u003cbr\u003e\n\n매우 작은 오차라서 평소엔 무시해도 되지만, 조금 정확한 연산을 원한다면\n\n\n1. 애초에 소수점을 사용하지 말든가\n\n\t- 소수점을 전부 10곱해서 연산하고 10으로 나누기\n\n2. 소수점 정확하게 계산해주는 라이브러리 쓰든가\n\n3. 연산결과를 반올림해서 쓰든가\n\n\u003cbr\u003e\n\n### 소수점 반올림\n\n- `숫자.toFixed(몇째 자리 까지)`\n- 참고로 toFixed 붙혀주면 **문자로 반환됨**\n- 크롬 콘솔탭에서 색깔이 검은색이면 문자라고 생각하셈, 숫자는 파란색인듯\n\n```javascript\nconsole.log((55555 * 1.1).toFixed(1))\n// 61110.5\n\nconsole.log((55555 * 1.1).toFixed(2))\n// 61110.50\n```\n\n## +(플러스) 연산자 특징\n\n- `'문자' + 123 =\u003e '문자123'`\n- `'문자' + '문자' =\u003e '문자문자'`\n- 숫자끼리 더하고 싶으면 `parseInt()`, `parseFloat()` 사용\n\n```javascript\nfunction 부가세(가격) {\n\tlet result = (가격 * 1.1).toFixed(1);\n\treturn result + 1;\n}\n\nconsole.log(부가세(55555));\n// 61110.51\n// toFixed 써서 result가 문자니까 문자 + 1 = 문자1이 된 것\n\nfunction 부가세(가격) {\n\tlet result = (가격 * 1.1).toFixed(2);\n\treturn parseFloat(result) + 1;\n}\n\nconsole.log(부가세(55555));\n// 61111.5\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 부동소수점 부가 설명\n\n\u003ca href='https://youtu.be/-GsrYvZoAdA' target='_blank'\u003e코딩애플 유튜브 영상\u003c/a\u003e을 참조하여 정리했다. 모든 그림의 저작권은 \u003ca href='https://codingapple.com/' target='_blank'\u003e코딩애플\u003c/a\u003e님에게 있습니다. 추가로 참고하기 좋은 \u003ca href='https://codetorial.net/articles/floating_point.html' target='_blank'\u003e링크\u003c/a\u003e입니다.\n\n- 코드를 보면, `1.1 + 0.1`이 `1.2`와 동일하지 않고 약간 크다고 한다.\n\n```javascript\nconsole.log(1.1 + 0.1 == 1.2);\n// false\n\nconsole.log(1.1 + 0.1 \u003e 1.2);\n// true\n```\n\n### 1. RAM\n\n컴퓨터에서 5라는 숫자를 저장하려면 **RAM**에 저장한다. 0과 1의 이진수 형태로 저장하게 된다. 칸은 하나당 bit라고 한다.\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/NXITRPv.png\" height=\"30%\" width=\"50%\"\u003e\u003c/p\u003e\n\n숫자는 보통 8칸 정도를 마련하여 저장한다. 더 큰 수를 저장하고 싶으면 16칸도 할당한다. 16칸은 (-32768 ~ 32767) 까지 저장 가능하다.\n\n\u003cbr\u003e\n\n### 2. 부동소수 표현 저장\n\n소수 저장은 아무렇게나 하는 것이 아니라, 덧셈이나 뺄셈과 같은 연산을 편하게 하기 위하여 \u003ca href='https://docs.microsoft.com/ko-kr/cpp/build/ieee-floating-point-representation?view=msvc-170' target='_blank'\u003eIEEE 표준 표현방식\u003c/a\u003e을 따른다. \u003cbr\u003e\n\n예를 들어, `5.125`라는 수를 저장하기 위하여 메모리에 넉넉히 32칸을 준비한다. 이때, 32비트를 사용하는 방식을 **단정도(single precision)** 라고 한다. **배정도 표현**에서는 64비트를 사용한다.\n\n- 맨 첫번째 칸 : 부호 저장 (양수 = 0, 음수 = 1)\n- 저장할 숫자를 2진법으로 변환 ( **5.125 -\u003e 101.001** )\n- 점을 왼쪽 끝까지 이동 ( **1.01001 * 2\u003csup\u003e2\u003c/sup\u003e** )\n- 01001 부분을 **mantissa**라고 하는데 여기는 맨 뒤 23칸에 밀어넣는다.\n- 지수 부분에 127을 더하고 앞에 8칸에 저장한다. (지수는 2\u003csup\u003e2\u003c/sup\u003e 에서 위에꺼를 의미. 2\u003csup\u003e4\u003c/sup\u003e이면 4가 지수)\n- 여기서 127은 bias이다. bias는 2\u003csup\u003ek-1\u003c/sup\u003e인데 여기서 k는 지수부의 비트 수인 8이다. (8칸)\n\n\u003cbr\u003e  \n\n단정도 표현은 **부호부 (1칸) + 지수부 (8칸) + 가수부 (23칸)** 으로 이루어진다.\n\n\u003cbr\u003e\n\n### 3. 순환소수 문제\n\n이러한 저장 방식에는 순환소수 문제가 있다. 예를 들어, `10진수 0.125`는 `2진수 0.001`로 깔끔하게 나누어떨어진다. 그런데, `10진수 0.1` 같은 숫자는 깔끔하게 떨어지지 않고 `2진수 0.000110011001100110011001100110011001...` 무한히 반복하게 된다. 이러한 경우 32칸에 저장할 수 없어서 뒷부분을 잘라버리고 저장한다. 그렇다면 자른 뒷 부분의 오차가 발생하게 되는 것이다. 한마디로 **정확히 0.1을 저장한 것이 아니라 0.1에 근접한 수를 저장한 것이다.**\n\n\u003cbr\u003e\n\n### 4. 문제 발생\n\n이 사소한 오차가 큰 문제인가? 실제로, 걸프전 당시 미군이 운영하던 패트리어트 (Patriot Missile Defense)라는 미사일 요격 장비가 있었는데, 미사일 요격에 실패하여 28명의 군인이 전사한 사건이 있었다. 패트리어트를 구동하기 위한 프로그램에서 **시간을 0.1초 단위로 측정했다.**\n\n\u003cbr\u003e\n\n여기서 패트리어트는 숫자 1개에 24칸을 사용했다. 그러면 0.1을 표현할 때 오차가 생기는게 단정도 표현 방식보다 더 컸을 것이다. 보통 1시간 마다 0.0034초 오차가 발생했다고 한다. 사소해보이지만, \u003ca href='http://nifty.stanford.edu/2003/pests/2002/lectures/07.1_FloatingPoint/Patriot.html' target='_blank'\u003e사고 report\u003c/a\u003e를 보면 해당 기기를 100시간 가동시키니 **0.34초** 오차가 발생했다. 이렇게 봐도 작아보이는가 ?\n\n\u003cbr\u003e\n\n1500 m/s 속력의 미사일 요격시 이 0.34초 오차 때문에 500m 정도 빗나갔다. 이래서 요격에 실패하여 비극을 일으킨 것이다.\n\n\u003cbr\u003e\n\n### 5. 결론\n\n그래서, 소수는 어디에 사용되는가? \u003cbr\u003e\u003cbr\u003e\n\n- 5-1. 정확히 계산해야하는 자료는 **정수**로 저장 \u003cbr\u003e\n\n돈 같은 경우 5.1 달러를 저장하고 싶으면 float를 사용하여 저장하면 안되고 **정수**의 형태로 저장해야 한다. 즉, 5.1달러가 아닌 5100센트로 저장해야 한다. \u003cbr\u003e\n\n\u003cbr\u003e\n\n- 5-2. 굳이 float 써야할 때는 **반올림 문법** \u003cbr\u003e\n\n```javascript\nprecision = Math.pow(10, precision)\nMath.ceil(num * precision) / precision\n```\n\n\u003cbr\u003e\n\n- 5-3. **double 자료형 사용**하여 더 정확하게 저장 \u003cbr\u003e\n\n숫자 1개당 32칸이 아닌 **64칸을 사용**한다. IEEE 부동소수 표현 설명에서 봤던 **배정도 표현**을 사용하는 것이다. 오차가 매우 작아지기 때문에 괜찮지만, 단점으로는 역시 메모리 용량을 2배 쓰는 것이니까 낭비일 수 있다.\n\n\u003cbr\u003e\u003cbr\u003e\n\n## scroll 이벤트 활용\n\nwindow 객체를 활용하여 scroll 이벤트를 사용할 수 있다.\n1. 스크롤바 조작할 때마다 코드실행 가능\n2. 박스의 실제 높이 / 보이는 높이 구할 수 있음\n3. 스크롤 얼마나 했는지 스크롤양 구할 수 있음\n\n```javascript\nwindow.addEventListener('scroll', function() {\n\tthis.window.scrollY ~\n})\n```\n\n- 왼쪽이 스크롤 될 때 마다 안에 코드 실행해줌\n\n- 현재 그냥 html 페이지 그 자체를 의미하는건 window, DOM이 있다.\n\n- 스크롤 이벤트를 감지하고 싶으면 보통 window에 이벤트리스너 부착\n\n- 추가로 html에서 임의로 스크롤 만들거면 `overflow-y` 다루셈 혹은 `height 굉장히 큰 div박스` 만들던가\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/tzUh9hf.png\" height=\"30%\" width=\"50%\"\u003e\u003c/p\u003e\n\n- `window.scrollY` 하면 스크롤 얼마나 했는지 알려줌. 가로 스크롤은 `window.scrollX`\n- `window.scrollTo(x,y)`는 지정한 위치로 강제로 스크롤함. 원래는 반짝! 순간이동해야하는데 부트스트랩 쓰면 스크롤을 스무스하게 이동시키는게 자동 설정임 이거 해결하려면 css 파일 열어서 아래 코드 작성\n\n```css\n:root {\n\tscroll-behavior: auto;\n}\n```\n\n- `window.scrollBy(x,y)`는 현재 위치부터 강제로 스크롤함.\n\n\u003cbr\u003e\n\n### jQuery로 scroll 이벤트\n\n```javascript\n$(window).on('scroll', function() {\n\t$(window).scrollY ~\n})\n```\n- `$(window).scrollTop()` : jQuery 내장, 현재 스크롤바 위치 출력, scrollY랑 똑같은 기능인데 `scrollTop(숫자)` 하면 scrollTo 기능도 되는거임.\n\n\u003cbr\u003e\n\n### div 박스 스크롤바 내린 높이, 실제 높이\n\n1. div 박스는 scrollY 사용 불가능함. scrollY는 window에만 가능. 박스는 `scrollTop` 사용해야함. 실제 높이는 `셀렉터.scrollHeight` 사용\n\n2. 하지만, 스크롤을 끝까지 내려도 스크롤양과 실제높이가 같지 않을 수 있다. 이는 `scrollTop`의 특징 때문이다. 위에서부터 얼마나 스크롤바를 내렸는지 알려주기는 하지만, 전체를 내린 것은 아니기 때문이다. 현재 위치부터 내린 양을 계산하기 때문에 `눈에 보이는 div 박스 높이 + 스크롤양 = 실제높이`가 되는 것이다.\n\n3. 눈에 보이는 div 박스 높이도 css에 적힌 그 높이가 아니라 정확하게 구해보면 `clientHeight`를 사용하면 된다.\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/c5UpWw8.png\" height=\"30%\" width=\"100%\"\u003e\u003c/p\u003e\n\n```javascript\ndocument.querySelector(\".lorem\").addEventListener(\"scroll\", function () {\n\tlet 스크롤양 = document.querySelector(\".lorem\").scrollTop;\n\tlet 실제높이 = document.querySelector(\".lorem\").scrollHeight;\n\tlet 눈높이 = document.querySelector(\".lorem\").clientHeight;\n\n\tconsole.log(스크롤양, 실제높이, 눈높이);\n});\n```\n\n- `188.29 + 100 = 288?` 같이 약간 오차가 생길 수 있고 OS 마다 부정확해서 등호(`==`)를 이용하여 비교하기 보다 (끝까지 스크롤 내렸는지 비교하기 보다) **여유를 가지고 비교하는 것이 좋다.** 맨 밑에서부터 10px 정도 남기고 스크롤 했는지?처럼\n\n\u003cbr\u003e\n\n```javascript\nif (스크롤양 + 눈높이 \u003e 실제높이 - 10) {\n\talert(\"약관을 모두 읽으셨네요!\");\n}\n```\n\n- console을 찍어보면, clientHeight와 scrollHeight는 고정인데 scrollTop의 값이 변하는 것을 확인 가능. 즉, 위에 `눈에 보이는 div 박스 높이 + 스크롤양 = 실제높이`는 끝까지 내렸을 때 성립하는 공식임\n\n\u003cbr\u003e\n\n### div 박스말고 현재페이지 끝까지 스크롤 체크는?\n\n- html 문서의 그냥 html 태그의 높이를 이용하여 구한다.\n\n- 페이지의 scrollHeight는 페이지 로드가 다되고 나서야 정확해서 `\u003cbody\u003e` 끝나기 전에 넣는게 좋은 관습이다.\n\n```javascript\nwindow.addEventListener(\"scroll\", function () {\n\tlet 페이지실제높이 = document.querySelector(\"html\").scrollHeight;\n\tlet 페이지눈높이 = document.querySelector(\"html\").clientHeight;\n\tlet 페이지스크롤양 = document.querySelector(\"html\").scrollTop;\n\n\tif (페이지스크롤양 + 페이지눈높이 \u003e 페이지실제높이 - 10) {\n\t\talert(\"페이지 끝이지롱!\");\n\t}\n});\n```\n\n- `document.documentElement` 이거나 `document.querySelector('html')` 이거나 같음\n\n\u003cbr\u003e\n\n### scroll 내린 만큼 상단에 진행바 (스크롤퍼센트)\n\n- **스크롤퍼센트 = (페이지스크롤양 / (페이지실제높이 - 페이지눈높이)) * 100**\n\n```html\n\u003cdiv class=\"page_progress\"\u003e\u003c/div\u003e\n```\n\n- 고정시켜야해서 `position: fixed` 이런거 필요한데 navbar에 붙히는게 나은듯\n\n- navbar 맨위에 고정시킬 때 `position: fixed; width: 100%; z-index: 5;` 알지?\n\n```css\n.page_progress {\n\tdisplay: block;\n\tbackground-color: black;\n\twidth: 0%;\n\theight: 3px;\n\ttransition: all 0.1s;\n}\n```\n\n```javascript\nwindow.addEventListener(\"scroll\", function () {\n\tlet 페이지실제높이 = document.querySelector(\"html\").scrollHeight;\n\tlet 페이지눈높이 = document.querySelector(\"html\").clientHeight;\n\tlet 페이지스크롤양 = document.querySelector(\"html\").scrollTop;\n\tlet 스크롤퍼센트 = (페이지스크롤양 / (페이지실제높이 - 페이지눈높이)) * 100;\n\n\tthis.document.querySelector(\".page_progress\").style.width = 스크롤퍼센트 + \"%\";\n});\n```\n\n\u003cbr\u003e\n\n### scroll 다룰 때 주의점\n\n1. scroll 이벤트리스너 안의 코드는 1초에 60번 이상 실행됨\n\t- 컴퓨터에 부담을 줄 수 있어서 너무 많이 쓰면 안됨\n\n2. 바닥체크도 여러 번 중복으로 할 것\n\n\u003cbr\u003e\n\n### 결론\n\n- 페이지 스크롤 : `window.scrollY`\n- div 스크롤 : `.scrollTop`\n- div 실제높이 : `.scrollHeight`\n- div 화면높이 : `.clientHeight`\n- jQuery 페이지 스크롤 : `$(window).scrollTop()`\n\n\u003cbr\u003e\u003cbr\u003e\n\n## for 반복문, 탭기능 만들기\n\n\u003cbr\u003e\n\n### 탭기능\n\n- 탭은 위에 버튼 누르면 그에 걸맞는 div 박스 내용 보이게 하는거\n\n- 역시 탭을 만들 때도 하나하나 display: none~ block~ 하는것보다 `show`라는 클래스 하나 만들어서 탈부착하는 방식으로 만들기\n\n```html\n\u003cdiv class=\"container mt-5\"\u003e\n\t\u003cul class=\"list\"\u003e\n\t\t\u003cli class=\"tab-button\"\u003eProducts\u003c/li\u003e\n\t\t\u003cli class=\"tab-button orange\"\u003eInformation\u003c/li\u003e\n\t\t\u003cli class=\"tab-button\"\u003eShipping\u003c/li\u003e\n\t\u003c/ul\u003e\n\n\t\u003cdiv class=\"tab-content\"\u003e\n\t\t\u003cp\u003e상품설명입니다. Product\u003c/p\u003e\n\t\u003c/div\u003e\n\n\t\u003cdiv class=\"tab-content show\"\u003e\n\t\t\u003cp\u003e스펙설명입니다. Information\u003c/p\u003e\n\t\u003c/div\u003e\n\n\t\u003cdiv class=\"tab-content\"\u003e\n\t\t\u003cp\u003e배송정보입니다. Shipping\u003c/p\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\n```\n\n```css\nul.list {\n\tlist-style-type: none;\n\tmargin: 0;\n\tpadding: 0;\n\tborder-bottom: 1px solid #ccc;\n\tdisplay: flex;\n}\n\n.tab-button {\n\tpadding: 10px 20px 10px 20px;\n\tmargin-right: -1px;\n\tmargin-bottom: -1px;\n\tcolor: grey;\n\ttext-decoration: none;\n\tcursor: pointer;\n}\n\n.orange {\n\tborder-top: 2px solid orange;\n\tborder-right: 1px solid #ccc;\n\tborder-bottom: 1px solid white;\n\tborder-left: 1px solid #ccc;\n\tcolor: black;\n\tmargin-top: -2px;\n}\n\n.tab-content {\n\tdisplay: none;\n\tpadding: 10px;\n}\n\n.show {\n\tdisplay: block;\n}\n```\n\n1. tab-button 누르면 모든 버튼에서 orange 클래스 제거\n2. 누른 버튼에 orange 클래스 부착\n3. 모든 tab-content에서 show 클래스 제거\n4. 누른 버튼의 tab-content에 show 클래스 부착\n\n- 해당하는 기능을 바닐라js로 짜든, jQuery로 짜든, 반복되는 부분이 굉장히 많이 나올 것이다. 이때, **자주쓰는 셀렉터는 변수에 넣어쓰자. 셀렉터 문법은 느리다.** 그리고 여기서 필요한 것이 반복문이다.\n\n\u003cbr\u003e  \n\n### for 반복문\n\n```javascript\nfor (let i = 0; i \u003c 3; i++\u003e) {\n\t반복할 코드 ~\n}\n```\n\n\u003cbr\u003e\n\n- 탭만들기를 예제로, 반복문 이용하여 코드 짜보면\n\n```javascript\nvar 탭버튼 = $(\".tab-button\");\nvar 탭내용 = $(\".tab-content\");\n\nfor (var i = 0; i \u003c 탭버튼.length; i++) {\n\t탭버튼.eq(i).on(\"click\", function () {\n\t탭버튼.removeClass(\"orange\");\n\t탭버튼.eq(i).addClass(\"orange\");\n\t탭내용.removeClass(\"show\");\n\t탭내용.eq(i).addClass(\"show\");\n\t});\n}\n```\n\n이러면, 코드가 잘 돌아가지 않을 것이다. **var가 아닌 let을 사용하면 잘 될 것이다.**\n\n\u003cbr\u003e\n\n## var가 제대로 작동 안한 이유\n\n1. 코드를 위에서부터 한줄한줄 차례로 해석함\n\n2. for문을 만나서 내부 코드를 반복실행 하려고함\n\n3. 이벤트리스너 만남. 이벤트리스너 내부의 코드는 바로 실행되는 코드가 아니고 이벤트가 발생해야 실행되는 코드임\n\n4. **이벤트리스너 내부 코드 실행되지 않고 넘어감**\n\n5. 이 상태로 반복문 3번 실행\n\n6. 한참 뒤 사용자가 버튼 클릭 (현재 `var i = 3`인 상태)\n\n7. `var i = 3`인 상태지만, var 범위는 for문 밖에도 적용이 됨\n\n8. 그래서 `eq(i)`에 3을 대입하려고 함. 하지만, 4번 버튼은 없으니까 에러\n\n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/HBB22tW.png\" height=\"30%\" width=\"100%\"\u003e\u003c/p\u003e\n\n\u003ca href='/notes/TIL/fragment/lang/javascript/apple-js-01' target='_blank'\u003eJS 입문과 웹 개발 01\u003c/a\u003e에서에서 var와 let의 범위를 보면, **let은 block-scoped 범위**이다. 따라서, 반복문 안에서 선언한 var i는 반복문이 끝났음에도 i의 값에 영향을 끼치는 상태이지만, let은 반복문 안에서만 영향을 끼치고 밖에서는 영향을 끼치지 못해서 괜찮은 것이다. c언어에서 배웠던 상식적인 반복문 내부 변수 선언의 범위가 let인 것으로 생각하자.\n\n\u003cbr\u003e\n\n## 탭기능 함수 이용 축약\n\n- 아래의 코드를 함수로 축약해보자.\n\n```javascript\nlet 탭버튼 = $(\".tab-button\");\nlet 탭내용 = $(\".tab-content\");\n  \nfor (let i = 0; i \u003c 탭버튼.length; i++) {\n\t탭버튼.eq(i).on(\"click\", function () {\n\t\t탭버튼.removeClass(\"orange\");\n\t\t탭버튼.eq(i).addClass(\"orange\");\n\t\t탭내용.removeClass(\"show\");\n\t\t탭내용.eq(i).addClass(\"show\");\n\t});\n}\n```\n\n- 축약한 코드\n\n```javascript\nlet 탭버튼 = $(\".tab-button\");\nlet 탭내용 = $(\".tab-content\");\n\nfor (let i = 0; i \u003c 탭버튼.length; i++) {\n\t탭버튼.eq(i).on(\"click\", function () {\n\t\t탭열기();\n\t});\n} \n\nfunction 탭열기() {\n\t탭버튼.removeClass(\"orange\");\n\t탭버튼.eq(i).addClass(\"orange\");\n\t탭내용.removeClass(\"show\");\n\t탭내용.eq(i).addClass(\"show\");\n}\n```\n\n하지만, 이렇게 작성하면 함수 탭열기에 변수 i를 따로 선언한 적이 없기 때문에 코드가 제대로 돌아가지 않을 것이다. **축약할 코드에 변수가 있으면 변수를 파라미터로 바꿔야 잘 작동한다.**\n\n\u003cbr\u003e\n\n- 파라미터 넣은 코드\n\n```javascript\nlet 탭버튼 = $(\".tab-button\");\nlet 탭내용 = $(\".tab-content\");\n\nfor (let i = 0; i \u003c 탭버튼.length; i++) {\n\t탭버튼.eq(i).on(\"click\", function () {\n\t\t탭열기(i);\n\t});\n}\n\nfunction 탭열기(구멍) {\n\t탭버튼.removeClass(\"orange\");\n\t탭버튼.eq(구멍).addClass(\"orange\");\n\t탭내용.removeClass(\"show\");\n\t탭내용.eq(구멍).addClass(\"show\");\n}\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n## 이벤트 버블링\n\nlesson.html의 로그인 모달창에서 검은 배경을 눌러도 닫히도록 코드를 짜보자.\n  \n```javascript\n// 검은배경 누르면 모달창 닫기 버튼\ndocument.querySelector(\".black-bg\").addEventListener(\"click\", function () {\ndocument.querySelector(\".black-bg\").classList.remove(\"show-modal\");\n});\n```\n\n이때, 검은 배경이 아닌 그냥 모달창 아무데나 눌러도 모달창이 닫히는 것을 확인할 수 있다. 이는 이벤트 버블링 때문이다. **모든 브라우저는 이벤트 버블링이 일어난다.**\n\n- 이벤트 버블링(event bubbling) : 이벤트가 **상위 html로 퍼지는** 현상  \n\n```html\n\u003cdiv class=\"black-bg\"\u003e\n\t\u003cdiv class=\"white-bg\"\u003e\n\t\t\u003ch4\u003e로그인하세요\u003c/h4\u003e\n\t\t\u003cform action=\"./success.html\"\u003e\n\t\t\t\u003cdiv class=\"my-3\"\u003e\n\t\t\t\t\u003cinput type=\"text\" class=\"form-control\" id=\"email\" /\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\n\t\t\t\u003cdiv class=\"my-3\"\u003e\n\t\t\t\t\u003cinput type=\"password\" class=\"form-control\" id=\"pw\" /\u003e\n\t\t\t\u003c/div\u003e\n\t\t\t\n\t\t\t\u003cbutton type=\"submit\" class=\"btn btn-primary\" id=\"send\"\u003e\n\t\t\t\t전송\n\t\t\t\u003c/button\u003e\n\t\n\t\t\t\u003cbutton type=\"button\" class=\"btn btn-danger\" id=\"close\"\u003e\n\t\t\t\t닫기\n\t\t\t\u003c/button\u003e\n\t\t\u003c/form\u003e\n\t\u003c/div\u003e\n\u003c/div\u003e\n```\n\n- white-bg 클릭 시 : white-bg, black-bg 2번 클릭한거임\n\n- h4 클릭 시 : h4, white-bg, black-bg 3번 클릭한거임\n\n현재, js 코드를 `black-bg` 클릭 시 모달창이 닫히도록 코드를 짜놨다. 그러면 만약 input 태그를 클릭했다고 하면 div.my-3도 눌리고 div.white-bg도 눌리고 div.black-bg도 눌린 효과가 되어서 결국 모달창이 닫히는 것이다.\n\n\u003cbr\u003e  \n\n맨 처음 누른 요쇼가 진짜 black-bg 이면 모달창이 닫히도록 코드를 짜면 된다.\n\n\u003cbr\u003e\n\n## 유용한 이벤트관련 함수들\n\n- 콜백함수 파라미터에 `e`를 넣어보자. 그러면 사용가능한 함수들이 있다.\n\n```javascript\ndocument.querySelector(\".black-bg\").addEventListener(\"click\", function (e) {\ndocument.querySelector(\".black-bg\").classList.remove(\"show-modal\");\n});\n```\n\n- `e.target;` : 이벤트 발생한 곳 (ex. 유저가 실제로 클릭한 곳)\n\n- `e.currentTarget;` : 이벤트리스너 달린 곳 (`=this`)\n\n- `e.preventDefault();` : 이벤트 기본동작 막아줌, 이벤트 발생 안한것처럼\n\n- `e.stopPropagation();` : 내 상위요소로 이벤트 버블링 막아줌\n\n\u003cbr\u003e\n\n최종본\n\n- javascript\n\n```javascript\ndocument.querySelector(\".black-bg\").addEventListener(\"click\", function (e) {\nif (e.target == document.querySelector(\".black-bg\")) {\ndocument.querySelector(\".black-bg\").classList.remove(\"show-modal\");\n}\n});\n```\n\n- jQuery\n\njQuery는 애초에 셀렉터끼리 비교가 불가능해서 `if ( $(e.target) == $('.black-bg') )`는 안된다. `is()`를 이용하여 `if ( $(e.target).is($(\".black-bg\")) )` 이렇게 작성하자.\n\n```javascript\n$(\".black-bg\").on(\"click\", function (e) {\n\tif ($(e.target).is($(\".black-bg\"))) {\n\t\t$(\".black-bg\").removeClass(\"show-modal\");\n\t}\n});\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n### 이벤트버블링 응용\n\n- 탭기능 다르게 만들기 (이벤트리스너 1개만 사용)\n\n위에서 만들었던 탭기능은 반복문을 사용해서 이벤트리스너를 3개 사용했다. 이벤트리스너 1개를 쓸 때 마다 램 용량을 차지하기 때문에 성능적인 이점을 가지기 위하여 줄여보겠다.\n\n```html\n\u003cul class=\"list\"\u003e\n\t\u003cli class=\"tab-button\"\u003eProducts\u003c/li\u003e\n\t\u003cli class=\"tab-button orange\"\u003eInformation\u003c/li\u003e\n\t\u003cli class=\"tab-button\"\u003eShipping\u003c/li\u003e\n\u003c/ul\u003e\n```\n\n해당하는 코드의 `.list` 1개에만 이벤트리스너를 부착한다고 하자. 이벤트버블링은 항상 일어나니까 `.tab-button` 무엇을 클릭하든 `.list`를 클릭한 효과가 생긴다.\n\n```javascript\n// 이벤트리스너 1개 버전\nlet 탭버튼 = $(\".tab-button\");\nlet 탭내용 = $(\".tab-content\");\n\nfunction 탭열기(구멍) {\n\t탭버튼.removeClass(\"orange\");\n\t탭버튼.eq(구멍).addClass(\"orange\");\n\t탭내용.removeClass(\"show\");\n\t탭내용.eq(구멍).addClass(\"show\");\n} \n\n$(\".list\").on(\"click\", function (e) {\n\tif ($(e.target).is(탭버튼.eq(0))) {\n\t\t탭열기(0);\n\t}\n\n\tif ($(e.target).is(탭버튼.eq(1))) {\n\t\t탭열기(1);\n\t}\n\n\tif ($(e.target).is(탭버튼.eq(2))) {\n\t탭열기(2);\n\t}\n});\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n### Datasest\n\n- `data-자료이름=값`을 이용하여 html 태그에 몰래 정보숨기기 가능하다.\n\n- `셀렉터.dataset.자료이름`을 이용하여 숨겼던 자료 출력 가능\n\n```html\n\u003cli class=\"tab-button\" data-id=\"0\"\u003eProducts\u003c/li\u003e\n```\n\n```javascript\nconsole.log(document.querySelector('.tab-button').dataset.id)\n// 0\n```\n\n- dataset 이용하여 탭기능 코드 줄이기\n\n```html\n\u003cul class=\"list\"\u003e\n\t\u003cli class=\"tab-button\" data-id=\"0\"\u003eProducts\u003c/li\u003e\n\t\u003cli class=\"tab-button orange\" data-id=\"1\"\u003eInformation\u003c/li\u003e\n\t\u003cli class=\"tab-button\" data-id=\"2\"\u003eShipping\u003c/li\u003e\n\u003c/ul\u003e\n```\n\n```javascript\n$(\".list\").on(\"click\", function (e) {\n\t탭열기(parseInt(e.target.dataset.id));\n});\n```\n\n- 내가 누른 것에 숨겨져있는 dataset이 id인 녀석의 값을 가져오는 것을 이용","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/javascript/apple-js-03":{"title":"JS 입문과 웹 개발 03","content":"\n## Array, Object\n\n\u003cbr\u003e\n\n### Array 자료형\n\n- `let 변수 = [];` 대괄호 이용, **순서O**\n\n- 변수 하나에 여러 자료 저장하는 쉬운 방법\n\n\n```javascript\nlet car = ['소나타', 50000, 'white'];\ncar[0] = ['아반떼'];\nconsole.log(car[0]);\nconsole.log(car[1]);\n\n// 아반떼\n// 50000\n```\n\n\u003cbr\u003e  \n\n- 순서 있으니까 **정렬 가능** (숫자 -\u003e 영어 -\u003e 한글 순)\n\n```javascript\nlet car = ['소나타', 50000, 'white'];\ncar.sort();\nconsole.log(car);\n// [50000, 'white', '소나타']\n```\n\n\u003cbr\u003e  \n\n- 순서 있으니까 중간에 **자르기 가능** (**슬라이싱**)\n- `slice(n, m)` : n부터 m 전까지\n\n```javascript\nlet car = ['소나타', 50000, 'white'];\nconsole.log(car.slice(1, 3));\n// [50000, 'white'] 1부터 2까지네\n```\n\n- 자료검색도 가능, 맨앞/맨뒤에 자료추가 가능\n\n\u003cbr\u003e  \n\n### Object 자료형  \n\n- `let 변수 = {key1: value1, key2: value2};` 중괄호 이용, **순서 X**\n\n- 이름을 **key**, 자료를 **value**라고 함.\n\n- `key: value` 형태로 저장가능한 것이 장점\n\n- 실제로 object 자료형에 저장되는 자료는 value만 저장되고 key는 이름일 뿐임\n\n```javascript\nlet car2 = {name: '소나타', price: 50000};\nconsole.log(car2);\n// { name: '소나타', price: 50000 }\n\nconsole.log(car2['name']);\nconsole.log(car2.name);\n// 소나타\n// 소나타\n\ncar2.price = 60000;\nconsole.log(car2.price);\n// 60000\n```\n\n\u003cbr\u003e  \n\n### array / object 차이\n\n- Array 자료형 : 순서대로 자료 저장 가능, `순서 개념 O`, `따라서 자료간 정렬 가능`\n\n- Object 자료형 : 자료에 이름 붙혀서 저장 가능 `순서 개념 X`, `따라서 인덱싱 불가`\n\nex) 쇼핑몰 제작 시, 상품 정보들을 10개, 20개 보관해야 한다고 하자. 뭐 쓸래? \u003cbr\u003e\n\nsol) object 쓰는게 좋을 듯. 예를 들어, 가격을 꺼낸다고 하면 몇 번째에서 꺼낼래? 순서보다 prcie 이름을 기억하고 자료를 꺼내는게 편함.\n\n\u003cbr\u003e\n\n## 웹서비스 방식\n\n실제 웹서비스는 유저가 내 사이트에 접속했을 때 html 파일을 보내주는 것이 끝이다. 어떤 사람이 접속하면 나의 html 파일 보여주는 원리이다. 이때 **서버에서 유저에게 html 파일을 보내줄 때 방식이 두 가지가 있다.** html 파일을 어디에서 완성해주느냐에 따라 server-side / client-side로 나뉜다.\n\n1. **server-side rendering**\n\n**완성된 html 파일을 서버에서 보내는 방식**. 예를 들어, 쇼핑몰 상세페이지를 만든다고 하면 소나타, 50000원 이런식으로 미리 다 채워서 html 파일 만들고 보내준다. 서버가 html 파일 다 만들어야해서 서버가 귀찮다.\n\n\u003cbr\u003e\n\n2. **client-side rendering**\n\n**텅 빈 html 파일 + 데이터를 보내는 방식**. 이때 html 완성은 javascript하고 하도록 한다. 유저의 브라우저에서 js가 이리저리 일을 할 것 이다. 자동차 자리에 소나타 자료를 넣고 가격 자리에 50000원 넣고 이런식으로 클라이언트 단에서 html 파일을 완성해준다. 서버가 편하다. \u003cbr\u003e\n\nlevel3.html 실습에서 `let car2 = { name: '소나타', price: [50000, 3000, 4000]};` 여기에서 `document.querySelector('.car-price').innerHTML = car2.price[0]` 데이터를 car-price 클래스에 박아넣고 있었다. 이것이 client-side rendering을 하고 있는 거이다. 이때, **html에 데이터를 꽂는 행위를 데이터바인딩**이라고 한다. 데이터바인딩 쉽게 해주는 js 라이브러리가 바로 **jQuery, React, Vue** 등등 이다.\n\n\u003cbr\u003e\u003cbr\u003e\n\n### Select 01 : 인풋 다루기\n\n기본적으로 ,`\u003cselect\u003e` 사용법은 \u003ca href='/notes/TIL/fragment/lang/javascript/apple-js-01' target='_blank'\u003eJS 입문과 웹 개발 01\u003c/a\u003e에서 설명한 input 태그 사용법과 동일하다. input 대신 select를 사용하는 이유는, input은 자유로운 반면 **select는 선택지를 제공해줘서 데이터를 쉽게 관리**할 수 있기 때문이다.\n\n\u003cbr\u003e\n\ninput과 사용법이 비슷하기에 역시 **value**를 가져와서 처리할 수 있고 이벤트에 `input`, `change`를 사용가능하다. 아래 코드를 보면 select에 이벤트 발생 시 value를 가져와서 문자열을 비교해주고 해당하는 코드를 조작하고 있다. input 이벤트는 값에 변화가 생길 때마다, change 이벤트는 포커스를 잃을 때마다처럼 `\u003cinput\u003e` 에서 썼던 것과 동일하다.\n\n```html\n\u003cform class=\"container my-5 form-group\"\u003e\n\t\u003cp\u003e상품선택\u003c/p\u003e\n\t\n\t\u003cselect class=\"form-select mt-2\"\u003e\n\t\t\u003coption\u003e모자\u003c/option\u003e\n\t\t\u003coption\u003e셔츠\u003c/option\u003e\n\t\u003c/select\u003e\n\t\n\t\u003cselect class=\"form-select mt-2 form-hide\"\u003e\n\t\t\u003coption\u003e95\u003c/option\u003e\n\t\t\u003coption\u003e100\u003c/option\u003e\n\t\u003c/select\u003e\n\u003c/form\u003e\n```\n\n\u003cbr\u003e\n\n```javascript\ndocument.querySelectorAll('.form-select')[0].addEventListener('input', function () {\n\t// this는 여기서 이벤트리스너에 function() 썼으니까\n\t// e.currentTarget을 의미\n\n\tlet value = this.value;\n\tif (value == '셔츠') {\n\t\tdocument.querySelectorAll('.form-select')[1]\n\t\t\t\t.classList.remove('form-hide');\n\t} else {\n\t\tdocument.querySelectorAll('.form-select')[1]\n\t\t\t\t.classList.add('form-hide');\n\t}\n});\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n### Select 02 : JS로 html 생성\n\n그러나, 위와 같이 하드코딩 해놓으면 **확장성**이 떨어진다. 만약, 셔츠 사이즈에 변동이 생겨 105나 110이 생겼다. 혹은 품절이 되었다면 그때마다 html 파일 열어서 수정할 것인가? 아니지 않느냐. html을 만들어놨다가 보여주기만 하는게 아니라 자바스크립트로 html을 조작, 생성 하는식으로 만들어야한다.\n\n\u003cbr\u003e\n\n1. 자바스크립트로 html 생성법 첫번째 (정통적, 요새 잘 안씀)\n\n\t- `document.createElement('')`로 html 자료 생성\n\n\t- 생성한 태그에 `.innerHTML`로 내용 첨부\n\n\t- 클래스명 짓고 싶으면 `.classList.add('')`\n\n\t- 마지막으로 해당하는 html document 가져와서 `appendChild()`\n\n\n```javascript\nlet a = document.createElement('p');\na.innerHTML = '안녕';\na.classList.add('p_test');\ndocument.querySelector('#test').appendChild(a);\n```\n\n\u003cbr\u003e\n\n2. 자바스크립트로 html 생성법 두번째 (최근 트렌드, 리액트에서도 이런거 본듯)\n\n\t- html 문서에서 짤 때 처럼 문자열에 만들어서 넣기\n\n\t- `insertAdjacentHTML()`는 문자형 HTML 추가해주는 함수\n\n\t- `beforeend`는 안에서 맨 밑에 추가하라는 의미\n\n```javascript\nlet 템플릿 = '\u003cp\u003e안녕!!\u003c/p\u003e';\ndocument.querySelector('#test').insertAdjacentHTML('beforeend', 템플릿);\n\n//jQuery 버전\n$('#test').append(템플릿);\n```\n\n\u003cbr\u003e\n\n1번과 2번 방법 모두 기존의 html에 **추가**하는 형식이라서 맨 뒤에 추가될거임. `innerHTML`써서 그냥 내용 다 엎어버리고 그걸로 대체해도 괜찮음. 1번이 2번보다 2배 빠르지만, 1번은 코드가 길고 귀찮으니까 2번을 더 많이씀. 사실, 0.0000x초 차이라서 크게 성능 하락 없음\n\n\u003cbr\u003e\n\n```html\n\u003cform class=\"container my-5 form-group\"\u003e\n\t\u003cp\u003e상품선택\u003c/p\u003e\n\t\u003cselect class=\"form-select mt-2\"\u003e\n\t\t\u003coption\u003e모자\u003c/option\u003e\n\t\t\u003coption\u003e셔츠\u003c/option\u003e\n\t\u003c/select\u003e\n\t\u003cselect class=\"form-select mt-2 form-hide\"\u003e\n\t\t\u003coption\u003e95\u003c/option\u003e\n\t\t\u003coption\u003e100\u003c/option\u003e\n\t\u003c/select\u003e\n\u003c/form\u003e\n```\n  \n\u003cbr\u003e\n\n```javascript\ndocument.querySelectorAll('.form-select')[0].addEventListener('input', function () {\n\t// this는 여기서 이벤트리스너에 function() 썼으니까\n\t// e.currentTarget을 의미\n\tlet value = this.value;\n\n\tif (value == '셔츠') {\n\t\tdocument.querySelectorAll('.form-select')[1]\n\t\t\t\t.classList.remove('form-hide');\n\n\t\tlet 셔츠 = `\u003coption\u003e95\u003c/option\u003e\n\t\t\t\t\t\u003coption\u003e100\u003c/option\u003e`;\n\n\t\tdocument.querySelectorAll('.form-select')[1].innerHTML = 셔츠;\n\n\t} else if (value == '바지') {\n\t\tdocument.querySelectorAll('.form-select')[1]\n\t\t\t\t.classList.remove('form-hide');\n\t\t\t\t\n\t\tlet 바지 = `\u003coption\u003e28\u003c/option\u003e\n\t\t\t\t\u003coption\u003e30\u003c/option\u003e`;\n\n\t\tdocument.querySelectorAll('.form-select')[1].innerHTML = 바지;\n\n\t} else {\n\t\tdocument.querySelectorAll('.form-select')[1]\n\t\t\t\t.classList.add('form-hide');\n\t}\n});\n```\n\n이렇게 하면 HTML 파일에 하드코딩 했다기보다 JS 조작을 통해 셔츠 사이즈를 다 날려버리고 바지 선택하면 바지 사이즈가 나오게 됨. 추가로, **JS에서 html 저렇게 만들 때 문자열 기호에 넣고 하면 엔터키 치면 안내려갈거임. 백틱 키 쓰셈**\n\n\u003cbr\u003e\u003cbr\u003e\n\n### Select 03 : forEach, for in 반복문\n\n위에서 자바스크립트로 html 만들어서 html에 박는 것을 배웠다. 하지만 아직까지는 자바스크립트로 html 코드 그대로 짰으니까 여전히 하드코딩이다. 만약, 셔츠/바지 사이즈가 매일매일 달라진다면? **실제로 서버에서 데이터 가져와서 갯수만큼 option 태그 생성하도록 해보자.**\n\n- for 반복문 : `for (let i = 0; i \u003c 어쩌구; i++)`\n\n- forEach 반복문 : **Array 자료형** 뒤에 붙일 수 있는 기본 함수, 반복문 역할\n\n- for in 반복문 : **Object 자료형** 반복문 돌리고 싶을 때 사용\n\n\u003cbr\u003e\n\n\u003e [!quote] Memo\n\u003e\n\u003e array 자료형이나 object 자료형의 자료를 전부 꺼내어서 사용하고 싶을 때 forEach, for in 반복문은 매우 유용하다. \u003cbr\u003e\n\u003e array 자료형에서 기본함수 .forEach() 말고 for in 같은 반복문 for of가 있다. 단, index를 얻지 못한다는 단점 있음  \n\n\u003cbr\u003e\n\n### forEach 반복문\n \n- forEach 반복문은 **콜백함수** 써줘야 한다.\n\n- 콜백함수에 파라미터 2개까지 넣을 수 있다.\n\n- 첫번째 파라미터 : **반복문 돌 때 마다 array 안에 있던 하나하나의 데이터**\n\n- 두번째 파라미터 : **반복문 돌 때 마다 0부터 1씩 증가하는 정수**  \n\n```javascript\nlet pants = [28, 30, 32];\npants.forEach(function () {\n\tconsole.log('안녕');\n});\n// 안녕\n// 안녕\n// 안녕\n\npants.forEach(function (a, i) {\n\tconsole.log(a); // 28 30 32\n\tconsole.log(i); // 0 1 2\n});\n\nfor (let pant of pants) {\n\tconsole.log(pant); // 28 30 32\n}\n```\n\n\u003cbr\u003e\n\n```javascript\n// 서버에서 보내준 데이터라고 가정\nlet shirts = [90, 95, 100, 105];\nlet pants = [28, 30, 32, 34];\n\ndocument.querySelectorAll('.form-select')[0].addEventListener('input', function () {\n\t// this는 여기서 이벤트리스너에 function() 썼으니까\n\t// e.currentTarget을 의미\n\tlet value = this.value;\n\tlet optionSelector = document.querySelectorAll('.form-select')[1];\n\n\tif (value == '셔츠') {\n\t\toptionSelector.classList.remove('form-hide');\n\t\toptionSelector.innerHTML = '';\n\n\t\t// for 반복문\n\t\tfor (let i = 0; i \u003c shirts.length; i++) {\n\t\t\toptionSelector.insertAdjacentHTML('beforeend',\n\t\t\t`\u003coption\u003e${shirts[i]}\u003c/option\u003e`);\n\t\t}\n\t\n\t\t// forEach 반복문\n\t\tshirts.forEach(function (data) {\n\t\t\toptionSelector.insertAdjacentHTML('beforeend',\n\t\t\t\t`\u003coption\u003e${data}\u003c/option\u003e`);\n\t\t});\n\t\t\n\t\t// forEach 반복문 arrow function 사용\n\t\tshirts.forEach((data) =\u003e {\n\t\t\toptionSelector.insertAdjacentHTML('beforeend',\n\t\t\t\t`\u003coption\u003e${data}\u003c/option\u003e`);\n\t\t});\n\t}\n});\n```\n\n\u003cbr\u003e\n\n### for in 반복문\n\n- object 자료 갯수만큼 반복문 돌리고 싶으면 사용 가능\n\n- key라고 작명한 부분은 object 자료형의 key 부분\n\n- key, value 모두 출력 가능\n\n```javascript\nlet obj = {name: 'shin', age: 27};\n\nfor (let key in obj) {\n\tconsole.log('안녕');\n}\n// 안녕\n// 안녕\n\nfor (let key in obj) {\n\tconsole.log(key);\n\tconsole.log(obj[key]);\n}\n// name\n// shin\n// age\n// 27\n```\n\n\u003cbr\u003e\n\n## arrow function 맛보기\n\n- 함수 만드는 또다른 문법이 arrow function 이다.\n\n- 기본적으로 함수와 this 빼고 거의 동일한 역할을 한다.\n\n- **특히, 콜백함수 만들 때 자주 사용**\n\n- `function() {}`는 `() =\u003e {}`와 같다.\n\n- 심지어 파라미터가 1개라면 소괄호 생략하고 사용하기도 한다.\n\n`function(a) {}`는 `a =\u003e {}`와 같다.\n\n```javascript\nlet pants = [28, 30, 32];\n\npants.forEach(function (a) {\n\tconsole.log(a);\n});\n\npants.forEach((a) =\u003e {\n\tconsole.log(a);\n});\n```\n\n- 함수 표현식의 형태로 쓰는 사람도 있다.\n\n```javascript\nlet 함수1 = function () {\n\tconsole.log('안녕');\n};\n\nlet 함수2 = () =\u003e {\n\tconsole.log('안녕');\n};\n```\n\n\u003cbr\u003e\n\n함수 안에서 **this**를 사용해야할 경우 `함수`와 `화살표 함수`는 **기능적인 차이**가 존재한다.\n\n- `function()` : 함수 안에서 this를 알맞게 **재정의** 해줌\n\n- `arrow function` : 함수 안에서 this를 재정의하지 않고 **바깥에 있던 this를 그대로 사용**\n\n\u003cbr\u003e  \n\n위에서 사용했던 this를 살펴보겠다.\n\n```javascript\ndocument.querySelectorAll('.form-select')[0].addEventListener('input', function () {\n\t// this는 여기서 이벤트리스너에 function() 썼으니까\n\t// e.currentTarget을 의미\n\tlet value = this.value;\n});\n```\n\n현재 **function()** 을 썼기 때문에 함수 안에서 this가 재정의 되어서 `document.querySelectorAll('.form-select')[0].addEventListener`가 동작했을 때를 뜻하니까 `e.currentTarget`이 된다. 하지만, 만약 여기서 **화살표함수를 사용해버리면 함수 바깥의 this를 가져와서 사용하기 때문에 의도와 다르게 동작할 수 있다.** 따라서 주의가 필요하다.\n\n\u003cbr\u003e\n\n\u003e [!quote] Memo\n\u003e\n\u003e 이벤트리스너 콜백함수 안에서 this를 사용해야하면 **arrow function 사용 시에 의도와 다르게 동작할 수 있으니까** 그런데서 사용하지말고 조심해서 사용하자. \u003cbr\u003e\n\u003e 참고로, 브라우저 환경의 전역객체는 **window** node 환경의 전역객체는 **global**이다. 예시 코드에서 밖에 특별한 this가 없다면, 화살표 함수를 썼을 때 this는 window를 뜻하게 된다.\n  \n\u003cbr\u003e\u003cbr\u003e\n\n## Ajax\n\n**서버**는 데이터 보내달라고 요청하면 데이터를 보내주는 것이다. 예를 들어, 네이버 웹툰 서버라고 하면 네이버 웹툰 달라고 하면 웹툰 보내주는 것이다. 서버는 데이터를 보내주기도 하고 유저 데이터를 받아서 DB에 저장하기도 하는 역할을 한다.\n\n1. 어떤 데이터인지 : 데이터의 url\n\n\t- 예를 들어, comic.naver.com 이라는 url\n\n\t- 데이터 url은 서버 개발자가 작성한 api 문서에 따라 요청한다.\n\n2. 어떤 방법으로 데이터를 요청할건지 : get인지, post인지 정확히\n\n\t- **get은 데이터 읽을 때, post는 데이터를 보낼 때**\n\n\u003cbr\u003e\n\nQ. 특정 url로 get 요청하는 법?  \n\n- 인터넷의 주소창에 url을 입력하는 것이 일종의 get 요청하는 것이다. 즉, **주소창이 get 요청하는 곳**이라고 이해하면 된다.\n\nQ. 특정 url로 post 요청하는 법?\n\n- `\u003cform action=\"/url\" method=\"post\"\u003e\u003c/form\u003e`태그를 이용한다. 전송버튼을 누르면 서버에 post 요청 하는 것이다.\n\n\u003cbr\u003e\u003cbr\u003e\n\n### ajax의 등장\n\n단순히 get요청과 post요청하면 **브라우저가 새로고침이 된다는 것이 단점**이다. 새로고침이 매번 발생하면 불편하기 때문에 **새로고침 없이 get, post 요청할 수 있도록 ajax**가 등장하는 것이다. 예를 들어, 쇼핑몰의 경우에 상품더보기 버튼을 누르면 새로고침 없이 서버와 통신하여 새로운 상품 목록을 불러오는 것이다. \u003cbr\u003e\n\n참고로, ajax를 편하게 쓰고 싶을 때 사용하는 것이 axios 라이브러리 이다. 리액트나 뷰에서는 주로 axios 라이브러리를 사용할 것이다.\n\n\u003cbr\u003e\n\n- ajax로 get요청 하는 방법\n\n```javascript\n$.get('url~~');\n```\n\n예시로, `https://codingapple1.github.io/hello.txt`로 get요청 하면 인삿말 보내준다. 그리고, `.done()` 함수를 이용하면 get요청이 성공했을 때 콜백함수 실행시킬 수 있다.\n\n```javascript\n$.get('https://codingapple1.github.io/hello.txt').done(function (data) {\n\tconsole.log(data);\n});\n\n// '안녕하세요 반갑습니다요.'\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n- ajax로 post요청 하는 방법\n\n```javascript\n$.post('url~~', data);\n\n$.post('https://codingapple1.github.io/hello.txt', {name: 'kim'}).done(\n\tfunction (data) {\n\t\tconsole.log(data);\n\t}\n);\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n- ajax 실패시 특정 코드 실행 `.fail()`\n\n- 보통 **404 error**는 서버에 url이 없다는 오류\n\n```javascript\n$.get('https://codingapple1.github.io/hello.txt').done(function (data) {\n\tconsole.log(data);\n}).fail(function () {\n\tconsole.log('실패함');\n});\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n### 브라우저 기본 함수 fetch\n\najax말고 브라우저 기본 함수를 써서 쌩 자바스크립트로 구현할 수도 있다.\n\n```javascript\n// ajax 사용\n$.get('https://codingapple1.github.io/price.json')\n.done(function (data) {\n\tconsole.log(data.price);\n}).fail(function () {\n\tconsole.log('실패함');\n});\n\n// fetch 사용\nfetch('https://codingapple1.github.io/price.json')\n.then((res) =\u003e res.json())\n.then((data) =\u003e {\n\tconsole.log(data.price);\n}).catch((error) =\u003e {\n\tconsole.log(error);\n});\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n### JSON 자료형\n\n서버와 클라이언트는 **문자자료만 주고 받을 수 있다.** object, array를 보내고 싶으면 \"\"를 쳐서 문자처럼 만들고 보내야한다. 이렇게 **따옴표 친 object, array 자료가 바로 JSON**이라고 한다.\n\n```javascript\n// object\n{price : 5000}\n\n// JSON\n\"{\"price\" : 5000}\"\n```\n\nJSON으로 변환하면 문자형 자료라서 원하는 자료만 뽑아쓰기 힘들다. 그래서 JSON자료를 다시 object나 array로 변환해서 사용하면 뽑아쓰기 편하다. fetch를 사용할 때 `((res) =\u003e res.json())`이 응답받은 response를 json으로 변환해주는 과정이다. ajax는 자동으로 변환해주기 때문에 신경쓰지 않았다.\n\n\u003cbr\u003e\u003cbr\u003e\n\n## Array 자주 쓰는 함수\n\n\u003cbr\u003e\n\n### sort() 함수\n\n- `sort()` 함수는 **문자정렬**이다.\n\n- `sort()` 함수는 **원본을 변형**시킨다.\n\n- 문자가 아닌 숫자를 그냥 정렬하려고 하면 아래와 같이 원치 않는 결과가 나온다.\n\n```javascript\nlet 어레이 = [7, 3, 5, 2, 40];\n어레이.sort();\nconsole.log(어레이);\n\n// [2, 3, 40, 5, 7]\n```\n\n\u003cbr\u003e\n\narray **숫자 정렬**은 콜백함수를 사용하고 return 값을 따로 지정해줘야 한다. 아래와 같이 코드를 작성하면 **오름차순 숫자 정렬**이다.\n\n```javascript\nlet 어레이 = [7, 3, 5, 2, 40];\n어레이.sort(function (a, b) {\n\treturn a - b;\n});\n\nconsole.log(어레이);\n// [2, 3, 5, 7, 40]\n```\n\n\u003cbr\u003e\n\narray 안에 object가 있는 형태라면? ex) `[ {}, {}, {} ]` 그 경우 return 값이 `{} - {}`이니까 양수나 음수가 나오는 구조가 아니다. object의 value를 가져와서 비교해주고 return 해주면 되겠구나.\n\n\n```javascript\nlet 상품배열 = [\n\t{id: 0, price: 70000, title: 'Blossom Dress'},\n\t{id: 1, price: 50000, title: 'Springfield Shirt'},\n\t{id: 2, price: 60000, title: 'Black Monastery'},\n];\n\n상품배열.sort(function (a, b) {\n\treturn a.price - b.price;\n});\n\nconsole.log(상품배열);\n\n// [\n//    { id: 1, price: 50000, title: 'Springfield Shirt' },\n//    { id: 2, price: 60000, title: 'Black Monastery' },\n//    { id: 0, price: 70000, title: 'Blossom Dress' }\n// ]\n\n```\n\n\u003cbr\u003e\n\n### array 숫자 정렬 원리\n  \n1. 콜백함수의 a와 b는 array 안에 있던 자료들이다. ex) `7, 3`\n\n2. return 결과가 양수면 a를 오른쪽으로 보낸다.\n\n3. return 결과가 음수면 b를 오른쪽으로 보낸다. ex) `7 - 3 = 4` 양수니까, a가 b보다 크다는 의미이다. 따라서, a를 오른쪽으로 보낸다.\n\n\u003cbr\u003e\n\n### 문자 가나다순 정렬\n\n- 그냥 `.sort()` 사용\n\n```javascript\nlet 어레이2 = ['a', 'c', 'b'];\n어레이2.sort();\nconsole.log(어레이2);\n// ['a', 'b', 'c']\n```\n\n\u003cbr\u003e\n\n```javascript\nlet 어레이3 = ['a', 'd', 'c', 'b'];\n어레이3.sort(function (a, b) {\n\tif (a \u003e b) {\n\t\treturn 1;\n\t} else {\n\t\treturn -1;\n\t}\n});\nconsole.log(어레이3);\n```\n\n### 정렬 결론\n\n`sort()` 함수는 배열의 요소를 compareFunction에게 2개씩 반복해서 보낸 뒤, compareFunction이 반환하는 값을 기준으로 정렬한다. 보내는 요소들의 이름을 a, b라고 했을 때 기준은 아래와 같다.\n\n- `반환 값 \u003e 0` : b가 a보다 앞에 있어야 한다. **a가 우측으로 감**\n\n- `반환 값 \u003c 0` : a가 b보다 앞에 있어야 한다. **b가 우측으로 감**\n\n- `반환 값 = 0` : a와 b의 순서를 바꾸지 않는다\n\n자세한 설명은 \u003ca href='https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/sort' target='_blank'\u003e링크\u003c/a\u003e에서 참조하도록 하자.\n\n\u003cbr\u003e\u003cbr\u003e\n\n### filter() 함수\n\n- `filter()` 함수는 array 자료에서 원하는 것만 고르고 싶을 때 사용하는 함수\n\n- `filter()` 함수는 **원본을 변형시키지 않기 때문**에 결과를 변수에 저장해서 사용해야 한다.\n\n\n```javascript\nlet 어레이 = [7, 3, 5, 2, 40];\n\n// a는 array에 있던 자료들\nlet 새어레이 = 어레이.filter(function (a) {\n\treturn a \u003c 4;\n});\n\nconsole.log(어레이);\n// [7, 3, 5, 2, 40]\n\nconsole.log(새어레이);\n// [3, 2]\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n### map() 함수\n\n- `map()` 함수는 array 자료 전부 변형할 때 사용하는 함수\n\n- `map()` 함수는 **원본을 변형시키지 않기 때문**에 결과를 변수에 저장해서 사용해야 한다.\n\n```javascript\nlet 어레이 = [7, 3, 5, 2, 40];\n\n// a는 array에 있던 자료들\nlet 새어레이 = 어레이.map(function (a) {\n\treturn a * 4;\n});\n\nconsole.log(새어레이);\n// [28, 12, 20, 8, 160]\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n## DOM\n\n- DOM (Document Object Model)\n\n자바스크립트가 html을 어떻게 조작할까? 이는 DOM이 있기에 가능한데, DOM은 HTML을 파싱한 결과물이다. HTML은 단순 텍스트로 이루어진 문자열이라서 브라우저가 이해하도록 객체 자료구조로 변환시켜야 한다. document에 객체를 저장한다는 느낌이다.\n\n```html\n\u003cdiv style=\"color : red;\"\u003e안녕하세요\u003c/div\u003e\n```\n\n\u003cbr\u003e\n\n```javascript\nlet document = {\n\tdiv1 : {\n\t\tstyle : {color : 'red'};\n\t\tinnerHTML : '안녕하세요';\n\t}\n}\n```\n\n이런식으로 HTML 문서를 파싱해서 object 자료형으로 바꿔주는 것이다. (_실제 DOM의 형태가 저렇지는 않고 간단하게 설명한 것이다._) 실제로는 파싱하여 가장 최소단위인 토큰부터 토큰을 다시 노드로 바꾸는 등 복잡하다. 모던 자바스크립트 딥다이브 667페이지를 참조하자.\n\n\u003chr\u003e\n\n- script 태그 위치의 중요성\n\nHTML을 파싱하여 DOM을 생성하는 것은 위에서부터 아래로 차례로 읽어나가며 진행된다.\n\n```html\n\u003cscript\u003e\n\tdocument.getElementById('test').innerHTML = '안녕';\n\u003c/script\u003e\n\n\u003cp id=\"test\"\u003e임시글자\u003c/p\u003e\n```\n\n이 코드는 당연히 에러가 날 것이다. 위에서부터 읽어내려오며 파싱을 하고 있는데 아직 DOM에 추가하지도 않은 p 태그를 불러오려고 하니까.\n\n1. head의 script 태그\n\n2. body 마지막의 script 태그\n\n3. 외부 자바스크립트 파일\n\n\u003cbr\u003e\n\n뭔가 이상하다면 이 경우에 HTML이 파싱이 됐는지 안됐는지 잘 생각해보자. html 파일 내부의 script 태그에 자바스크립트 코드를 작성할 때는 웬만하면 body 끝에다가 작성하자. **HTML을 파싱하다가 script 태그를 만나면 HTML 파싱을 멈추고 자바스크립트 파싱을 하기 때문에, head에 작성하면 문제가 생긴다.**\n\n\u003cbr\u003e\n\n외부 자바스크립트 파일을 불러올 때 **src** 속성을 주는 이유가 바로 이때문이다. 위에서부터 차례대로 코드를 실행한다는 것은 **동기적**으로 실행하고 있다는 의미이다. HTML5 이후 추가된 script src 속성에는 `async`와 `defer`가 있다. 두 속성 다 비동기적으로 js 파일을 로드해온다. HTML을 파싱해오면서 동시에 js파일을 로드한다는 의미이다.\n\n- `\u003cscript async src=\"js파일\"\u003e\u003c/script\u003e`\n\n- HTML 파싱, js파일 로드 동시 -\u003e js파일 로드 다되면 HTML 파싱 멈추고 js 파싱, 실행\n\n- `\u003cscript defer src=\"js파일\"\u003e\u003c/script\u003e`\n\n- HTML 파싱, js파일 로드 동시 -\u003e HTML 파싱 끝나면 그때 js 파싱, 실행\n\n\u003chr\u003e\n\n코딩애플 강의에서는 자바스크립트 실행을 약간 나중으로 미루는 방법을 addEventListener 방식으로 소개했다. **이 코드는 HTML 전부 다 읽고 실행해주세요**라는 의미이다. 자바스크립트 파일을 어디에 작성하는지 위치를 내가 정할 수 없을 경우에 유용한 방법이기는 하지만, 개인적인 생각으로 잘 안쓸듯하다.\n\n```javascript\n// jQuery\n$(document).ready(function() {실행할 코드})\n\n// javascript\ndocument.addEventListener('DOMContentLoaded', function() {실행할 코드})\n```\n\n\u003cbr\u003e\n\n```html\n\u003cscript\u003e\n\tdocument.addEventListener('DOMContentLoaded', function () {\n\t\tdocument.getElementById('test').innerHTML = '안녕';\n\t});\n\u003c/script\u003e\n\n\u003cp id=\"test\"\u003e임시글자\u003c/p\u003e\n```\n\n\u003cbr\u003e\n\n**load 이벤트리스너**를 사용하면, DOM 생성뿐만 아니라 이미지, css, js파일 로드 모두 체크 가능하다.\n\n```javascript\n셀렉터로찾은이미지.addEventListener('load', function () {\n\t// 이미지 로드 완료 시 실행할 코드\n});\n```\n\n하지만, 만약 외부 자바스크립트 파일에 load를 작성해놓으면 js파일보다 이미지가 더 먼저 로드되는 경우에는 이벤트 발생 체크를 못할 것이다.\n\n\n```javascript\n// jQuery\n$(window).on('load', function () {\n\t// document 안의 이미지, js 파일 포함 전부 로드가\n\t// 되었을 경우 실행할 코드\n});\n\nwindow.addEventListener('load', function () {\n\t// document 안의 이미지, js 파일 포함 전부 로드가\n\t// 되었을 경우 실행할 코드\n});\n```\n\n이렇게 window에 붙혀도 된다.\n\n\u003cbr\u003e\u003cbr\u003e\n\n## localStorage\n\n\u003cbr\u003e\n\n쇼핑몰 장바구니 기능을 만든다고 하자. 장바구니에 물품을 담는다고 쳤을 때, 저장해야할 공간이 필요할 것이다. (현재 서버는 없다고 가정) 이때, 변수에 저장하는 것은 적합하지 않다. **변수는 브라우저 새로고침 시 초기화 되기 때문**이다. 그래서 생각한 방법이 **브라우저 안에 localStorage에 몰래 데이터를 저장하는 방법**이다.\n\n\u003cbr\u003e\n\n크롬의 개발자도구에서 Application에 가보면 Storage가 있다.\n\n- localStorage, sessionStorage\n\n- `key: value` 형태로 저장 가능\n\n- `localStorage` : 사이트 재접속해도 유지 (유저가 브라우저 청소하지 않는 이상)\n\n- `sessionStorage` : 사이트 나가면 자동 삭제\n\n- IndexedDB\n\n- 데이터가 크고 복잡할 때 구조화 시켜서 저장 시\n\n- Cookies\n\n- 유저의 인증 정보, 보통 로그인정보 저장\n\n- Cache Storage\n\n- 웹 사이트 접속했을 때 html css js 파일을 새로 다운받는 것이 아니라 하드에 몰래 저장하는 것\n\n\u003cbr\u003e\n\nlocalStorage, sessionStorage의 **용량은 약 5MB**, 그리고 array나 object 이런거는 저장 못하고 **문자/숫자만 저장 가능**하다. 문자만 5MB는 엄청난 양이다. 걱정 ㄴㄴ\n\n\u003cbr\u003e\n\n### localStorage 사용법\n\n- sessionStorage는 local만 session으로 바꿔주면 됨\n\n```javascript\n// 로컬스토리지에 데이터 저장\nlocalStorage.setItem('key', 'value');\n\n// 로컬스토리지 데이터 출력\nlocalStorage.getItem('key');\n\n// 로컬스토리지 데이터 삭제\nlocalStorage.removeItem('key');\n```\n\n\u003cbr\u003e\n\nlocalStorage에 array, object를 그냥 저장하면 깨져서 저장된다. 문자만 저장되니까.\n\n```javascript\nlocalStorage.setItem('num', [1, 2, 3]);\n// num 1, 2, 3\n// 대괄호가 사라지고 그냥 1, 2, 3만 저장된거\n```\n\n그래서 array, object 저장하고 싶으면 **JSON으로 변환해서 저장해야한다.** JSON은 문자 취급을 받기 때문이다.\n\n- `JSON.stringify()` : array/object -\u003e JSON\n\n- `JSON.parse()` : JSON -\u003e array/object\n\n```javascript\nlet arrTest = [1, 2, 3];\nlet newArrTest = JSON.stringify(arrTest);\n\nlocalStorage.setItem('num', newwArrTest);\nlet getArrTest = localStorage.getItem('num');\n\nconsole.log(JSON.parse(getArrTest));\n```\n\n\u003cbr\u003e\n\nlocalStorage에 저장된 데이터를 수정하는 함수는 없다. 따라서 아래의 과정을 수행한다.\n\n1. 자료를 꺼낸다\n\n2. 꺼낸 자료를 수정한다.\n\n3. 다시 localStorage에 수정한 자료를 넣는다.\n\n\u003cbr\u003e\n\n추가로, localStorage 내부에 값이 있나 없나 확인할 때 사용했는데 find와 findIndex 함수는 **배열**의 요소에 관한 함수이다.\n\n- `.find( (a) =\u003e {return } )`\n\n- `.findIndex( (a) =\u003e {return } )`\n\n둘다 콜백함수 써줘야하고, 나는 findIndex 함수 이용했음. findIndex 함수는 배열 내부 요소의 값에 없다면 -1을 return, 있다면 해당하는 인덱스 번호를 return\n\n```javascript\nlet outItem = JSON.parse(localStorage.getItem('cart'));\nlet outItemIndex = outItem.findIndex((a) =\u003e {\n\treturn a === storageItem;\n});\n\nif (outItemIndex === -1) {\n\toutItem.push(storageItem);\n\tlocalStorage.setItem('cart', JSON.stringify(outItem));\n\talert('장바구니에 등록되었습니다.');\n} else {\n\talert('장바구니에 이미 물품이 있습니다.');\n}\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n## scroll 애니메이션 심화\n\nLEVEL2 scroll에서는 one-way 방식을 생각했다면, 이제는 간단한 1차함수를 도입한다.\n\n```javascript\nwindow.addEventListener('scroll', function () {\n\tlet 높이 = this.window.scrollY;\n\tlet y = (-1 / 500) * 높이 + 115 / 50;\n\tlet z = (-1 / 5000) * 높이 + 565 / 500;\n\n\tthis.document.querySelectorAll('.card-box')[0].style.opacity = y;\n\tthis.document.querySelectorAll('.card-box')[0].style.transform = `scale(${z})`;\n\tconsole.log(z);\n});\n```\n\n예를 들어, 스크롤 650px ~ 1150px 구간에 opacity를 1~0으로 조정하기를 원한다고 하면, 간단한 함수 개념을 도입한다.  \n\n```javascript\ny = 650 * a + b\ny = 1150 * a + b\n\n식 2개, 미지수 2개니까 값 구할 수 있음\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n## 캐러셀 심화 (스와이프)  \n\n캐러셀을 드래그 했을 때 다음 사진으로 넘어가냐 마냐 하는 것은 마우스에 관련된 이벤트를 추가로 학습할 필요가 있다.\n\n- `mousedown` : 어떤 요소에 마우스버튼 눌렀을 때\n\n- `mouseup` : 어떤 요소에 마우스버튼 뗐을 때\n\n- `mousemove` : 어떤 요소 위에서 마우스 이동할 때\n\n\u003cbr\u003e\n\n추가적인 이벤트 관련 함수\n\n- `e.clientX` : 현재 마우스 X 좌표\n\n- `e.clientY` : 현재 마우스 Y 좌표\n\n\u003cbr\u003e\n\n모바일 관련  \n\n- `touchstart` : 터치 했을 때\n\n- `touchmove` : 터치하고 드래그 할 때\n\n- `touchend` : 터치 뗐을 때\n\n\u003cbr\u003e\n\n모바일 관련 이벤트 함수\n\n- `e.touches[0].clientX` : 손가락 여러 개 눌릴 수 있으니까 지정해줘야함\n\n- `e.changedTouches[0].clientX` : touchend에는 `touches[0]`이 아닌 `changedTouches[0]`을 해줘야 함\n\n실습 예제는 \u003ca href='/notes/TIL/fragment/lang/javascript/apple-js-02' target='_blank'\u003eJS 입문과 웹 개발 02\u003c/a\u003e를 참고하도록 하자.\n\n\u003cbr\u003e\n\n드래그가 제대로 안된다면? HTML 기본 옵션 수정\n\n- `contextmenu=\"return false\"` : 우클릭 방지\n\n- `ondragstart=\"return false\"` : 드래그 방지\n\n- `onselectstart=\"return false\"` : 선택 방지\n\n```html\n\u003cbody ondragstart=\"return false\"\u003e\u003c/body\u003e\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n## switch 문법  \n\n- switch는 if문과 비슷한 역할을 한다.\n\n- 소괄호 안에 특정 값을 넣어서 **조건 분기**를 일으키는 것이다.\n\n- 용도가 끝나면 `break`로 switch문을 빠져나간다.\n\n- 즉, break가 없다면 밑에 코드도 다 실행할 것\n\n- if는 다양한 조건식 가능하지만, switch는 변수 1개만 테스트 가능\n\n- `default`로 어떤 case에도 해당 안될 때를 지정할 수 있음\n\n```javascript\nlet 변수 = 2 + 2;\n\nswitch (변수) {\n\tcase 3:\n\t\talert('변수가 3이네요');\n\t\tbreak;\n\n\tcase 4:\n\t\talert('변수가 4이네요');\n\t\tbreak;\n\n\tdefault:\n\t\talert('아무것도 해당안됨');\n}\n```","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/javascript/javascript":{"title":"Javascript","content":"\n\u003cbr\u003e\n\n## 코딩애플 강의\n\n\u003ca href='https://codingapple.com/course/javascript-jquery-ui/' target='_blank'\u003eJavaScript 입문과 웹 UI 개발\u003c/a\u003e 강의를 정리한 내용\n\n- [JS 입문과 웹 개발 01](notes/TIL/fragment/lang/javascript/apple-js-01)\n- [JS 입문과 웹 개발 02](notes/TIL/fragment/lang/javascript/apple-js-02)\n- [JS 입문과 웹 개발 03](notes/TIL/fragment/lang/javascript/apple-js-03)\n- [JS 라이브러리](notes/TIL/fragment/lang/javascript/js-library)\n\n","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/javascript/js-library":{"title":"js-library","content":"\n\u003cbr\u003e\n\n\u003e[!note] 자바스크립트 라이브러리 \n\u003e 1. Swiper\n\u003e 2. Chart.js\n\u003e 3. Animate On Scroll\n\u003e 4. EmailJS\n\u003e 5. Lodash\n\u003e 6. React / Vue\n\u003e 7. Fullpage.js\n\n\u003cbr\u003e\n\n## Swiper\n\n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/iNFu8gs.png\" height=\"30%\" width=\"70%\"\u003e\u003c/p\u003e\n  \n부트스트랩의 캐러셀을 활용해도 괜찮지만, swiper를 이용하여 다양한 캐러셀 활용 가능. 이미지 lazy loading, 터치/드래그 가능 사실 쓸지는 의문\n\n\u003cbr\u003e\u003cbr\u003e\n\n## Chart.js (추천)\n\n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/NOd285X.png\n\" height=\"30%\" width=\"70%\"\u003e\u003c/p\u003e\n\n웹페이지에 차트 도입할 때 싸용, 관리자 페이지, 어드민 페이지에서 통계 만들 때 유용할 듯. 이건 진짜 많이 사용할 예정\n\n\u003cbr\u003e\u003cbr\u003e\n\n## Animate On Scroll (약간 추천)\n\n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/sRmQK8e.png\" height=\"30%\" width=\"70%\"\u003e\u003c/p\u003e\n\n스크롤 내리면 요소가 등장하는 애니메이션 사용할 때 좋음. \u003ca href='https://github.com/michalsnik/aos' target='_blank'\u003e깃허브 페이지\u003c/a\u003e에서 사용법 나와있음. 아래 코드 넣으면 설치 끝\n\n```html\n\u003chead\u003e\n\t\u003clink rel=\"stylesheet\" href=\"https://unpkg.com/aos@next/dist/aos.css\" /\u003e\n\u003c/head\u003e\n\n\u003cbody\u003e\n\t\u003cscript src=\"https://unpkg.com/aos@next/dist/aos.js\"\u003e\u003c/script\u003e\n\t\u003cscript\u003eAOS.init();\u003c/script\u003e\n\u003c/body\u003e\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n## EmailJS\n  \n\u003cbr\u003e\n\n서버로 이메일 전송 하지만, 서버를 빌려서 자바스크립트만으로 이메일 전송 가능하게 해주는 라이브러리. \u003ca href='https://www.emailjs.com/docs/introduction/how-does-emailjs-work/' target='_blank'\u003e링크\u003c/a\u003e에서 시키는대로 하면 되지만, 나는 서버 만들거니까 별로 사용 안할듯\n\n\u003cbr\u003e\u003cbr\u003e  \n\n## Lodash\n\narray, object, 문자, 숫자 자료 등을 편하게 다루도록 기본 함수 제공해줌. 근데 안쓸듯\n\n\u003cbr\u003e\u003cbr\u003e\n\n## React, Vue (강력 추천, 따로 공부)\n\n컴포넌트 단위처럼 페이지가 많아서 라우팅 하고 이런거 UI 재활용 자주 해야하고 페이지 새로고침 없이 필요한 부분만 렌더링 하도록 동작하는 방식인 SPA(Single Page Application)을 만들 때 유용한 자바스크립트 라이브러리\u003cbr\u003e\n\n자바스크립트 기본부터 제대로 배우고 이용하는 것을 추천\n\n\u003cbr\u003e\u003cbr\u003e\n\n## Fullpage.js\n\n웹페이지를 PPT처럼 만들어줌. 이것도 안쓸 예정","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/python/funny01":{"title":"[잔재미]입문","content":"# Python intro\n\n  \n\n\u003e Contents \u003cbr\u003e\n\n\u003e 01. python 학습의 이유\n\n\u003e 02. python 설치\n\n\u003e 03. anaconda, jupyter notebook, pycharm, vs code\n\n\u003e 04. jupyter notebook 사용 TIP\n\n  \n\n\u003cbr\u003e\n\n  \n\n## 01. Python 학습의 이유\n\n  \n\n\u003cbr\u003e\n\n  \n\nJava와 Javascript를 학습하며 프론트엔드와 백엔드 모두를 경험해보고자 언어를 학습 중인 상태였고, 코딩 테스트와 프로젝트를 대비하려고 했으나, 크롤링에 친숙하고 라이브러리의 강점을 가지며 쉬운 언어인 Python도 경험해보고 싶다는 생각을 항상 가지고만 있었다. 추가로, Web project를 진행하기 위해 백엔드 framework 학습의 필요성을 느끼고 있었다. \u003cbr\u003e\n\n  \n\n현재의 나는 개인 토이 프로젝트나 소규모 프로젝트를 희망하는 상태이다. 대표적인 후보군으로는 spring, django, flask 등이 있었는데, Java 기반 framework인 spring은 대규모 프로젝트를 하지 않는 나의 입장에서는 맞지 않다고 느꼈다. 하지만, Python 기반 framework는 django와 flask라는 선택지가 있었다. django는 extension이 기본적으로 포함되어 서비스 사용 용도에 적합하고, flask는 extension이 기본적으로 포함되어 있지 않아서, 학습에 용이하다는 검색 결과를 얻었다. \u003cbr\u003e\n\n  \n\n**따라서, flask를 학습하기로 마음 먹었고 그것을 위하여 python에 대한 학습이 필요하다고 느꼈다.**\n\n  \n\n나아가, python을 이용하여 database 학습을 하려는 계획도 세웠다. 아직 Java를 제대로 사용하지 못하는 것도 있어서, 이참에 주력 언어를 python으로 정하겠다는 결심이 섰기 때문에 기초를 탄탄히 하고자 언어의 기본 문법을 학습하고자 한다.\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 02. Python 설치\n\n  \n\n\u003cbr\u003e\n\n  \n\nPython은 고급 언어이기 때문에, 컴퓨터가 이해하도록 하기 위한 컴파일러가 필요하다. 따라서, 기본 Python을 https://www.python.org/downloads/ 에서 설치해주도록 한다. 설치하는 과정에서 PATH에 체크하여 환경 변수를 미리 추가한다. \u003cbr\u003e\n\n  \n\nPython을 사용하기 위한 여러 가지 옵션이 있다.\n\n- anaconda의 주요 툴인 jupyter notebook 활용하기\n\n- pycharm, visual studio code 같은 텍스트 에디터 활용하기\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 03. anaconda, jupyter notebook, pycharm, vs code\n\n  \n\n\u003cbr\u003e\n\n  \n\n### **anaconda - jupyter notebook**\n\n  \n\nanaconda는 파이썬 컴파일러, 주요 라이브러리, 주요 툴을 모아놓은 패키지이다. anaconda의 주요 툴 중 하나인 jupyter notebook을 활용하여 python을 사용할 수 있다.\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"img/01_python_img1.png\"\u003e\u003c/img\u003e\u003c/p\u003e\n\n  \n\njupyter notebook의 장점은 코드를 작성함과 동시에 컴파일하여 가시적으로 결과를 확인 가능하다는 점이다. 그리고 마크다운을 이용하여 필요한 메모를 즉각적으로 작성할 수 있어서 학습에 용이하다고 생각했다. 따라서, 학습하는 과정에서 jupyter notebook을 사용하기로 했다.\n\n  \n\n설치 방법은 https://www.anaconda.com/products/individual 페이지에서 다운로드하여 설치한다. 이때, python 최신 버전을 다운로드 한다. 왜냐하면, 구버전인 python 2와 신버전인 python 3는 약간의 문법적 차이가 있을 수 있다. python 2 에서는 `print len(something)`이 올바른 문법이라면 python 3 에서는 `print (len(something))`이 올바른 문법이기 때문에 최신 버전을 다운 받아서 사용하도록 하자.\n\n  \n\n\u003cbr\u003e\n\n  \n\n### **pycharm, visual studio code**\n\n  \n\npycharm 혹은 visual studio code의 extension에서 python을 설치하여 텍스트 에디터를 사용하는 방법도 있다. 언어의 학습을 위해서 강의를 들을 때는 jupyter notebook을 사용하기로 했지만, 추후에 프로젝트나 여러 작업을 진행하기 위해서는 텍스트 에디터를 이용한 python의 사용법 또한 필요하다고 생각했다.\n\n  \n\nhtml, css, javascript를 사용하면서 익숙했던 visual studio code를 사용하기로 결정했다. 위의 python 설치 과정에서 PATH 추가만 제대로 했다면, visual studio code의 extension에서 python만 추가로 설치해주면 된다.\n\n  \n\n파일의 확장명은 .py이고 윈도우에서는 터미널 창에 `python 파일이름.py` 리눅스나 mac의 경우에는 터미널 창에 `python3 파일이름.py`라고 버전을 명시해줘야 한다. 나는 wsl2를 이용하여 윈도우 환경에서 리눅스를 사용할 때도 있기 때문에 아래에서 윈도우와 wsl2의 사용 예시를 보여줬다.\n\n  \n\n\u003cp align=\"center\"\u003e\u003cimg src=\"img/01_python_img2.png\"\u003e\u003c/img\u003e\u003c/p\u003e\n\n  \n\n\u003cp align=\"center\"\u003e\u003cimg src=\"img/01_python_img3.png\"\u003e\u003c/img\u003e\u003c/p\u003e\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 04. jupyter notebook 사용 TIP\n\n  \n\n- jupyter notebook file을 python3 형태로 만든다.\n\n- 코드를 작성하고 실행할 때는 기본적으로 `shift + enter` 키를 활용한다.\n\n- 해당하는 셀을 코드 블록으로 사용하려면 `Y` 마크다운 블록으로 사용하려면 `M`을 누른다.\n\n- 해당하는 셀의 위에 새로운 블록 생성은 `a` 아래에 새로운 블록 생성은 `b`를 누른다.\n\n- 해당하는 셀을 삭제하려면 `d + d`, 복사는 `C`, 붙혀넣기는 `V`를 누른다.\n\n- 기본적인 단축키 이외에도 필요한 단축키가 있다면 그때 그때 학습하도록 한다.","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/python/funny02":{"title":"[잔재미]변수,출력","content":"# Python data, variable, print\n\n  \n\n\u003e Contents \u003cbr\u003e\n\n\u003e 01. 출력과 입력\n\n\u003e 02. 변수, 데이터 타입\n\n\u003e 03. print() 문의 옵션\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## Intro. 파이썬의 데이터구조\n\n  \n\n\u003cbr\u003e\n\n  \n\n2장부터 파이썬의 기초와 자료형에 관하여 다룰 것이다. 파이썬의 자료형에는 `숫자형, 문자열 자료형, 리스트 자료형, 튜플 자료형, 딕셔너리 자료형, 집합 자료형, 불 자료형`이 있다. 이러한 자료형, 데이터를 효율적으로 나타내기 위한 특정 데이터 타입이 있는데 이를 데이터 구조라고 한다. 대표적으로 리스트, 튜플, 딕셔너리 등이 있다.\n\n  \n\n- **데이터 구조**\n\n- 선언 + 입력\n\n- 읽기\n\n- 추가\n\n- 삭제\n\n- 수정\n\n  \n\n\u003cbr\u003e\n\n  \n\n## 01. 출력과 입력\n\n  \n\n\u003cbr\u003e\n\n  \n\n언어의 기본은 \"Hello World!\"를 출력함에 있다. Python은 대표적인 인터프리터 언어이므로, 소스 코드를 작성하면 줄마다 번역하고 실행할 수 있다. 인터프리터와 컴파일러에 관한 내용은 [jae-yoon 개발 블로그](https://jae-yoon.tistory.com/3)에 추가로 포스팅하였다. \u003cbr\u003e\u003cbr\u003e\n\n  \n\n```python\n\nprint(\"Hello World!\")\n\nprint('Hello World!')\n\nprint(1)\n\n  \n\n출력 결과 : Hello World!\n\n출력 결과 : Hello World!\n\n출력 결과 : 1\n\n```\n\n\u003cbr\u003e\n\n  \n\nC언어와 같이 문장의 끝에 `;`를 찍을 필요도 없고, 문자열은 `\"\"`든 `''`든 상관없었다. 다음은 숫자 출력에서 나누기에 관한 몇 가지 예시이다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n```python\n\nprint (15 / 7)\n\nprint (15 // 7)\n\nprint (15 % 7)\n\nprint (2 * 4)\n\nprint (2 ** 4 )\n\n  \n\n출력 결과 : 2.142857142857143\n\n출력 결과 : 2\n\n출력 결과 : 1\n\n출력 결과 : 8\n\n출력 결과 : 16\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n파이썬 에서는 `/`는 나누기, `//`는 몫, `%`는 나머지를 뜻하고 `*`는 곱하기, `**`는 제곱 수를 뜻한다. 위의 경에우는 2의 4승을 뜻하는 것이다.\n\n  \n\n**소수점 아래의 몇 번째 자리까지 표시**하는 예시를 출력하는 경우 여러가지 방법이 있는데, 그 중 세 가지 방법을 소개하겠다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n```python\n\nfloat_data_pi = 3.1415\n\nround (float_data_pi, 1)\n\n  \n\nfloat_data2_pi = 3.1415\n\nprint(\"%.1f\" % float_data2_pi)\n\n  \n\nfloat_data3_pi = 3.1415\n\nprint ( format(float_data3_pi, \".1f\") )\n\n  \n\n출력 결과 : 3.1\n\n출력 결과 : 3.1\n\n출력 결과 : 3.1\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n1. round() 함수 사용\n\n  \n\n`round(값, 자릿수)` 함수는 반올림 함수이다. 그러나, 주의해야할 것은 **파이썬에서 반올림은 반올림 하려는 수가 올림, 내림 했을 때 동일하게 차이가 나는 경우에는 짝수 값으로 반올림한다는 것이다.** 이 말은, 예를 들어 `round(0.5)`를 한다면 1이 출력되어야 하지만, 실제로는 0이 출력된다. 0.5는 0에도 0.5만큼 차이, 1에도 0.5만큼 차이가 나기 때문에 짝수인 0의 값에 맞춰지게 되는 것이다. 이를 유의하자. 그리고 40.000과 같이 표현해주고 싶은 경우에는 round 함수를 사용하면 안된다. 알아서 잘라먹고 40.0으로 표현할 것이다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n2. %.f 사용\n\n  \n\n`print(\"%.원하는자릿수f\" % 값)`\n\n  \n\n\u003cbr\u003e\n\n  \n\n3. format() 함수 사용\n\n`format(값, \".원하는자릿수f\")` 혹은 `print(\"{:.원하는자릿수f}\".format(값))`\n\n  \n\n\u003cbr\u003e\n\n  \n\n추가적인 내용은 [3장 파이썬 문자열 기본](https://github.com/Shin-Jae-Yoon/TIL/tree/master/Language/Python/lecture/03_Python_string.md) 3-8을 참조하라.\n\n  \n\n\u003cbr\u003e\n\n  \n\n파이썬에서 입력은 `input()`함수를 사용하면 된다.\n\n  \n\n```python\n\n  \n\ndata = input()\n\nprint(data)\n\n  \n\n출력 : 사용자가 입력한 값\n\n```\n\n  \n\n그런데, 여기서 주의해야할 점은 숫자 1을 입력했다고 해도 input의 타입이 문자열이기 때문에 정수로 인식하지 않는다. 따라서, 정수형 타입을 원한다면 형변환을 해줘야 한다.\n\n  \n\n```python\n\ndata1 = input()\n\ndata2 = input()\n\n  \n\nprint( data1 + data2 )\n\nprint( data1 * data2 )\n\nprint( int(data1) + int(data2))\n\n  \n\n입력 값 : 1, 2\n\n출력 결과 : 12 ( 문자열이 붙혀진 형태 )\n\n출력 결과 : Type Error ( 문자열 곱하기 문자열의 형태니까 오류)\n\n출력 결과 : 3 ( 정수형으로 형변환 되어 더해진 형태)\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 02. 변수, 데이터 타입\n\n  \n\n\u003cbr\u003e\n\n  \n\nPython에서 변수는 C, Java와 같이 먼저 변수형을 지정 안해줘도 된다. (int 같은 것을 안적어도 된다는 의미이다.) 변수에 값을 넣으면 변수형이 지정된다. 그리고 불리안 타입은 대문자를 사용해서 True, False와 같이 사용한다.\n\n  \n\n```python\n\nage = 27\n\nname = \"신재윤\"\n\nheight = 177\n\nweight = 64\n\nfoot_size = 270\n\nglass = False\n\nmarriage = False\n\n```\n\n  \n\n데이터 타입이 어떤 것인지를 확인해보려면 `print(type())`으로 확인할 수 있다.\n\n  \n\n```python\n\nage = 27\n\nname = \"신재윤\"\n\nglass = False\n\n  \n\nprint(type(age))\n\nprint(type(name))\n\nprint(type(glass))\n\n  \n\n출력 결과 : \u003cclass 'int'\u003e\n\n출력 결과 : \u003cclass 'str'\u003e\n\n출력 결과 : \u003cclass 'bool'\u003e\n\n```\n\n  \n\n정리하자면, 파이썬에서의 데이터 타입은 아래와 같다. \u003cbr\u003e\u003cbr\u003e\n\n  \n\n**Type**\n\n- 정수 : int\n\n- 부동소숫점 : float\n\n- 문자열 : str\n\n- Boolean : bool\n\n  \n\n\u003cbr\u003e\n\n  \n\n타입 검사를 하기 위한 Tip\n\n  \n\n```python\n\na = 1\n\nif (str(type(a)) == \"\u003cclass 'int'\u003e\"):\n\nprint(\"정수 타입이 맞습니다.\")\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 03. print() 문의 옵션\n\n  \n\n\u003cbr\u003e\n\n  \n\n출력문에서 사용하는 print() 함수에는 옵션을 여러 가지 설정할 수 있다.\n\n  \n\n1. sep(separation)\n\n단어 뜻 그대로 분리하여, 출력한다는 의미이다. 갈라놓을 문자를 지정할 수 있는데 이것을 `구분자`라고 한다.\n\n  \n\n- `sep=' '` 형식으로 사용\n\n- 클론 기호`' '`를 사이에 두고 값을 출력\n\n  \n\n```python\n\nprint('S','E','P', sep='@')\n\n  \n\n출력 : S@E@P\n\n```\n\n  \n\n```python\n\na, b = input().split(':')\n\nprint(a, b, sep=':')\n\n  \n\n입력 : 3:16\n\n출력 : 3:16\n\n```\n\n  \n\n- 아무것도 없는 빈(empty) 문자는 그냥 `''`\n\n- join() 함수, 반복문 섞어서도 가능\n\n```python\n\n(a, b) = input().split(\"-\")\n\nprint(a, b, sep=\"\")\n\n  \n\na = input().split(\"-\")\n\nresult = ''.join(s for s in a)\n\nprint(result)\n\n  \n\n입력 : 000907-1121112\n\n출력 : 0009071121112\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n2. end\n\n단어 뜻 그대로 마지막이라는 의미이다. 줄바꿈을 하지 않고 이어서 출력하겠다는 뜻이다.\n\n  \n\n```python\n\nprint(\"I like\", end=\" \")\n\nprint(\"money\")\n\n  \n\n출력 : I like money\n\n```\n\n  \n\n- end=' ' 사이에 무언가를 입력하면, sep와 비슷한 기능을 한다.(구분자를 사용할 수 있다) 첫번째 출력문과, 두번째 출력문 사이에 end에 넣어준 문자열이 출력된다.\n\n  \n\n```python\n\nprint(\"I like\", end=\" gold and \")\n\nprint(\"money\")\n\n  \n\n출력 : I like gold and money\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n3. format\n\nformat 함수를 이용한 print() 다루기는 [3장 문자열](https://github.com/Shin-Jae-Yoon/TIL/blob/master/Language/Python/lecture/03_Python_string.md#03-format-%ED%95%A8%EC%88%98-%EC%9D%B4%EC%9A%A9-%ED%8F%AC%EB%A7%A4%ED%8C%85) 에서 상세히 설명한다.\n\n  \n\n- `.format() 이용`\n\n  \n\n```python\n\nprint(\"{0}월{1}일 입니다.\".format(3,9))\n\n  \n\n출력 : 3월 9일 입니다.\n\n```\n\n  \n\n- `%` 이용 포맷팅 (가장 많이 사용할 듯)\n\n  \n\n```python\n\nprint(\"%s을 %d개 주세요.\" % (\"초콜렛\", 10))\n\n  \n\n출력 : 초콜렛을 10개 주세요.\n\n```\n\n  \n\n```python\n\nprint(\"%d + %d = %d\" % (1, 2, 3))\n\n  \n\n출력 : 1 + 2 = 3\n\n```","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/python/funny03":{"title":"[잔재미] String","content":"# Python string\n\n  \n\n\u003e Contents \u003cbr\u003e\n\n\u003e 01. 문자열 다루기 기본\n\n\u003e 02. 문자열 코드 이용 포매팅\n\n\u003e 03. format 함수 이용 포매팅\n\n\u003e 04. f 문자열 이용 포매팅\n\n\u003e 05. 문자열 다양한 함수들\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 01. 문자열 다루기 기본\n\n  \n\n\u003cbr\u003e\n\n  \n\npython은 문자열을 다루는데 특화된 프로그래밍 언어이다. 간결하면서 사용성은 매우 뛰어나다. 따라서, 크롤링을 공부하기에 매우 좋은 언어이다. 변수에 문자열을 지정할 때, `\"내용\"` 따옴표를 한 개씩만 넣었을 경우, 다음 줄로 넘어가면 EOF, End Of Line으로 한 줄을 넘어갔다고 오류가 발생할 수 있다. 그럴 경우, 당황하지 말고 `\"\"\"내용\"\"\"`와 같이 따옴표를 세 개씩 넣어주자. 이스케이프 문자 `\\n`을 넣어서 표현할 수도 있으나, 따옴표를 연속적으로 쓰는 것이 깔끔하니 그렇게 사용하도록 하자.\n\n  \n\n\u003cbr\u003e\n\n  \n\n```python\n\ncontext = \"South Korean director Bong Joon-ho has won the Cannes film festival's most prestigious award.\n\n  \n\nThe Palme d'Or was awarded for his film Parasite, a dark comedy thriller exploring social class dynamics.\n\n  \n\nThe festival came to a close this evening after 11 days of previews of new films and documentaries.\"\n\n  \n\nprint(context)\n\n  \n\n출력결과 : SyntaxError: EOL while scanning string literal\n\n```\n\n  \n\n```python\n\ncontext = \"\"\"South Korean director Bong Joon-ho has won the Cannes film festival's most prestigious award.\n\n  \n\nThe Palme d'Or was awarded for his film Parasite, a dark comedy thriller exploring social class dynamics.\n\n  \n\nThe festival came to a close this evening after 11 days of previews of new films and documentaries.\"\"\"\n\n  \n\nprint(context)\n\n  \n\n출력결과 : context 안의 문자열\n\n  \n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n문자열을 더하거나 곱할 수 있다. 더하는 것은 말 그대로 더하는 것이지만 곱하는 것은 문자열끼리 곱하는 것이 아닌, 반복을 의미한다.\n\n  \n\n```python\n\nstring1 = \"Hello\"\n\nstring2 = \"World\"\n\nprint(string1 + string2)\n\nprint(string1 * string2)\n\nprint(string1 * 2)\n\n  \n\n출력결과 : HelloWorld\n\n출력결과 : TypeError: can't multiply sequence by non-int of type 'str'\n\n출력결과 : HelloHello\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n문자열을 곱하는 것을 응용하면 아래와 같이 사용할 수 있다.\n\n  \n\n```python\n\nprint(\"=\" * 20)\n\nprint(\"안녕하세요. 깔끔하죠?\")\n\nprint(\"=\" * 20)\n\n  \n\n출력결과 :\n\n====================\n\n안녕하세요. 깔끔하죠?\n\n====================\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n문자열 길이를 구하는 대표적인 함수는 `len()` 함수가 있다.\n\n  \n\n```python\n\nstring = \"나는 뛰어난 주니어 개발자입니다.\"\n\nprint(len(string))\n\n  \n\n출력결과 : 18\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- **인덱스 (index)**\n\n- 인덱스는 특정 데이터를 가리키는 번호를 나타냄\n\n  \n\n|p|y|t|h|o|n|\n\n|:--:|:--:|:--:|:--:|:--:|:--:|\n\n|0|1|2|3|4|5|\n\n|-6|-5|-4|-3|-2|-1|\n\n  \n\n```python\n\nsome_string = \"python\"\n\nprint(some_string[0])\n\nprint(some_string[1])\n\nprint(some_string[-1])\n\nprint(some_string[-6])\n\n  \n\n출력결과 : p\n\n출력결과 : y\n\n출력결과 : n\n\n출력결과 : p\n\n```\n\n  \n\n- **슬라이싱 (slicing)**\n\n- 시작 인덱스 ~ 해당 인덱스 직전의 인덱스까지 출력\n\n```python\n\nsome_string = \"python\"\n\nprint(some_string[3:5])\n\nprint(some_string[1:5])\n\nprint(some_string[1:2])\n\n  \n\n출력결과 : ho\n\n출력결과 : ytho\n\n출력결과 : y\n\n```\n\n  \n\n- 슬라이싱 응용\n\n```python\n\nsome_string = \"python\"\n\nprint(some_string[:6]) # 문자열 시작 ~ 지정 인덱스 전까지\n\nprint(some_string[0:]) # 지정 인덱스 ~ 문자열 끝까지\n\nprint(some_string[:]) # 문자열 전체\n\n  \n\n출력결과 : python\n\n출력결과 : python\n\n출력결과 : python\n\n```\n\n  \n\n- 슬라이싱 이용해서 문자열 나누기\n\n```python\n\ntoday = \"20220219Sunny\"\n\nyear = today[:4]\n\nday = today[4:8]\n\nweather = today[8:]\n\n  \n\nprint(year, day, weather)\n\n  \n\n출력결과 : 2022 0219 Sunny\n\n```\n\n  \n\n- 슬라이싱 이용해서 문자열 바꾸기\u003cbr\u003e\n\n기본적으로 문자열 자료형은 그 요솟값을 바꿀 수 없는 immutable한 자료형이다. 이것이 의미하는 바는, python이라는 문자열이 있을 때, 아래와 같이 변경할 수 없다는 의미이다. 하지만, 슬라이싱 방법을 이용하면 가능하다.\n\n  \n\n```python\n\nstring = \"python\"\n\npython[1] = \"i\"\n\n  \n\nprint(string)\n\n  \n\n출력결과 : NameError: name 'python' is not defined\n\n```\n\n  \n\n```python\n\nstring = \"python\"\n\nnew_string = string[:1] + \"i\" + string[2:]\n\n  \n\nprint(new_string)\n\n  \n\n출력결과 : pithon\n\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 02. 문자열 코드 이용 포매팅\n\n  \n\n\u003cbr\u003e\n\n  \n\n|코드|설명|\n\n|:--:|:--:|\n\n|%s|문자열(string)|\n\n|%c|문자 1개(character)|\n\n|%d|정수(integer)|\n\n|%f|부동소수(floating-point)|\n\n|%o|8진수|\n\n|%x|16진수|\n\n|%%|Literal % (문자 % 자체)|\n\n  \n\n\u003cbr\u003e\n\n  \n\n1. 숫자나 문자열 직접 대입\n\n  \n\n```python\n\nstring1 = \"I eat %d bananas.\" % 3\n\nstring2 = \"I eat %s bananas.\" % \"sweet\"\n\nprint(string1)\n\nprint(string2)\n\n  \n\n출력결과 : I eat 3 bananas.\n\n출력결과 : I eat sweet bananas.\n\n```\n\n  \n\n2. 변수 대입\n\n  \n\n```python\n\nnumber = 3\n\nthree = \"3\"\n\nstring1 = \"I eat %d bananas.\" % number\n\nstring2 = \"I eat %d bananas.\" % three\n\nstring3 = \"I eat %c bananas.\" % three\n\nstring4 = \"I eat %s bananas.\" % three\n\nprint(string1)\n\nprint(string2)\n\nprint(string3)\n\nprint(string4)\n\n  \n\n출력결과 : I eat 3 bananas.\n\n출력결과 : TypeError: %d format: a number is required, not str\n\n출력결과 : I eat 3 bananas.\n\n출력결과 : I eat 3 bananas.\n\n```\n\n  \n\n3. 두 개 이상의 값 대입\n\n  \n\n```python\n\nnumber1 = 5\n\nnumber2 = 2\n\nfruit = \"bananas\"\n\n  \n\nstring = \"I bought %d %s. But, %d %s were rotten.\" % (number1, fruit, number2, fruit)\n\nprint(string)\n\n  \n\n출력결과 : I bought 5 bananas. But, 2 bananas were rotten.\n\n```\n\n  \n\n4. 포맷팅 연산자와 함께 % 문자 삽입하는 방법\n\n  \n\n```python\n\nstring1 = \"Error is %d%.\" % 98\n\nstring2 = \"Error is %d%%.\" % 98\n\nprint(string1)\n\nprint(string2)\n\n  \n\n출력결과 : ValueError: incomplete format\n\n출력결과 : Error is 98%.\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n**포맷 코드와 숫자 함께 사용하기**\n\n\u003cbr\u003e\n\n  \n\n- 정렬과 공백\n\n```python\n\nstring1 = \"%10s\" % \"hi\"\n\nstring2 = \"%-10s\" % \"hi\"\n\nprint(string1)\n\nprint(string2)\n\n  \n\n출력결과 : hi (10개의 공간에서 대입되는 값을 우측 정렬)\n\n출력결과 : hi (10개의 공간에서 대입되는 값을 좌측 정렬)\n\n```\n\n  \n\n- 소숫점 표현\n\n```python\n\nstring1 = \"%0.4f\" % 3.42134234\n\nstring2 = \"%10.4f\" % 3.42134234\n\nprint(string1)\n\nprint(string2)\n\n  \n\n출력결과 : 3.4213\n\n출력결과 : 3.4213 (숫자를 소숫점 네 번째 자리까지만 표시하고 전체 10개의 문자열 공간에서 오른쪽 정렬)\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 03. format 함수 이용 포매팅\n\n  \n\n\u003cbr\u003e\n\n  \n\n1. 숫자나 문자열 직접 대입\n\n  \n\n```python\n\nstring1 = \"I eat {0} bananas.\".format(3)\n\nstring2 = \"I eat {0} bananas.\".format(\"sweet\")\n\nprint(string1)\n\nprint(string2)\n\n  \n\n출력결과 : I eat 3 bananas.\n\n출력결과 : I eat sweet bananas.\n\n```\n\n  \n\n2. 변수 대입\n\n  \n\n```python\n\nnumber = 3\n\nthree = \"3\"\n\nstring1 = \"I eat {0} bananas.\".format(number)\n\nstring2 = \"I eat {0} bananas.\".format(three)\n\nstring3 = \"I eat {0} bananas.\".format(\"three\") # 이건 변수 대입이 아니겠지.\n\nprint(string1)\n\nprint(string2)\n\n  \n\n출력결과 : I eat 3 bananas.\n\n출력결과 : I eat 3 bananas.\n\n출력결과 : I eat three bananas.\n\n```\n\n  \n\n3. 두 개 이상의 값 대입\n\n  \n\n```python\n\nnumber1 = 5\n\nnumber2 = 2\n\nfruit = \"bananas\"\n\n  \n\nstring1 = \"I bought {0} {1}. But, {2} {3} were rotten.\".format(number1, fruit, number2, fruit)\n\nstring2 = \"I bought {2} {1}. But, {0} {3} were rotten.\".format(number1, fruit, number2, fruit)\n\nprint(string1)\n\nprint(string2)\n\n  \n\n출력결과 : I bought 5 bananas. But, 2 bananas were rotten.\n\n출력결과 : I bought 2 bananas. But, 5 bananas were rotten.\n\n```\n\n  \n\n4. 이름으로 대입\n\n  \n\n```python\n\nstring = \"I bought {number} {fruit}.\".format(number=5, fruit=\"bananas\")\n\nprint(string)\n\n  \n\n출력결과 : I bought 5 bananas.\n\n```\n\n  \n\n5. 인덱스와 이름 혼용\n\n  \n\n```python\n\nstring = \"I bought {0} {fruit}.\".format(5, fruit=\"bananas\")\n\nprint(string)\n\n  \n\n출력결과 : I bought 5 bananas.\n\n```\n\n  \n\n6. 왼쪽 정렬, 오른쪽 정렬, 가운데 정렬\n\n  \n\n```python\n\n# 문자열의 자릿수는 10으로 한 것\n\n  \n\nleft = \"{0:\u003c10}\".format(\"hi\")\n\nright = \"{0:\u003e10}\".format(\"hi\")\n\ncenter = \"{0:^10}\".format(\"hi\")\n\n  \n\nprint(left)\n\nprint(right)\n\nprint(center)\n\n  \n\n출력결과 : hi\n\n출력결과 : hi\n\n출력결과 : hi\n\n```\n\n  \n\n7. 공백 채우기, \"{0: '공백내용' '정렬방법' '자릿수'}\".format(\"문자열\")\n\n  \n\n```python\n\nstring1 = \"{0:=^10}\".format(\"hi\")\n\nstring2 = \"{0:!\u003c10}\".format(\"hi\")\n\nprint(string1)\n\nprint(string2)\n\n  \n\n출력결과 : ====hi====\n\n출력결과 : hi!!!!!!!!\n\n```\n\n  \n\n8. 소숫점 표현하기\n\n  \n\n```python\n\npi = 3.141592\n\nstring1 = \"{0:0.4f}\".format(pi)\n\nstring2 = \"{0:10.4f}\".format(pi)\n\nprint(string1)\n\nprint(string2)\n\nprint(format(3.141592, \"0.4f\"))\n\n  \n\n출력결과 : 3.1416\n\n출력결과 : 3.1416\n\n출력결과 : 3.1416\n\n```\n\n  \n\n9. `{` `}` 문자 사용하기\n\n  \n\n```python\n\nstring = \"I bought {fruit} and {{apple}}. {apple} is delicious.\".format(fruit=\"banana\", apple=\"Apple\")\n\nprint(string)\n\n  \n\n출력결과 : I bought banana and {apple}. Apple is delicious.\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 04. f 문자열 이용 포매팅\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 참고 : f 문자열 포맷팅\n\npython version 3.6부터 사용 가능한 기능\n\n  \n\n```python\n\nname = \"신재윤\"\n\nage = 27\n\nstring = f'나의 이름은 {name}입니다. 나이는 {age}입니다.'\n\n  \n\nprint(string)\n\nprint(f'나의 이름은 {name}입니다. 나이는 {age}입니다.')\n\nprint(f'나의 이름은 {name}입니다. 나이는 {age+3}입니다.')\n\n  \n\n출력결과 : 나의 이름은 신재윤입니다. 나이는 27입니다.\n\n출력결과 : 나의 이름은 신재윤입니다. 나이는 27입니다.\n\n출력결과 : 나의 이름은 신재윤입니다. 나이는 30입니다.\n\n```\n\n  \n\n- 딕셔너리 이용 f 문자열 포맷팅\n\n  \n\n```python\n\nd = {\"name\" : \"신재윤\", \"age\" : 27}\n\nprint(f\"나의 이름은 {d['name']}입니다. 나이는 {d['age']}입니다.\")\n\n  \n\n출력결과 : 나의 이름은 신재윤입니다. 나이는 27입니다.\n\n```\n\n  \n\n- f 문자열 포맷팅 이용 정렬\n\n  \n\n```python\n\n# format 함수\n\nprint(\"{0:\u003c10}\".format(\"hi\"))\n\nprint(\"{0:\u003e10}\".format(\"hi\"))\n\nprint(\"{0:^10}\".format(\"hi\"))\n\n  \n\n# f 문자열 포맷팅\n\nprint(f'{\"hi\":\u003c10}')\n\nprint(f'{\"hi\":\u003e10}')\n\nprint(f'{\"hi\":^10}')\n\n  \n\n출력결과 : hi\n\n출력결과 : hi\n\n출력결과 : hi\n\n```\n\n  \n\n- f 문자열 포맷팅 공백 채우기\n\n  \n\n```python\n\n# format 함수\n\nprint(\"{0:=\u003c10}\".format(\"hi\"))\n\nprint(\"{0:!\u003e10}\".format(\"hi\"))\n\n  \n\n# f 문자열 포맷팅\n\nprint(f'{\"hi\":=\u003c10}')\n\nprint(f'{\"hi\":!\u003e10}')\n\n  \n\n출력결과 : hi========\n\n출력결과 : !!!!!!!!hi\n\n```\n\n  \n\n- f 문자열 포맷팅 소숫점 표현하기\n\n  \n\n```python\n\npi = 3.141592\n\n  \n\n# format 함수\n\nprint(\"{0:0.4f}\".format(pi))\n\nprint(\"{0:10.4f}\".format(pi))\n\nprint(format(pi, \"0.4f\"))\n\n  \n\n# f 문자열 포맷팅\n\nprint(f'{pi:0.4f}')\n\nprint(f'{pi:10.4f}')\n\n  \n\n출력결과 : 3.1416\n\n출력결과 : 3.1416\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 05. 문자열 다양한 함수들\n\n  \n\n\u003cbr\u003e\n\n  \n\n- count()\n\n- 문자 개수 세기\n\n- find()\n\n- 문자 위치 찾기\n\n- index()\n\n- 문자 위치 찾기\n\n- join()\n\n- 문자열 삽입\n\n- upper()\n\n- 소문자를 대문자로\n\n- lower()\n\n- 대문자를 소문자로\n\n- lstrip()\n\n- 왼쪽 공백 제거\n\n- rstrip()\n\n- 오른쪽 공백 제거\n\n- strip()\n\n- 양쪽 공백 제거\n\n- replace()\n\n- 문자열 변경\n\n- split()\n\n- 문자열 나누기\n\n  \n\n\u003cbr\u003e\n\n  \n\n\u003e 주의할 것은, 함수를 사용한다 해도 문자열 자체의 내용이 바뀌는 것은 아니다. 예를 들어 replace()를 이용해서 문자열을 변경한다는 것은 `print(string).replace(\"a\", \"b\"))` 일 경우 출력하는 과정에서 `a`를 `b`로 치환해주는 개념인 것이지 string의 문자열 내용 자체가 바뀌는 것은 아니다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n**count()**\n\n```python\n\nstring = \"python\"\n\nprint(string.count('p'))\n\n  \n\n출력결과 : 1\n\n```\n\n  \n\n**find(), index()** \u003cbr\u003e\n\n`find()`는 없는 값을 찾으면 -1을 반환하지만, `index()`는 없는 값을 찾으면 오류 값을 반환한다.\n\n```python\n\nstring = \"Python is the best programming language.\"\n\nprint(string.find('t'))\n\nprint(string.find('k'))\n\nprint(string.index('t'))\n\nprint(string.index('k'))\n\n  \n\n출력결과 : 2\n\n출력결과 : -1\n\n출력결과 : 2\n\n출력결과 : ValueError: substring not found\n\n```\n\n  \n\n**join()** \u003cbr\u003e\n\n`join()`는 문자열 뿐만이 아니라 리스트나 튜플에도 사용 가능하다.\n\n```python\n\n# 문자열 사용 예시\n\nprint(\",\".join('abcd'))\n\n# 리스트 사용 예시\n\nprint(\",\".join(['a', 'b', 'c', 'd']))\n\n  \n\n출력결과 : a,b,c,d\n\n출력결과 : a,b,c,d\n\n```\n\n  \n\n**upper(), lower()**\n\n```python\n\nstring1 = \"hi\"\n\nstring2 = \"HI\"\n\nprint(string1.upper())\n\nprint(string2.lower())\n\n  \n\n출력결과 : HI\n\n출력결과 : hi\n\n```\n\n  \n\n**lstrip(), rstrip(), strip()**\n\n```python\n\nstring = \" hi \"\n\nprint(string.lstrip())\n\nprint(string.rstrip())\n\nprint(string.strip())\n\n  \n\n출력결과 : hi\n\n출력결과 : hi\n\n출력결과 : hi\n\n  \n\n#-------------------------------#\n\n  \n\nstring = \",,,hi,,,\"\n\nprint(string.strip())\n\nprint(string.strip(\",\"))\n\n  \n\n출력결과 : ,,,hi,,,\n\n출력결과 : hi\n\n```\n\n  \n\n**replace()** \u003cbr\u003e\n\n```python\n\nstring = \"Python is good programming language\"\n\nstring.replace(\"Python\", \"Java\")\n\n  \n\nprint(string.replace(\"Python\", \"Java\"))\n\nprint(string)\n\n  \n\n출력결과 : Java is good programming language\n\n출력결과 : Python is good programming language\n\n```\n\n  \n\n**split()** \u003cbr\u003e\n\n괄호 안이 공백일 경우 \"탭\", \"스페이스\", \"엔터\" 기준으로 쪼갠다.\n\n```python\n\nstring = \"Python is good programming language\"\n\nprint(string.split())\n\n  \n\n출력결과 : ['Python', 'is', 'good', 'programming', 'language']\n\n  \n\n#-------------------------------#\n\n  \n\nstring = \"a:b:c:d:e\"\n\nprint(string.split(\":\"))\n\n  \n\n출력결과 : ['a', 'b', 'c', 'd', 'e']\n\n```","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/python/funny04":{"title":"[잔재미] List","content":"# Python list\n\n  \n\n\u003e Contents \u003cbr\u003e\n\n\u003e 01. 리스트 자료형이란?\n\n\u003e 02. 리스트의 인덱싱과 슬라이싱\n\n\u003e 03. 리스트 연산하기\n\n\u003e 04. 리스트 수정, 삭제, 추가\n\n\u003e 05. 리스트 다양한 함수들\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 01. 리스트 자료형이란?\n\n  \n\n\u003cbr\u003e\n\n  \n\n데이터 구조 - 리스트(list)라고 하는데, 여기서 데이터 구조란, 연관있는 데이터를 어떻게 컴퓨터로 효율적으로 다룰 수 있을 지에 관한 것이다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 리스트\n\n- 여러 가지 관계가 있는 데이터를 하나의 변수로 다루는 방법\n\n- `[ ]`안에 `,`를 사용해서 데이터를 넣으면 된다.\n\n- 예시) `mydata = [1, 2, 'hello', 1.2]`\n\n- 각 데이터는 인덱스를 사용해서 다룰 수 있다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 리스트 선언 방법\n\n- 빈 배열을 만들 때는 `[]` 보다는 `list()`를 써주도록 하자.\n\n```python\n\na = list()\n\nb = []\n\nc = [1, 2, 3]\n\nd = ['Python', 'is', 'good']\n\ne = [1, 2, ['Python', 'is', 'good']]\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 리스트 다루기 쉬운 방법 (간략한 버전)\n\n  \n\n1. 리스트 선언\n\n```\n\n- 리스트변수 = [ ]\n\n- 리스트변수 = list()\n\n- 리스트변수 = [데이터1, 데이터2, ...]\n\n```\n\n  \n\n2. 리스트 추가\n\n```\n\n- 리스트변수.append(데이터)\n\n- 리스트변수.insert(인덱스번호, 데이터)\n\n```\n\n  \n\n3. 리스트 삭제\n\n```\n\n- 리스트변수.remove(데이터)\n\n- del 리스트변수[인덱스번호]\n\n```\n\n  \n\n4. 리스트 데이터 수정\n\n```\n\n- 리스트변수[인덱스번호] = 수정할 데이터\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 02. 리스트의 인덱싱과 슬라이싱\n\n  \n\n\u003cbr\u003e\n\n  \n\n리스트 역시 문자열과 동일하게 인덱싱과 슬라이싱을 할 수 있는데, 이를 잘 활용하여야 한다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n### 리스트의 인덱싱\n\n  \n\n\u003cbr\u003e\n\n  \n\n```python\n\na = [1, 2, 3]\n\nprint(a[0] + a[2])\n\n  \n\n출력결과 : 4\n\n```\n\n  \n\n```python\n\na = [1, 2, 3, ['a', 'b', 'c']]\n\nprint(a[0])\n\nprint(a[3])\n\nprint(a[-1])\n\n  \n\n출력결과 : 1\n\n출력결과 : ['a', 'b', 'c']\n\n출력결과 : ['a', 'b', 'c']\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 이중 리스트\n\n**C언어의 2차원 배열 느낌도 생각하자. `list[][]`**\n\n```python\n\na = [1, 2, 3, ['a', 'b', 'c']]\n\nprint(a[3][0])\n\nprint(a[-1][0])\n\n  \n\n출력결과 : a\n\n출력결과 : a\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 삼중 리스트\n\n```python\n\na = [1, 2, ['a', 'b', ['Python', 'is', 'good']]]\n\nprint(a[2][2][0])\n\n  \n\n출력결과 : Python\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n### 리스트의 슬라이싱\n\n  \n\n\u003cbr\u003e\n\n  \n\n```python\n\na = [1, 2, 3, 4, 5]\n\nb = a[:2]\n\nc = a[2:]\n\nprint(b)\n\nprint(c)\n\n  \n\n출력결과 : [1, 2]\n\n출력결과 : [3, 4, 5]\n\n```\n\n  \n\n- 중첩된 리스트 슬라이싱\n\n```python\n\na = [1, 2, 3, ['a', 'b', 'c'], 4, 5]\n\nprint(a[2:5])\n\nprint(a[3][:2])\n\n  \n\n출력결과 : [3, ['a', 'b', 'c'], 4]\n\n출력결과 : ['a', 'b']\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n### split()으로 리스트 다루기\n\n  \n\n\u003cbr\u003e\n\n  \n\n\u003e 사용자로부터 주민등록번호를 입력 받고, 사용자가 남성인지 여성인지 출력하시오. (주민등록번호 뒷자리의 시작이 1이거나 3이면 남성, 2이거나 4이면 여성이다.)\n\n  \n\n```python\n\ndata = input(\"주민등록번호를 '-' 포함해서 입력하세요. \")\n\n  \n\nif (int(data.split('-')[1][0]) == 1) or (int(data.split('-')[1][0]) == 3):\n\nprint(\"남성입니다.\")\n\nelif (int(data.split('-')[1][0]) == 2) or (int(data.split('-')[1][0]) == 4):\n\nprint(\"여성입니다.\")\n\nelse:\n\nprint(\"잘못된 주민등록번호 입니다.\")\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 03. 리스트 연산하기\n\n  \n\n\u003cbr\u003e\n\n  \n\n```python\n\na = [1, 2, 3]\n\nb = [4, 5, 6]\n\n  \n\n# 리스트 더하기\n\nprint(a + b)\n\n출력결과 : [1, 2, 3, 4, 5, 6]\n\n  \n\n# 리스트 곱하기 (반복)\n\nprint(a * 3)\n\n출력결과 : [1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n  \n\n# 리스트 길이 구하기\n\nprint(len(a))\n\n출력결과 : 3\n\n```\n\n  \n\n- 리스트 연산 오류\n\n```python\n\na = [1, 2, 3]\n\nprint(a[2] + \"hi\")\n\nprint(str(a[2]) + \"hi\")\n\n  \n\n출력결과 : TypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n출력결과 : 3hi\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 04. 리스트 수정, 삭제, 추가\n\n  \n\n\u003cbr\u003e\n\n  \n\n### 리스트 수정\n\n  \n\n\u003cbr\u003e\n\n  \n\n```python\n\nlanguage = [\"python\", \"java\", \"c++\"]\n\nlanguage[2] = \"c\"\n\nprint(language)\n\n  \n\n출력결과 : ['python', 'java', 'c']\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n### 리스트 삭제\n\n  \n\n\u003cbr\u003e\n\n  \n\n- del 함수 이용\n\n- 리스트의 인덱스를 가르켜서 내용 삭제\n\n```python\n\na = [1, 2, 3]\n\nb = [1, 2, 3, 4, 5]\n\ndel a[1]\n\ndel b[:2]\n\n  \n\nprint(a)\n\nprint(b)\n\n  \n\n출력결과 : [1, 3]\n\n출력결과 : [3, 4, 5]\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- remove 함수 이용\n\n- 리스트의 내용을 가르켜서 삭제\n\n- 첫 번째로 나오는 내용이 삭제된다.\n\n```python\n\nlocation = ['서울시', '경기도', '서울시', '부산시']\n\nlocation.remove('서울시')\n\nprint(location)\n\n  \n\n출력결과 : ['경기도', '서울시', '부산시']\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- pop 함수 이용\n\n- 리스트의 맨 마지막 요소를 뽑아오고 그 요소는 리스트에서 삭제\n\n```python\n\nlocation = ['서울시', '경기도', '서울시', '부산시']\n\nprint(location.pop())\n\nprint(location)\n\n  \n\n출력결과 : 부산시\n\n출력결과 : ['서울시', '경기도', '서울시']\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n### 리스트 추가\n\n  \n\n\u003cbr\u003e\n\n  \n\n- append 함수 이용\n\n- append 함수는 하나의 요소만 추가 가능\n\n- 리스트의 맨 마지막에 추가\n\n```python\n\na = [1, 2, 3]\n\na.append(4)\n\nprint(a)\n\n  \n\na.append([5, 6])\n\nprint(a)\n\n  \n\n출력결과 : [1, 2, 3, 4]\n\n출력결과 : [1, 2, 3, 4, [5, 6]]\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- insert 함수 이용\n\n- 지정한 인덱스에 요소 추가\n\n```python\n\na = [1, 2, 3]\n\na.insert(3, 4)\n\nprint(a)\n\n  \n\na.insert(0, 5)\n\nprint(a)\n\n  \n\n출력결과 : [1, 2, 3, 4]\n\n출력결과 : [5, 1, 2, 3, 4]\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 05. 리스트 다양한 함수들\n\n  \n\n\u003cbr\u003e\n\n  \n\n- sort()\n\n- 리스트 요소 순서대로 정렬\n\n- reverse()\n\n- 리스트 요소 역순으로 뒤집기 (순서대로 정렬하고 뒤집기 X)\n\n- index()\n\n- 리스트에 해당 값이 있으면 그 위치를 반환\n\n- find()\n\n- 리스트에 해당 값이 있으면 그 위치를 반환\n\n- count()\n\n- 리스트에 포함된 요소의 개수 세기\n\n- extend()\n\n- 리스트 확장\n\n  \n\n\u003cbr\u003e\n\n  \n\n**sort(), reverse()**\n\n```python\n\na = [2, 1, 4, 3]\n\na.sort()\n\nprint(a)\n\n  \n\nb = [2, 1, 4, 3]\n\nb.reverse()\n\nprint(b)\n\n  \n\n출력결과 : [1, 2, 3, 4]\n\n출력결과 : [3, 4, 1, 2]\n\n```\n\n```python\n\n# 만약, 역순으로 순서대로 배치하고 싶으면, sort -\u003e reverse\n\na = [1, 8, 0, 9, 14]\n\na.sort()\n\na.reverse()\n\nprint(a)\n\n  \n\n출력결과 : [14, 9, 8, 1, 0]\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n**index()**\n\n```python\n\na = [1, 2, 3, 4]\n\nprint(a.index(1))\n\nprint(a.index(3))\n\nprint(a.index(5))\n\n  \n\n출력결과 : 0\n\n출력결과 : 2\n\n출력결과 : ValueError: 5 is not in list\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n**index()와 find() 비교**\n\n- 이 둘은 비슷한 역할을 하는 것 같지만, 조금 다르다.\n\n```python\n\n# index()의 경우\n\nletters = input()\n\nvar = letters.index('n')\n\nif var \u003e= 0:\n\nprint(\"입력한 문자에 n이 있습니다.\")\n\nelse:\n\nprint(\"입력한 문자에 n이 없습니다.\")\n\n  \n\n출력결과 : n이 있으면 -\u003e 입력한 문자에 n이 있습니다.\n\n출력결과 : n이 없으면 -\u003e Value Error\n\n  \n\n# find()의 경우\n\nletters = input()\n\nvar = letters.find('n')\n\nif var \u003e= 0:\n\nprint(\"입력한 문자에 n이 있습니다.\")\n\nelse:\n\nprint(\"입력한 문자에 n이 없습니다.\")\n\n  \n\n출력결과 : n이 있으면 -\u003e 입력한 문자에 n이 있습니다.\n\n출력결과 : n이 없으면 -\u003e 입력한 문자에 n이 없습니다.\n\n```\n\n\u003cbr\u003e\n\n  \n\n사용자가 입력한 것에 n이 있다면 정상적으로 \"입력한 문자에 n이 있습니다.\"라고 출력 되지만, n이 없는 경우, `index()`는 Value Error가 출력되고 `find()`는 정상적으로 값이 출력된다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n이는, [3장 파이썬 문자열 자료형 기본 - 다양한 함수](https://github.com/Shin-Jae-Yoon/TIL/blob/master/Language/Python/lecture/03_Python_string.md#05-%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%8B%A4%EC%96%91%ED%95%9C-%ED%95%A8%EC%88%98%EB%93%A4)에 기록되어있는 내용인데, `find()`는 없는 값을 찾으면 -1을 반환하지만, `index()`는 없는 값을 찾으면 오류를 반환하기 때문이다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n**count()**\n\n```python\n\na = [1, 2, 3, 1, 1, 5]\n\nprint(a.count(1))\n\n  \n\n출력결과 : 3\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n**extend()**\n\n- 함수 안에는 리스트만 올 수 있다.\n\n- 원래의 리스트에 `()`안의 리스트를 더하는 것이다.\n\n```python\n\na = [1, 2, 3]\n\na.extend([4, 5])\n\nprint(a)\n\n  \n\n출력결과 : [1, 2, 3, 4, 5]\n\n```\n\n```python\n\na = [1, 2, 3]\n\nb = [4, 5]\n\na.extend(b)\n\nprint(a)\n\n  \n\n출력결과 : [1, 2, 3, 4, 5]\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 리스트 연산 더하기와 유사함을 알 수 있다.\n\n```python\n\na = [1, 2, 3]\n\na += [4, 5]\n\nprint(a)\n\n  \n\n출력결과 : [1, 2, 3, 4, 5]\n\n```","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/python/funny05":{"title":"[잔재미] Tuple","content":"\n# Python tuple\n\n  \n\n\u003e Contents \u003cbr\u003e\n\n\u003e 01. 튜플 자료형이란?\n\n\u003e 02. 튜플 다루기\n\n\u003e 03. 튜플 응용\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 01. 튜플 자료형이란?\n\n  \n\n\u003cbr\u003e\n\n  \n\n튜플 자료형은 리스트 자료형과 매우 유사하다. 하나의 다른 점이 있는데 그것이 리스트 자료형과 튜플 자료형을 구분한다. `튜플 자료형은 값의 변경이 불가능하다는 점이다.` 리스트는 여러 가지 함수를 이용하여 리스트의 길이를 늘렸다가 줄였다가 하면서 값을 추가, 삭제, 수정을 하였는데 튜플은 그런 것이 불가능하고, 처음 선언한 그대로 사용해야 한다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n그러면, 상황에 맞춰서 가변적으로 변하는 리스트를 사용하는 것이 편하고 좋지 않냐고 물을 수 있다. 물론, 리스트를 훨씬 많이 사용하지만, 튜플이 필요한 경우가 있다. 간단하게 말하면 리스트는 동적배열이고 가변 객체이기 때문에 튜플보다 무겁고 오버헤드가 크다. 상황에 따라 정적배열이며 불변객체인 튜플을 사용하는 것이 퍼포먼스를 높이는 데 도움을 줄 수 있다. 자세한 내용은 [jae-yoon 개발 블로그](https://jae-yoon.tistory.com/4)에 추가로 포스팅하였다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 튜플\n\n- 리스트와 유사하게, 여러 가지 관계가 있는 데이터를 하나의 변수로 다루는 방법\n\n- `( )`안에 `,`를 사용해서 데이터를 넣으면 된다.\n\n- 예시) `mydata = (1, 2, 3)`\n\n  \n\n\u003cbr\u003e\n\n  \n\n- **데이터 구조 : 튜플**\n\n- 선언 + 입력 : `변수명 = (1, 2, 3, 4)`\n\n- 읽기 : `변수명[인덱스번호]`\n\n- 추가 : 불가\n\n- 삭제 : 불가\n\n- 수정 : 불가\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 튜플 선언 방법\n\n- 빈 배열을 만들 때는 `()`를 사용하겠지만, 사실상 튜플은 사용할 일 없다.\n\n```python\n\na = tuple()\n\nb = ()\n\nc = (1,) # tuple에 값이 하나일 경우 (값,) 이렇게 콤마를 넣어야한다.\n\nd = (1, 2, 3)\n\ne = 1, 2, 3 # 괄호를 생략해도 무방, 즉, 괄호가 없는 값의 나열은 튜플로 취급한다.\n\nf = ('a', 'b', ('ab', 'cd'))\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 02. 튜플 다루기\n\n  \n\n\u003cbr\u003e\n\n  \n\n튜플도 데이터 구조이기 때문에 슬라이싱, 인덱싱 모두 가능하다.\n\n```python\n\na = (1, 2, 3, 'a', 'b')\n\nprint(a[:2])\n\n  \n\n출력결과 : (1, 2)\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n튜플끼리 더하기, 반복하는 표현인 `*`도 가능하다.\n\n```python\n\na = (1, 2, 3)\n\nb = (4, 5, 6)\n\n  \n\nprint(a + b)\n\nprint(a * 3)\n\nprint(len(a))\n\n  \n\n출력결과 : (1, 2, 3, 4, 5, 6)\n\n출력결과 : (1, 2, 3, 1, 2, 3, 1, 2, 3)\n\n출력결과 : 3\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n튜플은 리스트와 굉장히 유사하다고 했는데, 서로 간단하게 type을 변경할 수 있다.\n\n  \n\n```python\n\ndata_tuple = (1, 2, 3)\n\nprint(type(data_tuple))\n\n출력결과 : tuple\n\n  \n\ndata_list = list(data_tuple)\n\nprint(type(data_list))\n\n출력결과 : list\n\n  \n\ndata_tuple = tuple(data_list)\n\nprint(type(data_tuple))\n\n출력결과 : tuple\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 03. 튜플 응용\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 튜플을 이용한 값 변경\n\n  \n\n우리가 흔히 변수에 대입되어 있는 값을 변경할 때는 `temp`라는 임시 변수를 두고 변경하는 경우가 많았다.\n\n  \n\n```python\n\na = 1\n\nb = 2\n\n  \n\ntemp = a\n\na = b\n\nb = temp\n\n  \n\nprint(\"a의 값은 %d 입니다.\" % a)\n\nprint(\"b의 값은 %d 입니다.\" % b)\n\n  \n\n출력결과 : a의 값은 2 입니다.\n\n출력결과 : b의 값은 1 입니다.\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n하지만, 튜플 자료형을 이용하는 python에서는 이렇게도 가능하다.\n\n  \n\n```python\n\na = 1\n\nb = 2\n\na, b = b, a\n\n  \n\nprint(\"a의 값은 %d 입니다.\" % a)\n\nprint(\"b의 값은 %d 입니다.\" % b)\n\n  \n\n출력결과 : a의 값은 2 입니다.\n\n출력결과 : b의 값은 1 입니다.\n\n```\n\n  \n\n그 이유는 `a, b = b, a`라고 하면 괄호가 생략된 형태의 튜플로 이해할 수 있기 때문이다. 실제로는 `(a, b) = (b, a)`인데, 튜플 하나가 하나의 변수로 취급되면서 내부의 값이 일대일로 대응하여 b는 a로, a는 b로 대입되기 때문이다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 이를 응용하면 함수의 return 값도 튜플을 이용해 하나 이상의 값을 반환할 수 있다.\n\n  \n\n```python\n\ndef mul_return(a):\n\nb = a + 1\n\nreturn a, b\n\n  \n\nmul_return(1)\n\n출력결과 : (1, 2)\n\n```\n\n  \n\n`return a, b`는 사실상 `return (a, b)`와 동일한 것이다. `(a, b)`라는 튜플 하나를 반환하는 것이다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 추가적으로, 튜플을 가장 흔히 볼 수 있는 형태는 리스트 내부에 있는 형태이다.\n\n  \n\n```python\n\ndata = [(1, 2), (3, 4), (5, 6)]\n\n```","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/python/funny06":{"title":"[잔재미] Dictionary","content":"# Python dictionary\n\n  \n\n\u003e Contents \u003cbr\u003e\n\n\u003e 01. 딕셔너리 자료형이란?\n\n\u003e 02. 딕셔너리 다루기\n\n\u003e 03. 딕셔너리 주의사항\n\n\u003e 04. 딕셔너리 다양한 함수들\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 01. 딕셔너리 자료형이란?\n\n  \n\n\u003cbr\u003e\n\n  \n\n`{키 : 값}`의 대응 관계를 가지는 자료형이다. 연관 배열(Associative array) 또는 해시(Hash)라고도 한다. 리스트와 튜플과는 다르게 순차적이지 않고, 오직 키(Key)를 이용해 값(Value)를 얻어낸다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n**즉, 딕셔너리의 어떤 값을 찾기 위해 순차적으로 모든 키를 탐색할 필요 없이 해당하는 값의 키만 찾으면 된다는 의미이다.**\n\n  \n\n\u003cbr\u003e\n\n  \n\n- **데이터 구조 : 딕셔너리 or 사전**\n\n- 선언 + 입력 : `변수명 = {}` 또는 `dict()` , `변수명 = {키:값}`\n\n- 읽기 : `변수명[키]`\n\n- 추가 : `변수명[새로운 키] = 새로운 값`\n\n- 삭제 : `del 변수명[삭제할 키]`\n\n- 수정 : `변수명[수정할 키] = 수정할 값`\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 02. 딕셔너리 다루기\n\n  \n\n\u003cbr\u003e\n\n  \n\n딕셔너리를 다루기에 앞서 리스트, 튜플, 딕셔너리 빈 배열을 만드는 방법을 정리해보자면 아래와 같다.\n\n  \n\n```python\n\ndata_list = list() # []\n\ndata_tuple = tuple() # ()\n\ndata_dict = dict() # {}\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n딕셔너리는 리스트와 튜플과는 다르게 순서가 없다고 했다. 그 말은, 인덱스를 이용해서 값을 뽑아내는 것이 불가능하고 오직, **딕셔너리의 키를 이용해서 값을 뽑아내는 것 말고는 방법이 없다는 말이다.**\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 딕셔너리 선언과 입력\n\n```python\n\ndata_dict = {'한국' : 'KR', '일본' : 'JP', '중국' : 'CN'}\n\nprint(data_dict['한국'])\n\n출력결과 : 'KR'\n\n  \n\na = {1 : 'hi'}\n\nb = {'a' : [1, 2, 3]}\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 딕셔너리 추가\n\n```python\n\ndata_dict = {'한국' : 'KR', '일본' : 'JP', '중국' : 'CN'}\n\ndata_dict['미국'] = 'US'\n\n  \n\nprint(data_dict)\n\n출력결과 : {'한국' : 'KR', '일본' : 'JP', '중국' : 'CN', '미국' : 'US'}\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 딕셔너리 삭제\n\n```python\n\ndata_dict = {'한국' : 'KR', '일본' : 'JP', '중국' : 'CN'}\n\ndel data_dict['한국']\n\n  \n\nprint(data_dict)\n\n출력결과 : {'일본': 'JP', '중국': 'CN'}\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 딕셔너리 수정\n\n```python\n\ndata_dict = {'한국' : 'KR', '일본' : 'JP', '중국' : 'CN'}\n\ndata_dict['한국'] = 'Korea'\n\n  \n\nprint(data_dict)\n\n출력결과 : {'한국': 'Korea', '일본': 'JP', '중국': 'CN'}\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 03. 딕셔너리 응용\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 딕셔너리 주의사항\n\n  \n\n1. 키가 중복되는 경우\n\n딕셔너리 다루기에서 딕셔너리는 키(Key)를 이용해 값(Value)를 얻어낸다고 하였다. 그러면 중복된 키가 존재한다면 어떻게 될까?\n\n  \n\n키가 중복되면, 1개의 값을 제외하고 나머지 값은 무시된다. 키를 통해서 값을 얻는 딕셔너리의 특징 때문에 그러하다.\n\n  \n\n```python\n\na = {1: 'a', 1: 'b', 1: 'c'}\n\nprint(a[1])\n\n  \n\n출력결과 : c\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n2. 키로 변하는 값을 설정할 수 없다.\n\n  \n\n키(Key)는 값(Value)과는 다르게 변하지 않는 요소이다. 따라서, 리스트는 사용할 수 없지만 튜플은 사용할 수 있다. 리스트는 가변 객체이고 튜플은 불변 객체이기 때문이다.\n\n  \n\n```python\n\na = {[1, 2] : 'hi'}\n\nb = {(1, 2) : 'hi'}\n\n  \n\nprint(a)\n\nprint(b)\n\n  \n\n출력결과 : TypeError: unhashable type: 'list'\n\n출력결과 : {(1, 2): 'hi'}\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 04. 딕셔너리 다양한 함수들\n\n  \n\n\u003cbr\u003e\n\n  \n\n- keys()\n\n- 딕셔너리의 key 만을 모아서 dict_keys 객체를 반환\n\n- values()\n\n- 딕셔너리의 values 만을 모아서 dict_values 객체를 반환\n\n- items()\n\n- 딕셔너리의 keys와 values의 쌍을 튜플로 묶어서 dict_items 객체를 반환\n\n- clear()\n\n- 딕셔너리 안의 모든 요소 삭제\n\n- get()\n\n- 해당하는 key에 대응하는 value 반환\n\n- in\n\n- 해당하는 key가 딕셔너리 내부에 있는지 조사\n\n  \n\n\u003cbr\u003e\n\n  \n\n**keys()**\n\n- 파이썬 2.7 버전 까지는 keys 함수를 사용할 경우 반환 값으로 dict_keys 객체가 아닌 리스트를 반환했다. 하지만, 리스트를 반환하기 위한 과정에서 메모리 낭비가 심해 파이썬 3.0 버전 이후에는 메모리 낭비를 줄이려고 dict_keys 객체를 반환한다. \u003cbr\u003e\u003cbr\u003e 반환 값으로 리스트가 필요한 경우에는 `list(a.keys())`를 사용하면 된다.\n\n```python\n\na = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n\nprint(a.keys())\n\n  \n\n출력결과 : dict_keys([key1, key2, key3])\n\n  \n\n# type() 함수를 이용해서 봐도 리스트가 아닌 객체 타입임을 확인 가능\n\nprint(type(a.keys()))\n\n  \n\n출력결과 : \u003cclass 'dict_keys'\u003e\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 반복문을 이용해서 dict_keys 객체를 핸들링 할 수 있다. 리스트를 사용하는 것과 차이는 없지만, 리스트의 append, insert 같은 함수를 사용할 수는 없다.\n\n  \n\n```python\n\na = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n\n  \n\nfor key in a.keys():\n\nprint(key)\n\n  \n\n출력결과 :\n\nkey1\n\nkey2\n\nkey3\n\n```\n\n  \n\n- keys() 함수를 가장 많이 쓰는 형태는 아래이다.\n\n```python\n\na = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n\n  \n\nfor key in a.keys():\n\nprint(a[key])\n\n  \n\n출력결과 :\n\nvalue1\n\nvalue2\n\nvalue3\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n**values()**\n\n```python\n\na = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n\n  \n\nfor value in a.values():\n\nprint(value)\n\n  \n\n출력결과 :\n\nvalue1\n\nvalue2\n\nvalue3\n\n```\n\n  \n\n**items()**\n\n```python\n\na = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n\n  \n\nfor data in a.items():\n\nprint(data)\n\n  \n\n출력결과 :\n\n('key1', 'value1')\n\n('key2', 'value2')\n\n('key3', 'value3')\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n**clear()**\n\n```python\n\na = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n\na.clear()\n\n  \n\nprint(a)\n\n  \n\n출력결과 : {}\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n**get()**\n\n- get() 함수는 그냥 key를 이용해셔 value를 읽는 것과 동일한 역할을 한다.\n\n- 사용하는 이유는 존재하지 않는 key를 이용하여 value를 가져 오려고 할 때, 그냥 읽으면 오류를 반환하지만 `get() 함수를 이용해서 읽으면 none을 반환해준다.`\n\n  \n\n```python\n\na = {'key1' : 'value1', 'key2' : 'value2'}\n\nprint(a[key3])\n\nprint(a.get('key3'))\n\n  \n\n출력결과 : NameError: name 'key3' is not defined\n\n출력결과 : None\n\n```\n\n  \n\n- 찾는 값이 없을 경우, None이 아닌 원하는 디폴트 값을 반환하도록 할 수 있다.\n\n  \n\n```python\n\na = {'key1' : 'value1', 'key2' : 'value2'}\n\nprint(a.get('key3', '해당하는 키가 없어요.'))\n\n  \n\n출력결과 : 해당하는 키가 없어요.\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n**in()**\n\n- 해당하는 키가 딕셔너리 안에 있는 지 조사하는 것이다.\n\n```python\n\na = {'key1' : 'value1', 'key2' : 'value2'}\n\nprint('key1' in a)\n\nprint('key3' in a)\n\nprint('value1' in a)\n\n  \n\n출력결과 : True\n\n출력결과 : False\n\n출력결과 : False # key가 아닌 value를 찾으니까 false로 나온다.\n\n```","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/python/funny07":{"title":"[잔재미] Set","content":"# Python set\n\n  \n\n\u003e Contents \u003cbr\u003e\n\n\u003e 01. 집합 자료형이란?\n\n\u003e 02. 집합 다루기\n\n\u003e 03. 집합 다양한 함수들\n\n\u003e 04. 집합 응용\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 01. 집합 자료형이란?\n\n  \n\n\u003cbr\u003e\n\n  \n\n집합에 관련된 것을 쉽게 처리하기 위해 만든 자료형이다. 집합 자료형은 대표적인 특징이 두 가지가 있다.\n\n  \n\n- 중복을 허용하지 않는다.\n\n- 순서가 없다.\n\n  \n\n이 특징을 이용하여 `자료형의 중복을 제거하기 위한 필터 역할`로 사용할 수 있다. 또, 순서가 없다는 특징에서 리스트와 튜플처럼 인덱싱으로 접근할 수 없다. 딕셔너리와 비슷하다는 의미이다. 굳이 인덱싱으로 접근하고 싶다면 집합을 리스트나 튜플로 변환해서 사용하면 된다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n- **데이터 구조 : 집합**\n\n- 선언 + 입력 : `변수명 = set()`, `변수명 = {데이터1, 데이터2, ... }`, `변수명 = set(데이터1)`, `변수명 = set({데이터1, 데이터2, ... })`\n\n- 읽기 : 그냥 읽어도 되고 반복문이나 조건문 이용\n\n- 추가 : 값 1개 추가 `add()`, 값 여러 개 추가 `update()`\n\n- 삭제 : `remove()`\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 02. 집합 다루기\n\n  \n\n\u003cbr\u003e\n\n  \n\n집합을 다루기에 앞서 리스트, 튜플, 딕셔너리, 집합 빈 배열을 만드는 방법을 정리해보자면 아래와 같다.\n\n  \n\n```python\n\ndata_list = list() # []\n\ndata_tuple = tuple() # ()\n\ndata_dict = dict() # {}\n\ndata_set = set() # {}\n\n```\n\n  \n\n`{}`는 딕셔너리와 동일하기 때문에 보통 빈 집합을 만들때는 `set()`을 주로 사용한다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n집합을 선언하는 것에는 여러 방법이 있다. 그 중 `{}`를 사용하는 방법을 딕셔너리와 헷갈리지 말자. 딕셔너리는 `{ 키 : 값 }`의 대응관계를 나타내줘야 하지만, 집합은 그냥 `{데이터1, 데이터2}` 이렇게 콤마로 나열해주면 된다.\n\n  \n\n```python\n\ndata_set = set()\n\ndata_set1 = set({'data1', 'data2', 'data3'})\n\ndata_set2 = set(['data1', 'data2', 'data3'])\n\ndata_set3 = {'data1', 'data2', 'data3'}\n\n  \n\nprint(data_set)\n\nprint(data_set1)\n\nprint(data_set2)\n\nprint(data_set3)\n\n  \n\n출력결과 : set()\n\n출력결과 : {'data2', 'data3', 'data1'}\n\n출력결과 : {'data2', 'data3', 'data1'}\n\n출력결과 : {'data2', 'data3', 'data1'}\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n집합을 읽을 때 그냥 읽어도 되지만 반복문을 이용해서 하나씩 읽을 수도 있다.\n\n```python\n\n# 반복문 이용\n\nsmartphone = {'삼성', '애플', 'LG', '화웨이'}\n\n  \n\nfor data in smartphone:\n\nprint(data)\n\n  \n\n출력결과 :\n\n애플\n\n화웨이\n\nLG\n\n삼성\n\n  \n\n# 조건문 이용\n\n  \n\nif '삼성' in smartphone:\n\nprint(smartphone)\n\n  \n\n출력결과 : {'애플', '화웨이', 'LG', '삼성'}\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n1. 교집합 \u003cbr\u003e\n\n`\u0026` 혹은 `s1.intersection(s2)` 사용\n\n```python\n\nsmartphone = {'삼성', '애플', 'LG', '화웨이'}\n\ntelevision = {'샤오미', '삼성', 'LG', '소니'}\n\n  \n\n# 스마트폰, TV 둘 다 생산하는 업체\n\nprint(smartphone \u0026 television)\n\nprint(smartphone.intersection(television))\n\n  \n\n출력결과 : {'LG', '삼성'}\n\n출력결과 : {'LG', '삼성'}\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n2. 합집합 \u003cbr\u003e\n\n`|` 혹은 `s1.union(s2)` 사용\n\n```python\n\nsmartphone = {'삼성', '애플', 'LG', '화웨이'}\n\ntelevision = {'샤오미', '삼성', 'LG', '소니'}\n\n  \n\n# 스마트폰 또는 TV를 생산하는 업체\n\nprint(smartphone | television)\n\nprint(smartphone.union(television))\n\n  \n\n출력결과 : {'샤오미', '삼성', '화웨이', 'LG', '애플', '소니'}\n\n출력결과 : {'샤오미', '삼성', '화웨이', 'LG', '애플', '소니'}\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n3. 차집합 \u003cbr\u003e\n\n`-` 혹은 `s1.difference(s2)` 사용\n\n```python\n\nsmartphone = {'삼성', '애플', 'LG', '화웨이'}\n\ntelevision = {'샤오미', '삼성', 'LG', '소니'}\n\n  \n\n# 스마트폰만 생산하는 업체\n\nprint(smartphone - television)\n\nprint(smartphone.difference(television))\n\n  \n\n출력결과 : {'애플', '화웨이'}\n\n출력결과 : {'애플', '화웨이'}\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n4. 대칭차집합 \u003cbr\u003e\n\n`^` 사용, 전체에서 교집합을 뺀 것\n\n  \n\n```python\n\nsmartphone = {'삼성', '애플', 'LG', '화웨이'}\n\ntelevision = {'샤오미', '삼성', 'LG', '소니'}\n\n  \n\n# 스마트폰, TV 둘 다 생산하는 업체를 제외한 나머지\n\nprint(smartphone ^ television)\n\n  \n\n출력결과 : {'샤오미', '화웨이', '애플', '소니'}\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 03. 집합 다양한 함수들\n\n  \n\n\u003cbr\u003e\n\n  \n\n- add()\n\n- 값 1개 추가\n\n- update()\n\n- 값 여러 개 추가\n\n- remove()\n\n- 특정 값 제거\n\n- in()\n\n- 집합 내 특정 값 있는지 조사\n\n  \n\n\u003cbr\u003e\n\n  \n\n**add(), update(), remove()**\n\n```python\n\ns1 = set([1, 2, 3])\n\ns1.add(4)\n\nprint(s1)\n\n출력결과 : {1, 2, 3, 4}\n\n  \n\ns2 = set([1, 2, 3])\n\ns2.update([4, 5, 6])\n\nprint(s2)\n\n출력결과 : {1, 2, 3, 4, 5, 6}\n\n  \n\ns2.remove(5)\n\nprint(s2)\n\n출력결과 : {1, 2, 3, 4, 6}\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n**in()**\n\n```python\n\nsmartphone = {'삼성', '애플', 'LG', '화웨이'}\n\nprint('모토로라' in smartphone)\n\nprint('삼성' in smartphone)\n\n  \n\n출력결과 : False\n\n출력결과 : True\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 04. 집합 응용\n\n  \n\n\u003cbr\u003e\n\n  \n\n집합은 보통 \"`중복을 허용하지 않는다`\" 이 특성을 이용한다. 어떠한 리스트 자료형에 수백만 수천만의 데이터를 추가하다보면 중복이 발생할 수 있는데, 이 리스트를 집합으로 바꿨다가 다시 리스트로 바꾸면 중복된 데이터가 사라진다.\n\n  \n\n```python\n\nsmartphone_list = ['애플', '삼성', '화웨이', '샤오미', '소니', 'LG', '애플', '삼성', '화웨이', '샤오미', '소니', 'LG', '애플', '삼성', '화웨이', '샤오미', '소니', 'LG', '애플', '삼성', '화웨이', '샤오미', '소니', 'LG', ]\n\n  \n\ndata = set(smartphone_list)\n\nprint(data)\n\n  \n\n출력결과 : {'샤오미', '삼성', '화웨이', 'LG', '애플', '소니'}\n\n  \n\n# data를 다시 리스트로 바꿔서 사용하면 된다. list(data)\n\n```","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/python/funny08":{"title":"[잔재미] Bool","content":"# Python bool\n\n  \n\n\u003e Contents \u003cbr\u003e\n\n\u003e 01. 불 자료형이란?\n\n\u003e 02. 불 자료형 다루기\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 01. 불 자료형이란?\n\n  \n\n\u003cbr\u003e\n\n  \n\n불 자료형은 참(True)과 거짓(False)를 다루는 자료형이다.\n\n  \n\n- True : 참\n\n- False : 거짓\n\n  \n\n\u003cbr\u003e\n\n  \n\n단순히 참과 거짓을 판별하는 것 이외에도 `자료형을 참과 거짓으로 판단할 수 있다.`\n\n  \n\n- 문자열, 리스트, 튜플, 딕셔너리, 집합 등의 `값이 비어있으면 거짓, 있으면 참`\n\n- `0`은 False, `1`은 True\n\n- `None`은 False\n\n  \n\n파이썬은 모든 것을 `객체`로 다룬다. 그 중 `NoneType` 클래스의 유일한 객체인 None은 값 자체가 없거나 존재하지 않거나 등의 경우를 의미한다. None에 대한 자세한 내용은 [개발 블로그](https://jae-yoon.tistory.com/5)에 추가로 포스팅했다.\n\n  \n\n```python\n\nprint(type(None))\n\nprint(bool(None))\n\nprint(bool('None'))\n\n  \n\n출력결과 : \u003cclass 'NoneType'\u003e\n\n출력결과 : False # None은 False\n\n출력결과 : True # 이 None은 문자열 None이니까, True\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 02. 불 자료형 다루기\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 리스트 내부에 값이 있으면 참이라는 것을 이용하여 반복문에 활용한 경우\n\n```python\n\na = [1, 2, 3, 4]\n\nwhile a :\n\nprint(a.pop())\n\n  \n\n출력결과 :\n\n4\n\n3\n\n2\n\n1\n\n```\n\n  \n\n- 리스트 내부에 값이 있으면 True, 없으면 False를 이용하여 조건문에 활용한 경우\n\n```python\n\nif []:\n\nprint(\"참\")\n\nelse:\n\nprint(\"거짓\")\n\n  \n\n출력결과 : 거짓\n\n  \n  \n  \n\nif [1, 2, 3, 4]:\n\nprint(\"참\")\n\nelse:\n\nprint(\"거짓\")\n\n  \n\n출력결과 : 참\n\n```\n\n  \n\n- bool 값이 True 인지 False 인지 잘 모르겠으면 `bool()`을 사용하자\n\n```python\n\nprint(bool([1,2,3]))\n\nprint(bool([]))\n\nprint(bool(0))\n\nprint(bool(3))\n\n  \n\n출력결과 : True\n\n출력결과 : False\n\n출력결과 : False\n\n출력결과 : True\n\n```","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/python/funny09":{"title":"[잔재미] 변수심화","content":"\n# Python variable\n\n  \n\n\u003e Contents \u003cbr\u003e\n\n\u003e 01. 변수의 정확한 의미\n\n\u003e 02. 변수 다루기 응용\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 01. 변수의 정확한 의미\n\n  \n\n\u003cbr\u003e\n\n  \n\n`변수 = 값`의 형태로 계속 사용해왔다. `=(대입연산자, assignment)`는 우측의 값을 왼쪽 변수에 대입한다는 의미를 가진다. 조금 더 깊게 생각해보면, 파이썬은 모든 것을 객체로 다룬다고 했다.\n\n  \n\n\u003cbr\u003e\n\n  \n  \n\n쉽게 말해서, `우리가 지금까지 다뤄온 자료형은 객체라고 보면 된다.` 값을 생성하는 과정을 통해 자료형(객체)가 메모리에 공간을 할당받는다. 그러면 `변수가 값이 해당하는 메모리의 주소를 가리키게 된다.`\n\n  \n\n\u003cbr\u003e\n\n  \n\n**마치, C언어의 포인터와 비슷한 느낌이다.** 실제로 변수에 값이 저장되는 것이 아니라 값이 저장되어 있는 메모리의 주소를 가리킬 뿐이다. 이를 코드로 확인해보면,\n\n```python\n\na = [1, 2, 3]\n\nprint(id(a))\n\n  \n\nb = a\n\nprint(id(b))\n\n  \n\n출력결과 : 140539428263424\n\n출력결과 : 140539428263424\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\na 변수에 리스트를 저장했고, a를 b에 대입한 것의 각각 메모리 주소를 확인해보면 동일한 것을 알 수 있다. 변수는 단지 메모리의 주소를 가리키는 것이기 때문이다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n```python\n\na = [1, 2, 3]\n\nb = a\n\nprint(a is b)\n\n  \n\n출력결과 : True\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n`a is b`가 뜻하는 바는 a와 b가 동일한 가 보다는 조금 더 정확하게 `a와 b가 가리키는 객체가 동일한가?`로 이해할 수 있다. 서로 가리키는 객체가 동일하기에 True가 반환된다. 이를 증명해보면,\n\n  \n\n\u003cbr\u003e\n\n  \n\n```python\n\na = [1, 2, 3]\n\nb = a\n\n  \n\na[1] = 4\n\n  \n\nprint(a)\n\nprint(b)\n\n  \n\n출력결과 : [1, 4, 3]\n\n출력결과 : [1, 4, 3]\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\na = [1, 2, 3]인 상태를 b에 대입하고 난 이후에 a의 인덱스 값을 바꿨다. 그 이후에 b를 출력해보면 b 역시 바뀐 것을 알 수 있다. 즉, a라는 공간에 리스트를 넣어서가 아닌, `리스트 객체가 저장된 메모리의 주소를 a가 가리키기 떄문에, 또 b가 가리키기 때문에 이런 결과가 나타나는 것이다.`\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 02. 변수 다루기 응용\n\n  \n\n\u003cbr\u003e\n\n  \n\n값을 가져오면서 주소는 다르게 변수 복사도 가능하다. `즉, A라는 객체의 값을 가져오면서 새로 생성한 B라는 객체에 A의 값을 넣겠다는 의미이다.` A 객체의 값을 변경하더라도 B 객체는 애초에 다른 객체기 때문에 영향을 끼치지 않는다. 메모리 주소를 확인해봐도 주소가 다르다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n- `[:]`을 사용하는 방법\n\n  \n\n```python\n\na = [1, 2, 3]\n\nb = a[:]\n\na[1] = 4\n\n  \n\nprint(a)\n\nprint(b)\n\n  \n\n출력결과 : [1, 4, 3]\n\n출력결과 : [1, 2, 3]\n\n  \n\n# 서로 다른 메모리를 가리키는 것을 확인 가능하다.\n\n  \n\nprint(id(a))\n\nprint(id(b))\n\n  \n\n출력결과 : 140011803112896\n\n출력결과 : 140011802234432\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- `copy 모듈`을 사용하는 방법\n\n  \n\n```python\n\nfrom copy import copy\n\na = [1, 2, 3]\n\nb = copy(a)\n\n  \n\na[1] = 4\n\nprint(a)\n\nprint(b)\n\n  \n\n출력결과 : [1, 4, 3]\n\n출력결과 : [1, 2, 3]\n\n  \n\nprint(id(a))\n\nprint(id(b))\n\n  \n\n출력결과 : 139811777411136\n\n출력결과 : 139811777409472\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 리스트의 경우 `copy()` 함수 사용\n\n  \n\n```python\n\na = [1, 2, 3]\n\nb = a.copy()\n\n  \n\na[1] = 4\n\n  \n\nprint(a)\n\nprint(b)\n\n  \n\n출력결과 : [1, 4, 3]\n\n출력결과 : [1, 2, 3]\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 다른 객체를 가리키는지 확인하려면 그냥 `is` 쓰면 되기는 한다.\n\n```python\n\na = [1, 2, 3]\n\nb = a.copy()\n\nc = a\n\n  \n\nprint(b is a)\n\nprint(c is a)\n\n  \n\n출력결과 : False\n\n출력결과 : True\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 변수 만들 때 `변수 = 값` 말고도 튜플, 리스트, 여러 개 대입 등도 가능하다.\n\n```python\n\na, b = ('hello', 'world')\n\n[c, d] = ['I', 'am']\n\ne = f = 3\n\n  \n\nprint((a, b))\n\nprint([c, d])\n\nprint(e, f)\n\n  \n\n출력결과 : ('hello', 'world')\n\n출력결과 : ['I', 'am']\n\n출력결과 : 3 3\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- [튜플 다루기 응용](https://github.com/Shin-Jae-Yoon/TIL/blob/master/Language/Python/lecture/05_Python_tuple.md#03-%ED%8A%9C%ED%94%8C-%EC%9D%91%EC%9A%A9)에서 설명한 내용인데 이를 이용하여 변수를 손쉽게 바꿀 수 있다. 파이썬의 강력한 특징이다.\n\n```python\n\na = 'hello'\n\nb = 'world'\n\n  \n\na, b = b, a\n\n  \n\nprint(b, a)\n\n  \n\n출력결과 : hello world\n\n```","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/python/funny10":{"title":"[잔재미] Condition","content":"\n# Python condition\n\n  \n\n\u003e Contents \u003cbr\u003e\n\n\u003e 01. 조건문 (if문)\n\n\u003e 02. value와 data type 비교\n\n\u003e 03. 조건부 표현식 (삼항연산자)\n\n\u003e 04. 특이한 조건문\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 01. 조건문 (if문)\n\n  \n\n\u003cbr\u003e\n\n  \n\n조건문은 어떠한 조건이 주어졌을 때, 그 조건에 해당한다면 명령어를 실행, 해당하지 않는다면 다른 명령어를 실행하는 구조이다. 즉, `참과 거짓을 판단하는 문장`으로 이해해도 무방하다. 다른 언어에서 많이 배웠으니 특별한 건 없다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n```python\n\nif 조건문:\n\n수행할 문장1\n\nelif 조건문:\n\n수행할 문장2\n\n수행할 문장2-2\n\n수행할 문장2-3\n\nelse:\n\n수행할 문장3\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n파이썬의 조건문에서 주의할 점은 조건 끝에 `:` 세미 콜론을 반드시 붙이는 것과 수행할 문장을 `들여쓰기` 하는 것이다. 내가 배웠던 C나 Java처럼 `{ }`로 묶는 것이 아니라 익숙하지 않을 것이다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n들여쓰기에 관해서는 `탭(Tab)`으로 할 지 `공백(Space bar)`로 할 지는 의견이 갈린다. 나는 보통 탭을 사용하지만, 최근 파이썬 커뮤니티의 트렌드는 `공백(Space bar) 4번`을 쓰는 것을 권장한다고 한다. 그래서 나는 VScode 들여쓰기를 스페이스바 4번으로 설정해놨다.\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 02. value와 data type 비교\n\n  \n\n\u003cbr\u003e\n\n  \n\n다른 언어에서도 값(value)과 자료형(data type)을 비교하는 방법이 존재한다. 자바 스크립트의 경우 `===` 연산자를 통해 간단하게 확인할 수도 있고, 자바의 경우 `equals()`를 통해 객체의 값이 같은지 확인할 수도 있다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n파이썬에서는 **값(Value)을 비교하는 경우는 `==`를 사용**하고, **객체(Object)를 비교하는 경우는 `is`를 사용**한다. 예시를 통해 자세히 살펴보겠다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 값이 다르고, 객체도 다른 경우\n\n```python\n\na = 1\n\nb = 2\n\n  \n\nif a == b:\n\nprint(\"a와 b의 값이 동일\")\n\nelse:\n\nprint(\"a와 b의 값이 다름\")\n\n  \n\nif a is b:\n\nprint(\"a와 b의 객체 같음\")\n\nelse:\n\nprint(\"a와 b의 객체 다름\")\n\n  \n\n출력결과 : a와 b의 값이 다름\n\n출력결과 : a와 b의 객체 다름\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 값이 똑같고, 객체도 같은 경우 (1)\n\n```python\n\na = 1\n\nb = 1\n\n  \n\nif a == b:\n\nprint(\"a와 b의 값이 같음\")\n\nelse:\n\nprint(\"a와 b의 값이 다름\")\n\n  \n\nif a is b:\n\nprint(\"a와 b의 객체 같음\")\n\nelse:\n\nprint(\"a와 b의 객체 다름\")\n\n  \n\n출력결과 : a와 b의 값이 같음\n\n출력결과 : a와 b의 객체 같음\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 값이 똑같고, 객체도 같은 경우 (2)\n\n```python\n\na = [1, 2, 3]\n\nb = a\n\n  \n\nif a == b:\n\nprint(\"a와 b의 값이 같음\")\n\nelse:\n\nprint(\"a와 b의 값이 다름\")\n\n  \n\nif a is b:\n\nprint(\"a와 b의 객체 같음\")\n\nelse:\n\nprint(\"a와 b의 객체 다름\")\n\n  \n\n출력결과 : a와 b의 값이 같음\n\n출력결과 : a와 b의 객체 같음\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- **값은 같은데, 객체가 다른 경우**\n\n```python\n\na = [1, 2, 3]\n\nb = [1, 2, 3]\n\n  \n\nif a == b:\n\nprint(\"a와 b의 값이 같음\")\n\nelse:\n\nprint(\"a와 b의 값이 다름\")\n\n  \n\nif a is b:\n\nprint(\"a와 b의 객체 같음\")\n\nelse:\n\nprint(\"a와 b의 객체 다름\")\n\n  \n\n출력결과 : a와 b의 값이 같음\n\n출력결과 : a와 b의 객체 다름\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 03. 조건부 표현식 (삼항연산자)\n\n  \n\n\u003cbr\u003e\n\n  \n\n삼항연산자는 조건문이 길어지는 것을 한 문장으로 줄여서 가독성이 좋고 편의상 사용하는 것을 뜻한다. 보통 다른 언어에서는 아래와 같은 형식을 지원한다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n- `[condition] ? [true_value] : [false_value]`\n\n- 조건(condition)이 참이면 `:`의 왼쪽을 실행, 거짓이면 우측을 실행한다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n```c++\n\n#include \u003cstdio.h\u003e\n\n  \n\nint main()\n\n{\n\nint num1 = 5;\n\nint num2;\n\nnum2 = num1 ? 100 : 200;\n\n// num1이 참이면 num2에 100을 할당, 거짓이면 num2에 200을 할당\n\nprintf(\"%d\\n\", num2);\n\n// 100: num1이 5이므로 참. num2에는 100이 할당됨\n\nreturn 0;\n\n}\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n하지만, 파이썬에서는 위와 같은 형태를 지원하지 않는다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n- `[true_value] if [condition] else [false_value]`\n\n- 영어식 표현으로 조금 더 직관적으로 이해 가능하다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n```python\n\na = 10\n\nprint(\"짝수\") if a % 2 == 0 else print(\"홀수\")\n\n  \n\n출력결과 : 짝수\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n```python\n\narr = [1, 30, 20, -10, 10, 0, 24, 60, 3, -29]\n\nmin_value = arr[0]\n\nmax_value = arr[0]\n\n  \n\nfor val in arr:\n\nmin_value = val if val \u003c min_value else min_value\n\nmax_value = val if val \u003e= max_value else max_value\n\n  \n\nprint(f\"min_value : {min_value}\")\n\nprint(f\"max_value : {max_value}\")\n\n  \n\n출력결과 : min_value : -29\n\n출력결과 : max_value : 60\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n참고로, 삼항 연산자도 중첩하여 elif를 표현하는 것이 가능하기는 한데, 그냥 사용 안하는 것이 더 직관적이므로 조건이 늘어나면 그냥 if문을 사용하자.\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 04. 특이한 조건문\n\n  \n\n\u003cbr\u003e\n\n  \n\n파이썬은 문자, 리스트를 다루는 것에 강점을 가진 언어이다 보니 특이한 조건문을 지원한다. 해당하는 값이 안에 존재하면 True 없다면 False를 반환해준다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n| in | not in |\n\n| -- | -------|\n\n| x in 문자열 | x not in 문자열 |\n\n| x in 리스트 | x not in 리스트 |\n\n| x in 튜플 | x not in 튜플 |\n\n  \n\n\u003cbr\u003e\n\n  \n\n```python\n\nprint(1 in [1, 2, 3])\n\n출력결과 : True\n\n  \n\nprint(1 not in [1, 2, 3])\n\n출력결과 : False\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n```python\n\npocket = ['paper', 'cellphone', 'money']\n\nif 'money' in pocket:\n\nprint(\"택시를 타고 가라\")\n\nelse:\n\nprint(\"걸어가라\")\n\n  \n\n출력결과 : 택시를 타고 가라\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 조건문의 참과 거짓에 따라 아무것도 안하게 하려면 `pass`를 사용한다.\n\n  \n\n```python\n\npocket = ['paper', 'cellphone', 'money']\n\nif 'money' in pocket:\n\npass\n\nelse:\n\nprint(\"돈이 없으면 카드를 내야지\")\n\n  \n\n출력결과 :\n\n```","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/python/funny11":{"title":"[잔재미] for문","content":"\n# Python for\n\n  \n\n\u003e Contents \u003cbr\u003e\n\n\u003e 01. for문 기본 구조\n\n\u003e 02. for문과 range 함수\n\n\u003e 03. 리스트 안에 for문 넣기 (리스트 내포)\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 01. for문 기본 구조\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 리스트, 튜플, 문자열 이용\n\n```python\n\nfor 변수 in (리스트, 튜플, 문자열):\n\n실행문1\n\n실행문2\n\n...\n\n```\n\n  \n\n- range() 이용\n\n```python\n\nfor 변수 in range(정수):\n\nprint(변수)\n\n```\n\n  \n\n가장 기본적인 두 가지 구조이다. range()이용은 아래에서 다루도록 하고 다양한 예시를 통하는 것이 이해가 빨라서 여러 가지 예시를 들겠다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 리스트\n\n  \n\n```python\n\ntest_list = ['one', 'two', 'three']\n\n  \n\nfor i in test_list:\n\nprint(i)\n\n  \n\n[출력]\n\none\n\ntwo\n\nthree\n\n```\n\n  \n\n- 튜플 응용\n\n  \n\n```python\n\na = [(1,2), (3,4), (5,6)]\n\nfor (first, last) in a:\n\nprint(first + last)\n\n  \n\n[출력]\n\n3\n\n7\n\n11\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n```python\n\nscore = [90, 25, 67, 45, 80]\n\nstudent_number = 0\n\n  \n\nfor i in score:\n\nstudent_number = student_number + 1\n\nif i \u003e= 60:\n\nprint(\"%d번 학생은 합격입니다.\" % student_number)\n\nelse:\n\nprint(\"%d번 학생은 불합격입니다.\" % student_number)\n\n  \n\n[출력]\n\n1번 학생은 합격입니다.\n\n2번 학생은 불합격입니다.\n\n3번 학생은 합격입니다.\n\n4번 학생은 불합격입니다.\n\n5번 학생은 합격입니다.\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- continue 이용\n\n반복문 수행 도중 continue 만나면 그 즉시 다음 반복으로 진행한다. 아래의 예시에서 점수 변수 i가 60보다 작으면 조건이 참이니까 continue를 만나서 print()를 실행하지 않고 다음으로 넘어간다. 만약 60보다 크다면 조건문 입장에서는 거짓이니까 continue를 실행하지 않고 아래의 print()문을 실행하는 것이다.\n\n  \n\n```python\n\nscore = [90, 25, 67, 45, 80]\n\nstudent_number = 0\n\n  \n\nfor i in score:\n\nstudent_number = student_number + 1\n\nif i \u003c 60:\n\ncontinue\n\nprint(\"%d번 학생 축하합니다. 합격입니다. \" % student_number)\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 02. for문과 range 함수\n\n  \n\n\u003cbr\u003e\n\n  \n\nfor문을 쓸 때 리스트, 튜플, 문자열 외에도 간단히 숫자를 이용한 반복을 원할 때가 있다. 그때 사용하는 것이 `range()` 함수이다.\n\n  \n\n- `range(10)`의 형태는 0 이상 10 미만의 숫자를 포함하는 range 객체 생성\n\n- `range(1,10)`의 형태는 1이상 10 미만의 숫자를 포함하는 range 객체 생성\n\n  \n\n```python\n\nsum = 0\n\nfor i in range(1, 11):\n\nsum = sum + i\n\n  \n\nprint(sum)\n\n  \n\n[출력]\n\n55\n\n```\n\n  \n\n- 배열의 길이를 range()에 적용시킨 예제\n\n```python\n\nscore = [90, 25, 67, 45, 80]\n\nfor student_number in range(len(score)):\n\nif score[student_number] \u003c 60:\n\ncontinue\n\nprint(\"%d번 학생 축하합니다. 합격입니다.\" % (student_number + 1))\n\n```\n\n  \n\n- range() 이용 구구단, 이중 for문\n\n`print('')` 공백 print()문 넣음으로 인해 줄바꿈 효과 넣은 것\n\n  \n\n```python\n\nfor i in range(2,10): # ①번 for문\n\nfor j in range(1, 10): # ②번 for문\n\nprint(i * j, end=\" \")\n\nprint('')\n\n  \n\n[출력]\n\n2 4 6 8 10 12 14 16 18\n\n3 6 9 12 15 18 21 24 27\n\n4 8 12 16 20 24 28 32 36\n\n5 10 15 20 25 30 35 40 45\n\n6 12 18 24 30 36 42 48 54\n\n7 14 21 28 35 42 49 56 63\n\n8 16 24 32 40 48 56 64 72\n\n9 18 27 36 45 54 63 72 81\n\n```\n\n  \n\n\u003cbr\u003e\u003cbr\u003e\n\n  \n\n## 03. 리스트 안에 for문 넣기 (리스트 내포)\n\n  \n\n\u003cbr\u003e\n\n  \n\n리스트 내포하는 방법은 `[표현식 for 항목 in 반복가능객체 if 조건문]` 이다. 조건이 필요하지 않다면 `if 조건문` 부분은 빼도 된다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 리스트 내포 전\n\n  \n\n```python\n\na = [1, 2, 3, 4]\n\nresult = []\n\nfor num in a:\n\nresult.append(num * 3)\n\nprint(result)\n\n  \n\n[출력]\n\n[3, 6, 9, 12]\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 리스트 내포 후\n\n  \n\n```python\n\na = [1, 2, 3, 4]\n\nresult = [num * 3 for num in a]\n\nprint(result)\n\n  \n\n[출력]\n\n[3, 6, 9, 12]\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 조건문 포함 리스트 내포\n\n```python\n\na = [1, 2, 3, 4]\n\nresult = [num * 3 for num in a if num % 2 == 0]\n\nprint(result)\n\n  \n\n[출력]\n\n[6, 12]\n\n```\n\n  \n\n\u003cbr\u003e\n\n  \n\n- 리스트 내포 구구단 (이중 for문)\n\n```python\n\nresult = [x * y for x in range(2, 10)\n\nfor y in range(1, 10)]\n\nprint(result)\n\n  \n\n[출력]\n\n[2, 4, 6, 8, 10, 12, 14, 16, 18, 3, 6, 9, 12, 15, 18, 21, 24, 27, 4, 8, 12, 16,\n\n20, 24, 28, 32, 36, 5, 10, 15, 20, 25, 30, 35, 40, 45, 6, 12, 18, 24, 30, 36, 42\n\n, 48, 54, 7, 14, 21, 28, 35, 42, 49, 56, 63, 8, 16, 24, 32, 40, 48, 56, 64, 72,\n\n9, 18, 27, 36, 45, 54, 63, 72, 81]\n\n```","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/fragment/lang/python/python":{"title":"Python","content":"\n## 잔재미코딩 강의\n\n\u003ca href='https://www.inflearn.com/course/python-crawling-basic' target='_blank'\u003e파이썬 입문과 크롤링기초 부트캠프\u003c/a\u003e 강의를 정리한 내용\n\n- [01. 파이썬 입문](notes/TIL/fragment/lang/python/funny01)\n- [02. 파이썬 변수, 출력](notes/TIL/fragment/lang/python/funny02)\n- [03. 파이썬 String](notes/TIL/fragment/lang/python/funny03)\n- [04. 파이썬 List](notes/TIL/fragment/lang/python/funny04)\n- [05. 파이썬 Tuple](notes/TIL/fragment/lang/python/funny05)\n- [06. 파이썬 Dictionary](notes/TIL/fragment/lang/python/funny06)\n- [07. 파이썬 Set](notes/TIL/fragment/lang/python/funny07)\n- [08. 파이썬 Bool](notes/TIL/fragment/lang/python/funny08)\n- [09. 파이썬 Variable](notes/TIL/fragment/lang/python/funny09)\n- [10. 파이썬 Condition](notes/TIL/fragment/lang/python/funny10)\n- [11. 파이썬 For](notes/TIL/fragment/lang/python/funny11)","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null},"/notes/TIL/integrated/integrated":{"title":"통합된 지식","content":"\n단편적 지식들이 통합된 지식으로 전환되는 공간 \u003cbr\u003e\n지식 간에 연결된 모습을 확인하며, 새로운 지식이 됨 \u003cbr\u003e\n해당 저장소는 간결하게, 핵심만 보이는 것이 목적","lastmodified":"2023-02-13T17:10:53.372807294Z","tags":null}}