{"/about":{"title":"About","content":"","lastmodified":"2023-03-07T08:12:32.379815606Z","tags":null},"/brain":{"title":"Brain","content":"","lastmodified":"2023-03-07T08:12:32.379815606Z","tags":null},"/brain/":{"title":"_index","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/Algo/":{"title":"Algorithm","content":"","lastmodified":"2023-03-07T08:12:32.379815606Z","tags":null},"/brain/Algo/Baekjoon/":{"title":"Baekjoon","content":"","lastmodified":"2023-03-07T08:12:32.379815606Z","tags":null},"/brain/Algo/LeetCode/":{"title":"LeetCode","content":"","lastmodified":"2023-03-07T08:12:32.379815606Z","tags":null},"/brain/Algo/Programmers/":{"title":"Programmers","content":"","lastmodified":"2023-03-07T08:12:32.379815606Z","tags":null},"/brain/Algo/theory/":{"title":"알고리즘 이론","content":"","lastmodified":"2023-03-07T08:12:32.379815606Z","tags":null},"/brain/Algo/theory/a":{"title":"a","content":"","lastmodified":"2023-03-07T08:12:32.379815606Z","tags":null},"/brain/Algo/theory/b":{"title":"b","content":"","lastmodified":"2023-03-07T08:12:32.379815606Z","tags":null},"/brain/Algo/theory/c":{"title":"c","content":"","lastmodified":"2023-03-07T08:12:32.379815606Z","tags":null},"/brain/Algo/theory/d":{"title":"d","content":"","lastmodified":"2023-03-07T08:12:32.379815606Z","tags":null},"/brain/Algo/theory/e":{"title":"e","content":"","lastmodified":"2023-03-07T08:12:32.379815606Z","tags":null},"/brain/Algo/theory/f":{"title":"f","content":"","lastmodified":"2023-03-07T08:12:32.379815606Z","tags":null},"/brain/Algo/theory/g":{"title":"g","content":"","lastmodified":"2023-03-07T08:12:32.379815606Z","tags":null},"/brain/Algo/theory/h":{"title":"h","content":"","lastmodified":"2023-03-07T08:12:32.379815606Z","tags":null},"/brain/CA/":{"title":"Computer Architecture","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/CA/abc":{"title":"abc","content":"## ang\n\n### aaaaa\n\n[dd](brain/CA/apple-git.md)\n\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\n\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\n\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\n\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\n\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\n### aabcbacbaaaa\n\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\n## angangagn\n\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\n\n### abcbc\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\nasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lfasdkjfhasd;lf \u003cbr\u003e\n\n### abcbcsdf","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/CA/apple-git":{"title":"코딩애플 git","content":"\n\u003e 해당 게시글은 \u003ca href='https://codingapple.com/course/git-and-github/' target='_blank'\u003e코딩애플의 git/github 강좌\u003c/a\u003e의 필기와 제가 알던 지식을 정리한 글 입니다. \n\n\u003chr\u003e\n\n## git 세팅\n\n\u003cbr\u003e\n\n**Windows**\n\n1. 구글에 git windows 검색 후 다운\n2. 설치 과정에서 `Use Visual Studio Code as Git's default editor` 체크\n3. 설치 과정에서 `Override the default branch` 체크하고 원하는 branch 명 \u003cbr\u003e 현재, 깃과 깃허브 기본 브랜치를 **master**로 설정해놨음\n4. 설치 과정에서 기본 에디터 체크 안했다면 `git config --global core.editor \"code --wait\"`\n5. 기본 브랜치 바꾸는 명령어는 `git branch -M 브랜치명`\n\n\u003cbr\u003e\n\n**mac**  \n\n1. 구글에 Homebrew 검색 후 설치\n2. 터미널에 `brew install git` 입력 후 깃 설치\n3. `git config --global init.defaultBranch master` 기본 브랜치 master 설정\n4. `git config --global core.editor \"code --wait\"` 기본 에디터 vscode 설정\n5. 만약, 기본 브랜치 바꾸는 명령어는 `git branch -M 브랜치명`\n\n\u003cbr\u003e  \n\n```bash\ngit config --global init.defaultBranch master\ngit config --global core.editor \"code --wait\"\ngit config --global user.email \"github 아이디\"\ngit config --global user.name \"이름\"\ngit config --global core.autocrlf true # windows\ngit config --global core.autocrlf input # mac\n```\n\n\u003cbr\u003e\n\n### 현재 세팅\n\n```bash\n[user]\n    name = jae_yoon(mac)\n    email = wlwhsvkdlxh@gmail.com\n\n[init]\n    defaultBranch = master\n\n[core]\n    editor = code --wait\n    autocrlf = input\n\n[push]\n    default = current\n\n[pull]\n    rebase = true\n\n[diff]\n    tool = vscode\n\n[difftool \"vscode\"]\n    cmd = code --wait --diff $LOCAL $REMOTE\n\n[alias]\n    hist = log --graph --all --pretty=format:'%C(yellow)[%ad]%C(reset) %C(green)[%h]%C(reset) | %C(white)%s %C(bold red)[[%an]]%C(reset) %C(blue)%d%C(reset)' --date=short\n\n[merge]\n    tool = vscode\n\n[mergetool \"vscode\"]\n    cmd = code --wait $MERGED\n\n[mergetool]\n    keepBackup = false\n```\n\n\u003chr\u003e\n\n## git 명령어\n\n### 기본 명령어\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/xX40Nt9.png\" height=\"50%\" width=\"100%\"\u003e\u003c/p\u003e\n  \n\n```bash\ngit init # 초기 폴더를 git 사용할 수 있게\ngit add file_name # 작업 폴더 -\u003e staging area\ngit commit -m \"memo\" # staging area -\u003e repository\ngit status # staging area 목록 확인\ngit log --all --oneline # commit 내역 한 줄로 조회\ngit commit --amend -m \"메모\" # 가장 최근 commit 내용 변경\n```\n\n작업 폴더에서 staging area로 올릴 파일을 고르는 행위를 **스테이징 한다** 라고 함\n\ngit add는 파일을 새로 추적할 때도 사용하고\n\n수정한 파일을 staged 상태로 만들 때도 사용한다.\n\n\u003cbr\u003e\n\n### git diff\n\n- `git diff` : 최근 commit과 현재 파일의 차이점 보여줌\n\n- j, k로 스크롤바 조작 / q로 종료\n\n- diff가 엔터키 하나, 스페이스바 하나만 했다고 해도 차이점으로 보여주기 때문에 좀 쓰레기 같음\n\n- `git difftool` : vi 에디터 형태로 비교해서 편하게 보여줌\n\n- vi에디터 기본 동작키 h, j, k, l, `:q` 이런거 사용\n\n- `git difftool 커밋아이디` : 현재 파일과 특정커밋 비교 가능\n\n- 사실 difftool도 쓰레기라... 그냥 vscode로 설정하고 보자\n\n- vscode extensions에서 git graph 다운받으면\n\n\u003cbr\u003e\n\n```bash\ngit config --global diff.tool vscode\ngit config --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE'\ngit difftool\n```\n\n\u003cbr\u003e\n\n### vscode git\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/amsAiCC.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e  \n\n1. 1번 버튼 누르면 사용 가능\n\n2. 플러스 모양 눌러서 `작업폴더 -\u003e staging area`\n\n3. 마이너스 모양 눌러서 `staging area -\u003e 작업폴더`\n\n4. 체크 모양 눌러서 `staging area -\u003e repository`\n\n5. 그래프 모양 눌러서 브랜치 별 커밋 내용들, 각 파일 눌러서 diff 모두 확인 가능\n\n\u003cbr\u003e  \n\n### git branch\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/4U4hyx9.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n```bash\ngit branch 브랜치명 # 브랜치 생성\ngit switch 브랜치명 # 브랜치로 이동\ngit log --all --oneline --graph # branch 그래프 모양도 같이 보기\ngit merge 브랜치명 # 현재 위치(HEAD)에 브랜치명을 병합\n```\n\n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/pgh3IqH.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n- 충돌이 났을 때, 어떤 것을 적용할 지 선택하고 꼭 git add, git commit 해주자.\n\n- merge는 현재 위치(HEAD)에 브랜치를 병합하는 과정이다. 따라서 switch로 브랜치 이동을 꼭 해주고 병합하자.\n\n- 과거에는 checkout을 주로 썼는데, checkout은 만능인 반면 switch는 정말 브랜치 이동만 한다. 무지성 checkout 하는걸 염려해서 브랜치 이동은 `switch`, 스테이징 취소는 `git restore --staged \u003cfile\u003e` 명확하게 나눠서 사용하는 추세인 듯 하다.\n\n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\n\t\u003cleft\u003e\n\t\t\u003cimg src=\"https://i.imgur.com/gSWSf8M.png\" height=\"50%\" width=\"50%\"\u003e\n\t\u003c/left\u003e\n\t\u003cright\u003e\n\t\t\u003cimg src=\"https://i.imgur.com/th6MOe1.png\" height=\"50%\" width=\"45%\"\u003e\n\t\u003c/right\u003e\n\u003c/p\u003e\n\n- git graph로 보면 시간 순서가 완벽하게 되어있는데, git log는 그래보이진 않음\n\n\u003cbr\u003e\n\n```bash\ngit branch # 브랜치 목록 확인 (로컬)\ngit branch -r # 브랜치 목록 확인 (원격 ex.github)\ngit branch -a # 브랜치 목록 확인 (전체)\ngit branch -d 브랜치명 # 브랜치 삭제 (로컬저장소)\ngit push origin --delete 브랜치명 # 브랜치 삭제 (원격저장소)\n```\n\n\u003cbr\u003e\n\n```bash\ngit branch -d 브랜치명 # merge 완료된 브랜치 삭제\ngit branch -D 브랜치명 # merge 안한 브랜치 삭제\n# 깔끔하게 그 브랜치에서 작업한거 싹 날라감\n\ngit branch -m 변경전 변경후 # 브랜치명 변경\ngit branch -M 브랜치명 # 기본 브랜치 변경\n```\n  \n\u003cbr\u003e\n\n### git hist\n  \n\u003cbr\u003e\n\n`git hist`는 실제로는 없는 명령어이다. 매번 `git log --all --oneline --graph` 이런식으로 작성하기 귀찮으니까 `alias` 기능으로 만든 것이다. 일종의 커스텀 기능이다. 원래 oneline만 하면 날짜나 누가 커밋했는지는 안나와서, 내가 커스텀 한 것은 아래와 같다.\n\n```bash\ngit config --global alias.hist \"log --graph --all --pretty=format:'%C(yellow)[%ad]%C(reset) %C(green)[%h]%C(reset) | %C(white)%s %C(bold red)[[%an]]%C(reset) %C(blue)%d%C(reset)' --date=short\"\n```\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/ep82msA.png\" height=\"50%\" width=\"70%\"\u003e\u003c/p\u003e\n\n- 날짜, 커밋명 간단히, 커밋내용, 커밋작성자, 브랜치 다 보인다.\n\n- 보면 git config user name을 수정했었는데, `origin/master`, `orign/HEAD` 저기까지가 깃허브에 git push로 올렸던 커밋들이다. 그 이후 user name을 저렇게 수정했었다. 아직은 push 하지 않은 상태라 브랜치가 coupon, HEAD -\u003e master 이렇게 되어있는 모습이다.\n\n- vim 환경이기 때문에 j가 아래 방향키, k가 위 방향키로 잘먹는다.  \n\n\u003chr\u003e\n\n## 방법론\n  \n\u003cbr\u003e\n\n### 3-way merge\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/JjWDckm.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e  \n\n- 신규 브랜치, merge 하고자 하는 중심 브랜치 각각에 새로운 commit이 있을 때 merge하면 두 브랜치의 코드를 합쳐서 새로운 commit을 자동으로 생성\n\n- 3-way merge 방식은 merge 했다는 흔적이 남게 된다.\n\n- 3-way 방식이 싫은 경우 강제로 \u003ca href='/notes/TIL/fragment/tech/git/#rebase-and-merge'\u003erebase하여 fast-forward 방식\u003c/a\u003e을 사용하거나 \u003ca href='/notes/TIL/fragment/tech/git/#squash-and-merge'\u003esquash and merge 방식\u003c/a\u003e을 사용한다.\n\n\u003cbr\u003e  \n\n모든 브랜치를 3-way merge 해버리면 나중에 참사가 일어날 수 있다.\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/dnaPN6q.png\" height=\"50%\" width=\"100%\"\u003e\u003c/p\u003e\n\n- 3-way merge 되면, 흔적이 남아서 매우 복잡하게 보인다.\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/dsLK3GD.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n  \n- master branch의 git log를 출력해보면 3-way merge 된 branch들의 commit 내역도 다 같이 출력되어서 보기 더럽다. (ex. 깃허브에서 커밋 내역 볼 때)\n\n이러한 참사를 해결하기 위하여 **squash and merge 방식**을 사용하곤 한다.\n\n\u003cbr\u003e\n\n### fast-forward merge\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/7NlcXvG.png\" height=\"70%\" width=\"80%\"\u003e\u003c/p\u003e\n  \n- 신규 브랜치에만 새로운 commit이 있고 merge 하고자 하는 브랜치에는 새로운 commit이 없는 경우 사용하는 merge 방식\n\n- 그냥 신규 브랜치보고 지금부터 너의 이름은 master 브랜치야! 라고 한다.\n\n- 그래서 merge한 흔적이 남지 않는다.\n\n- fast-forward merge가 싫은 경우 강제로 `git merge --no --ff 브랜치명`으로 강제로 3-way merge 할 수 있다.\n\n\u003cbr\u003e\n\n### rebase and merge\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/isYTTLj.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n- rebase는 브랜치의 시작점을 다른 commit으로 옮겨주는 것\n\n- 신규 브랜치, merge 하고자 하는 중심 브랜치 각각에 새로운 commit이 있을 때 신규 브랜치의 시작점을 merge 하고자 하는 중심 브랜치의 가장 최근 commit으로 옮기고 fast-forward 방식으로 merge 한다.\n\n- 3-way merge가 싫을 때 사용할 수 있다.\n\n- 역시나 merge한 흔적이 남지 않는다.\n\n- 단, rebase를 사용했기 때문에 master branch의 새로운 커밋과 **conflict 할 가능성이 매우 높아진다.**\n\n\u003cbr\u003e\n\n**rebase and merge 사용법**\n\n1. rebase 할, 시작점 바꾸고 싶은 브랜치로 이동\n\n2. `git rebase merge할 브랜치명`\n\n3. 그 다음 이동하여 fast-forward merge\n\n```bash\ngit switch sub\ngit rebase master\ngit switch master\ngit merge sub\n```\n\n\u003cbr\u003e\n\n### squash and merge\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/9uHPO9k.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n- 3-way merge가 너무 많아서 git log 보기 힘들까봐 주로 사용\n\n- merge 흔적이 남지 않음\n\n- 브랜치에서 만들어놨던 많은 commit을 모두 합쳐서 하나의 commit으로 master 브랜치에 생성해줌  \n\n\u003cbr\u003e\n\n**squash and merge 사용법**\n\n```bash\ngit switch master\ngit merge --squash 브랜치명\ngit commit -m \"메세지\"\n```\n\n\u003cbr\u003e\u003cbr\u003e\n\n### 그래서 어떤 방식?\n\n\u003cbr\u003e  \n\n- 프로젝트 마다, 팀마다 branching/merge 가이드가 존재\n\n- 예를 들어, 안중요한 잔챙이 브랜치는 **squash**하세요.\n\n- feature/develop 브랜치는 **3-way merge**하세요.\n\n- 혼자서 할 때는 대충 쓰세요.\n\n\u003chr\u003e\n\n## git merge 실습\n\n실습과정에서, branch를 만드는 시점은 중요하다. 예를 들어, commit2에서 git branch를 이용하며 브랜치를 생성하면 commit2가 시작지점이 되는 것이니까. 이를 잘 이해하며 실습을 시작한다.\n\n### 3-way merge 실습\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/oRAPZsl.png\" height=\"50%\" width=\"70%\"\u003e\u003c/p\u003e\n\n- 분기되었던 모습, 즉, merge된 흔적이 남아있다.\n\n- `git branch -d 3-way`로 브랜치를 지워도 그래프 모양으로 나타난다.\n\n- 3-way merge는 각각의 브랜치가 합쳐져서 새로운걸 만들어내는 형태라 mergetool이 따로 열렸다. 그래서 Merge branch 'commit4'와 같이 커밋을 남겼다.\n\n\u003cbr\u003e\n\n### fast-forward 실습\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/yXrRqUx.png\" height=\"50%\" width=\"70%\"\u003e\u003c/p\u003e\n\n- fast-forward 방식은 master 브랜치에 새로운 commit이 없으니까 master 브랜치의 HEAD만 fastforward 브랜치로 바뀐 모습이다.\n\n- 따라서, merge 흔적이 남아있지 않다.\n\n- HEAD만 바뀌는 형태라 mergetool이 따로 열리지 않았다.\n\n- HEAD가 `(HEAD -\u003e master, fast)` 이런식으로 나타났다.\n\n\u003cbr\u003e\n\n### rebase and fast-forward 실습  \n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/GsBAGnt.png\" height=\"50%\" width=\"70%\"\u003e\u003c/p\u003e\n\n- rebase 하기 전 모습\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/JZynCQH.png\" height=\"50%\" width=\"70%\"\u003e\u003c/p\u003e\n\n- rebase 이후 모습\n\n- 그래프에서 분기가 사라짐을 확인 가능하다.\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/er40Ubr.png\" height=\"50%\" width=\"70%\"\u003e\u003c/p\u003e\n\n- rebase 이후 fast-forward 한 모습\n\n- fast-forward 방식과 동일하게 HEAD만 바뀐 모습이다.\n\n\u003cbr\u003e\n\n### squash and merge 실습\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/XIehIrZ.png\" height=\"50%\" width=\"70%\"\u003e\u003c/p\u003e\n\n- squash 하기 이전 모습\n  \n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/JEhY3u6.png\" height=\"50%\" width=\"70%\"\u003e\u003c/p\u003e\n\n- squash를 하고 나서 squash는 되었지만, HEAD는 업데이트가 되지 않았다고 한다. commit을 추가적으로 하고 log를 확인해보면\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/Ulw3b0i.png\" height=\"50%\" width=\"70%\"\u003e\u003c/p\u003e\n\n- commit4가 정상적으로 생성된 모습이다. 하지만 squash 브랜치는 남아있다. 그래서 `git branch -D squash`로 브랜치를 삭제해보면\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/r87rsTH.png\" height=\"50%\" width=\"70%\"\u003e\u003c/p\u003e\n  \n- 이와 같이 깔끔하게 merge 흔적이 사라진 모습이다.\n\n- squash로 merge하면 브랜치의 내용이 순간이동하는 개념이라 squash 브랜치는 아직 merge 되지 않았다고 나왔다. 그래서 `git branch -d squash`가 아닌 `git branch -D squash`로 삭제했다.\n\n\u003chr\u003e\n\n## git 되돌리기\n\n\u003cbr\u003e\n\n### git restore  \n\n- 파일 하나를 수정하고 싶은데 ctrl + z로 수정하기에 수정사항이 너무 많다면 사용\n\n- 해당하는 commit 시점으로 파일 내용 되돌림\n\n```bash\ngit restore 파일명\ngit restore --source 커밋아이디 파일명\ngit restore --staged 파일명\n```\n\n예를 들어, `a.txt` 파일 작업 중, 내용1을 입력하고 커밋1, 내용2를 입력하고 커밋2를 한 상태라고 하자. 내용3을 입력했다가 뭔가 이상해서 파일 내용을 돌리려고 하면 `git restore a.txt`를 사용해서 가장 최신 커밋으로 돌리자.  \n\n만약, 가장 최신 커밋보다 이전의 커밋으로 내용을 돌리고 싶으면 `git restore --source 커밋아이디 파일명`으로 돌아가자.\n\n`git add`로 작업폴더에서 staging area로 올렸다가 staging area에서 다시 작업폴더로 내리고 싶으면, 즉, 스테이징을 취소하고 싶으면 `git restore --staged 파일명`을 사용하도록 하자.\n\n\u003cbr\u003e  \n\n### git revert\n\n- commit을 취소하고 싶은 경우 revert 사용\n\n- commit을 없애는 건 아니고 commit 하나를 취소한 commit을 하나 생성해줌\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/cXdKb12.png\" height=\"50%\" width=\"70%\"\u003e\u003c/p\u003e\n\n- 예를 들어, b파일을 만든 **244ef15** commit을 취소하고싶음.\n\n- `git revert 244ef15`를 입력하면 에디터가 열림. 그리고 새로운 commit을 하나 추가해줌.\n\n- 결과적으로 244ef15에서 일어난 commit을 취소해줌\n\n- 작업폴더에서 a파일과 c파일만 있고 b파일은 사라져있을 것\n\n- merge로 생성된 commit도 취소 가능\n\n```bash\ngit revert 커밋아이디\ngit revert 커밋아이디1 커밋아이디2\ngit revert HEAD # 가장 최근 commit 취소\n```\n\n\u003cbr\u003e\n\n### git reset\n\n- 특정 commit 시절로 아예 모든 것을 되돌려버림  \n\n```bash\ngit reset --hard 커밋아이디\ngit push -f # 원격저장소에도 업데이트 하기\n```\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/20nSUUV.png\" height=\"50%\" width=\"70%\"\u003e\u003c/p\u003e\n\n- git revert 예제에서 git reset --hard 한 모습\n\n- 아예 c파일 생성, revert b 커밋 자체가 날라간 모습\n\n- (주의) 따라서, 협업시 사용금지. 갑자기 커밋을 다 날려버릴 수도 있기 때문이다.\n\n\u003cbr\u003e\n\n혼자 작업할 때도 reset을 잘 사용하지는 않는다. 기억 잃고 7살로 되돌아갈래?라고 한다면 안돌아가지 않을까. 미래 기억을 reset은 삭제해버리니까 좀 쫄린다.  \n\n```bash\ngit reset --soft 커밋아이디\n```\n\n- 리셋이긴 한데, 변동사항을 지우지는 않고 staging area에 올려놓는다. 사용하려면 git commit 하면 됨\n\n```bash\ngit reset --mixed 커밋아이디\n```\n\n- 리셋이긴 한데, 변동사항을 지우지는 않고 staging area에도 올려놓지 않는다. 사용하려면 git add, git commit 둘다 해야함\n\n\u003chr\u003e\n\n## git push\n\n- 로컬 repository를 원격 repository로 올리기\n  \n```bash\ngit push -u 원격저장소주소 올릴로컬브랜치명\ngit remote add 변수명 주소\ngit push origin 올릴로컬브랜치명\ngit remote -v # 변수목록 확인\ngit clone 원격저장소주소 # 원격저장소 받아오기\n```\n\n- `git push -u https://github.com/Shin-Jae-Yoon/TIL.git master`라고 하면 로컬의 master 브랜치가 해당하는 원격저장소에 push 된다.\n\n- 매번 주소 치기 귀찮으니까 remote 기능 이용해보자.\n\n- `git remote add origin https://github.com/Shin-Jae-Yoon/TIL.git`이라고 하면 git 주소를 origin 변수에 저장한 것이다.\n\n- `git push -u origin master`이라고 하면 위의 것과 같은 말이다.\n\n- `-u` 옵션은 주소를 기억하라는 옵션이라서 앞으로는 `git push`만 입력해도 될 것 이다.\n\n\u003cbr\u003e  \n\n### .gitignore\n\n원격저장소에 쓸데없는 파일은 commit해서 올리지 않도록 하는 것이 좋은데, `.gitignore` 파일을 만들면 원격저장소에 올리지 않을 파일들을 쉽게 명시 가능하다. 명시된 파일들은 git add 해도 스테이징 되지 않는다.\n  \n예를 들어, `node_modules`는 깃허브에 올리지 않는다. 어차피 `package.json` 파일만 잘 있으면 `npm install` 했을 때 자동으로 `node_modules` 폴더가 생성되니까.\n\n\u003chr\u003e\n\n## github 이용 협업\n\n- 기본적으로 `git clone 원격저장소` 하는 것부터 시작한다.\n\n- 팀원도 push 하고 싶으면 깃허브의 settings -\u003e Access -\u003e Collaborators -\u003e Manage access에서 팀원 깃헙아이디를 등록해놔야 push 가능해진다.  \n\n\u003cbr\u003e\n\n### 다른 팀원이 최근에 git push 한 경우\n\n다른 팀원이 최근에 git push 한 경우에 내가 git push를 하지 못하는 경우가 있을 수 있다. 즉, 원격저장소에 변동사항이 생겨서 새로운게 생기면 git push 하지 못한다. 이런 경우 `git pull`로 먼저 원격저장소의 내용을 가져와서 업데이트 해야 한다.\n  \n\n```bash\ngit pull origin 브랜치명\n# 원격저장소에서 해당하는 branch만 pull 가능\n```\n\ngit pull은 엄밀히 말하면 `git fetch + git merge`이다. 원격 저장소의 신규 commit을 가져오고 내 브랜치에 merge 하는 것이다. 이 말은 merge 과정에서 conflict 발생 가능성이 있다는 말이다. 뭐 conflict 나면 에디터 열고 수정해야지 ...\n\n\u003cbr\u003e\n\n### pull request\n\n- 프로젝트를 할 때 branch를 쪼개서 작업하는 경우가 많아질 것\n\n- 예를 들어, `git push origin feature`로 feature 브랜치를 로컬에서 생성하고 작업하고 있다고 가정하자. (물론, 깃허브에서 브랜치 생성하고 pull 해왔어도 가능)\n\n- feature가 잘 작동해서 master 브랜치에 merge 하려고 한다.\n\n- github에서 merge 하거나\n\n- 로컬에서 merge 한 다음 push 하거나\n\n- 협업할 때는 merge 하기 전에 검토를 하는 경우가 일반적\n\n- github의 pull request 기능을 이용해보자.\n\n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/XNgAdku.png\" height=\"50%\" width=\"70%\"\u003e\u003c/p\u003e  \n\n1. 로컬 환경에서 만든 다른 브랜치로 작업하고 `git push origin 만든브랜치` 해서 브랜치에서 작업한 내용을 원격 repository로 push\n\n2. github에서 pull requests 탭 들어가서 pull request 생성\n\n3. 검토해보고 merge 될 것 같으면 3가지 옵션 중 선택해서 merge\n\n4. conflict 발생했다면 github에서 수정 가능하니까 conflict 해결하기\n\n5. 다쓰고 나면 브랜치 삭제해주고 이런건 알아서 하기\n\n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/hriVIwU.png\" height=\"50%\" width=\"70%\"\u003e\u003c/p\u003e  \n\n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/ZGJ2rZu.png\" height=\"50%\" width=\"70%\"\u003e\u003c/p\u003e\n\n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/G1YX0Cm.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/j15pOFe.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n  \n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/eykNwmI.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e  \n\n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/FfXtYA7.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e  \n\nmerge 전략 3가지 역시 깃허브에 반영되어있음.\n\n\u003cbr\u003e\n\n1. create a merge commit\n\n새로운 merge commit 생성해주는 \u003ca href='/notes/TIL/fragment/tech/git/#3-way-merge'\u003e3-way-merge\u003c/a\u003e를 실행한다. master 브랜치 조회해보면 합쳐진 브랜치의 commit 내역도 전부 나온다. 역시 git log를 보면 합쳐진 브랜치도 나오기 때문에 commit 내역이 많으면 복잡하고 더러워 보일 수 있다.\n\n\u003cbr\u003e\n\n2. squash and merge\n\n합쳐질 브랜치의 commit 내역을 하나로 합쳐서 master 브랜치에 신규 commit을 생성해준다. git log를 보면 합쳐진 브랜치는 안나온다. commit을 하나로 합쳐서 master 브랜치로 순간이동하는 방식이라 많은 사람이 선호한다.\n\n\u003cbr\u003e\n\n3. rebase and merge\n\n합쳐질 브랜치를 master 브랜치 최신 commit으로 rebase 하고 나서 fast-forward merge 같은 작동을 해준다. 결과는 squash and merge와 비슷한데, 합쳐질 브랜치의 commit 내역이 전부 보존된다. 하지만, git log에는 합쳐진 브랜치가 나오지 않는다.\n\n\u003chr\u003e\n\n## 브랜치 전략\n\n- 프로젝트 커지고 사람 많아져도 branch, merge를 깔끔하게 하려고 사용하는 전략들이 있다. **GitFlow, Github Flow, Trunk-based, Gitlab Flow**\n\n\u003cbr\u003e  \n\n### Git Flow 전략\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/gjMpVnJ.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/hKXAyGe.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/zFqh99w.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n**GitFlow** 개발 전략은 게임 개발 같이 항상 안정적인 release를 해야하는 경우에 사용하기 적합하다. 크게 5개 브랜치를 운영한다.\n\n- main 브랜치\n\n- develop 브랜치 (개발용, main 브랜치의 복사본)\n\n- feature 브랜치 (develop에 기능 추가용)\n\n- hotfix 브랜치 (main 브랜치 버그 픽스용)\n\n- release 브랜치 (develop 브랜치를 main 브랜치에 merge 하기 전 최종 테스트본, 가끔 사용)\n\n장점은 안정적이지만, 단점은 간단한 개발의 경우 리소스 낭비가 심할 수 있다. 간단한 작업임에도 매번 develop 브랜치~ release 브랜치~ 이런식으로 진행해야하니까. 최근 CI/CD를 도입하는 회사가 많이 늘었는데, 그런 경우에 git flow 전략은 적합하지 않다.\n\n\u003e \u003ca href='https://seosh817.tistory.com/104' target='_blank'\u003eCI/CD\u003c/a\u003e에 관한 것은 해당 링크에 자세히 설명되어있다.\n\n  \n\n\u003cbr\u003e\n\n  \n\n### Trunk-based 전략\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/AxgYt6e.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n코드 짠 것을 대충 배포해도 상관없거나 굳이 큰 업데이트가 없는 안정적인 프로그램의 경우, git flow 처럼 많은 브랜치를 만드는 것보다 해당하는 **Trunk-based 전략**이 더 적합할 수 있다. 그냥 main 브랜치와 기능추가용 feature 브랜치만 사용하면 된다. **github flow**도 해당하는 전략과 비슷하다.\n\n1. 기능추가, 버그픽스가 필요하면 main 브랜치에서 새로운 브랜치를 분기하여 코드 작성\n\n2. 기능이 완성되면 main 브랜치에 merge (다 쓴 브랜치 삭제)\n\n3. main 브랜치를 필요할 때마다 배포\n\n\u003cbr\u003e\n\n**장점**은 코드를 한 브랜치에서만 관리하기에 편하다는 점이다. 이때 크게 개발하고 한 번에 merge 하는 것보다 작은 단위로 자주 merge 하는 것이 더 안전하다. **단점**은 역시 main 브랜치의 코드가 뻑이 나면 큰일나서 테스트나 코드 리뷰를 자주해야 한다. 그래서 테스트와 배포를 자동으로 하는 \u003ca href='https://seosh817.tistory.com/104' target='_blank'\u003eCI/CD\u003c/a\u003e를 도입한 곳에서 자주 사용한다.\n\n\u003chr\u003e\n\n## git stash\n\n- 코드를 작성하다가 잠시 보관하고 싶을 때 사용\n\n- 최근 commit과 차이점 있는 부분 전부 보관\n\n- 스테이징 되었든 안되었든 모두 stash 된다\n\n- 하지만, 스테이징 안해놓은 새로운 파일 (untranked file 인듯)은 stash 안될 수도 있다.  \n\n\u003cbr\u003e\n\n\n**stash 되는 파일 목록** \u003cbr\u003e\u003cbr\u003e\n\nstash란 아래에 해당하는 파일들을 보관해두는 장소 이다.\n\n1. Modified이면서 Tracked 상태인 파일\n\n\t- Tracked 상태인 파일을 수정한 경우\n\n\t- Tracked: 과거에 이미 commit하여 스냅샷에 넣어진 관리 대상 상태의 파일\n\n2. Staging Area에 있는 파일(Staged 상태의 파일)\n\n\t- git add 명령을 실행한 경우\n\n\t- staged 상태로 만들려면 git add 명령을 실행해야 한다.\n\n\t- git add는 **파일을 새로 추적할 때도 사용**하고 **수정한 파일을 Staged 상태로 만들 때**도 사용한다.\n\n```bash\ngit stash\ngit stash list # 보관된 코드 목록\ngit stash save \"메모\" # 메모와 함께 보관\ngit stash pop # 코드 다시 불러오기\ngit stash drop 번호 # stash 1개 삭제\ngit stash clear # stash 전부 삭제\n```\n\n- git stash pop은 pop에서 알 수 있다시피 가장 최근 것부터 가져온다. stash는 스택에 새로운 stash가 만들어지면서 저기에 넣고 working directory, 작업공간이 깔끔해지는 효과이다.\n\n\u003cbr\u003e\n\n\u003e [!note] stash가 왜 필요함? 주석처리 하면 어떰?  \n\u003e\n\u003e 주석처리를 한다고 하더라도 commit 하면 그 내역이 같이 올라간다. 따라서 그걸 숨기고 싶을 때 stash 쓰면 유용하다. 혹은 따로 stash 같은 역할을 하는 branch 하나 만들고 거기에 작성해도 된다. 둘 중 마음에 드는 방식 사용하자.","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/CA/spring-basic-01":{"title":"스프링 입문 : 섹션0-섹션3","content":"\n\u003e 해당 게시글은 김영한님 \u003ca href='https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%9E%85%EB%AC%B8-%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8' target='_blank'\u003e스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술\u003c/a\u003e강좌의 섹션0부터 섹션3까지 정리한 내용입니다.\n\n\u003chr\u003e\n\n## 프로젝트 환경설정\n\n\u003cbr\u003e\n\n### 프로젝트 생성\n\n1. https://start.spring.io/ 스프링 프로젝트 생성\n\t- 프로젝트 생성\n\t- Project : Gradle\n\t\t- Spring Boot : (SNAPSHOT), (M~)는 정식 버전 아니니까 아무 것도 없고 숫자만 써진 버전으로 설정\n\t\t- Language : Java\n\t\t- Packaging : Jar\n\t\t- Java : 11\n\t- Project Metadata\n\t\t- Group : 보통 기업 도메인명 적어줌. 임의로 hello 적음\n\t\t- Artifact : 프로젝트명\n\t- Dependencies\n\t\t- 어떤 라이브러리를 당겨와서 사용할 것이냐\n\t\t- Spring Web 추가\n\t\t- Thymeleaf 추가 (프리마커 쓰는 회사도 있음)\n\n\u003cbr\u003e\n\n2. 인텔리제이로 프로젝트 오픈\n\n- 자바11로 프로젝트 생성했으니, 인텔리제이도 세팅 변경\n\t- 프로젝트 JDK 설정\n\t\t- File - Project Structure - Project Settings - Project\n\t\t- SDK : 11 Oracle OpenJDK version 11.0.16\n\t\t\t- Language level : SDK default\n\t\t- Platform Settings - SDKs - 1.8이 아닌 11로 설정\n- Gradle JDK 설정\n\t- File - Build, Execution, Deployment - Build Tools - Gradle\n\t\t- Build and run using : Gradle -\u003e IntelliJ (속도향상)\n\t\t- Run tests using : Gradle -\u003e IntelliJ (속도향상)\n\t\t- Gradle JVM : 11 Oracle OpenJDK\n\n\u003cbr\u003e\n\n3. 프로젝트 내용물 설명\n\n- gradle/wrapper : gradle 관련하여 사용하는 폴더\n- src : 기본적으로 main/test 두 갈래 생성\n- src/test : 최근 트렌드인 test 코드 관련, Junit5 기반\n- src/main/resources : 실제 java 코드 제외한 xml, properties, html 등 나머지 전부\n- gitignore : github에 올릴 때 제외할 파일들\n- gradlew, bradlew.bat, settings.gradle : 그래들 설정 관련\n- build.gradle : 예전에는 실제로 타이핑하고 코드 짰으나, 최근에는 start.spring.io와 같은 스프링부트 덕에 설정 파일이 제공됨\n\n\n```java\nplugins {\n\t// 선택한 스프링부트 버전과 자바 언어 등\n\tid 'org.springframework.boot' version '2.7.4'\n\tid 'io.spring.dependency-management' version '1.0.14.RELEASE'\n\tid 'java'\n} \n\ngroup = 'hello'\nversion = '0.0.1-SNAPSHOT'\n// 자바 11버전을 의미\nsourceCompatibility = '11'\n\nrepositories {\n\t// mavenCentral이라는 공개된 사이트에서 라이브러리 다운 받아오기\n\tmavenCentral()\n}\n\ndependencies {\n\t// start.spring.io에서 설정했던 의존관계\n\timplementation 'org.springframework.boot:spring-boot-starter-thymeleaf'\n\timplementation 'org.springframework.boot:spring-boot-starter-web'\n\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n}\n\ntasks.named('test') {\n\tuseJUnitPlatform()\n}\n```\n\n\u003cbr\u003e\n  \n4. 생성한 프로젝트 실행\n\n\t- src/main/java/hello/hellospring/HelloSpringApplication.java 메인 메서드 그냥 실행\n\t- `@SpringBootApplication` 애노테이션이 있는 것이 스프링부트 실행 파일\n\t- `localhost:8080` 들어가서 Whitelabel Error Page 뜨면 성공\n\n  \n\n```java\npackage hello.hellospring;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class HelloSpringApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(HelloSpringApplication.class, args);\n\t}\n}\n```\n\n\u003cbr\u003e\n\n5. 스프링부트 실행 오류\n\n\t- 8080포트 이미 열려있어서 안되는 경우\n\t- cmd 관리자 권한으로 실행\n\t- `netstat -ano | findstr 8080`으로 열려있는 포트 확인\n\t- `taskkill /F /pid [process_id]`로 8080포트 닫기\n\n\u003cbr\u003e\n\n### 라이브러리 살펴보기\n\n- Maven, Gradle 같은 빌드 툴은 의존관계를 관리해준다. 실제 우리가 추가한 의존관계는 `Spring Web, Thymeleaf`인데, 외부 라이브러리를 확인해보면 수많은 라이브러리가 다운받아져있다. **의존관계에 따라 자기가 필요한 라이브러리들을 알아서 당겨온다.**\n\n- 인텔리제이 우측에 작은 Gradle 클릭해보면, 여러 의존관계 살펴볼 수 있음\n\n\u003cbr\u003e\u003cbr\u003e\n\n**compileClassPath : 스프링 부트 라이브러리**\n\n- spring-boot-starter-web\n\t- spring-boot-starter-tomcat : 웹서버\n\t- spring-webmvc : 웹 MVC\n- spring-boot-starter-thymeleaf : 타임리프 템플릿 엔진 (View)\n\t- spring-boot-starter\n\t\t- spring-boot\n\t\t\t- spring-boog-core\n\t\t- spring-boot-starter-logging\n\t\t\t- logback\n\t\t\t- slf4j\n\n\u003cbr\u003e\n\n- 톰캣은 WAS(Web-Application-Server)이다.\n\n\t- 예전에는 서버에 톰캣같은 웹서버를 설치해놓고 거기에 자바 코드를 밀어놓는 식으로 개발했음. 웹서버와 개발 라이브러리가 완전히 분리되어 있었음\n\n\t- 최근에는 소스 라이브러리에서 이런 웹서버를 알아서 들고있음(임베디드, 내장) 그래서 자바 메인 메서드만 실행해도 따로 설정 필요없이 웹서버가 뜬다. 8080포트로 들어갈 수도 있음\n\n- 실무에서, `system.out.println()` 방식으로 출력하지 않고 log를 사용한다.\n\n\t- 심각한 로그를 따로 관리하거나, 로그 파일이 관리가 됨\n\n\t- slf4j는 인터페이스이고 logback은 실제 로그를 어떤 구현체로 출력할 지\n\n\t- 최근에는 slf4j + logback 조합을 보통 사용한다. 성능도 빠르고 지원하는 기능 많음\n\n\u003cbr\u003e\u003cbr\u003e\n\n**testCompileClasspath : 테스트 라이브러리**\n\n- spring-boot-starter-test\n\t- junit : 테스트 프레임워크 (최근에는 junit 5버전 사용, 핵심)\n\t- mockito : 목 라이브러리\n\t- assertj : 테스트 코드 작성을 더 쉽게 해주는 라이브러리\n\t- spring-test : 스프링 통합 테스트 지원\n\n\u003cbr\u003e\u003cbr\u003e\n\n### View 환경설정\n\n**Welcome Page 만들기** \u003cbr\u003e\n\n`resources/static/` 경로에 `index.html` 파일을 추가하면, welcome page의 기능을 한다. 이는 단순한 정적 페이지이다.\n\n```html\n// resources/static/index.html\n\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\t\u003chead\u003e\n\t\t\u003ctitle\u003eHello\u003c/title\u003e\n\t\t\u003cmeta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /\u003e\n\t\u003c/head\u003e\n\t\u003cbody\u003e\n\t\tHello\n\t\t\u003ca href=\"/hello\"\u003ehello\u003c/a\u003e\n\t\u003c/body\u003e\n\u003c/html\u003e\n```\n\n- \u003ca href='https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web.servlet.spring-mvc.welcome-page' target='_blank'\u003espring boot docs - welcomepage\u003c/a\u003e\n\n- \u003ca href='https://spring.io/guides/gs/serving-web-content/' target='_blank'\u003e스프링 공식 튜토리얼\u003c/a\u003e\n\n\u003cbr\u003e\u003cbr\u003e\n\n**thymeleaf 템플릿 엔진** \u003cbr\u003e\n\n템플릿 엔진을 사용하여, 동적인 페이지를 구현할 수 있다.\n\n- \u003ca href='https://www.thymeleaf.org/index.html' target='_blank'\u003ethymeleaf official hompage\u003c/a\u003e\n\n- \u003ca href='https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web.servlet.spring-mvc.template-engines' target='_blank'\u003e스프링부트 템플릿 엔진 메뉴얼\u003c/a\u003e\n\n\u003cbr\u003e\u003cbr\u003e\n\n웹 어플리케이션에서 첫 번째 진입점이 바로 **Controller, 컨트롤러**이다.\n\n1. `hello/hellospring/controller` 패키지 생성\n\n2. 패키지에 `HelloController.java` 생성\n\n3. `resources/templates/hello.html` 생성\n\n\n```java\n// src/main/java/hello/hellospring/controller/HelloController.java\npackage hello.hellospring.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Controller\npublic class HelloController {\n\n\t@GetMapping(\"hello\")\n\tpublic String hello(Model model) {\n\t\tmodel.addAttribute(\"data\", \"hello!!\");\n\t\treturn \"hello\";\n\t}\n}\n\n```\n\n- `@GetMapping(\"hello\")` : get/post 방식 말할 때 그 get이다. `localhost:8080/hello`와 mapping\n\n- model의 속성으로 키 : data, 값 : hello!!를 넘긴다.\n\n- `return \"hello\"`로 `/resources/templates/hello`를 찾아서 렌더링 함\n\n\u003cbr\u003e\n\n```html\n// resources/templates/hello.html\n\u003c!DOCTYPE html\u003e\n\u003chtml xmlns:th=\"http://www.thymeleaf.org\"\u003e\n\t\u003chead\u003e\n\t\t\u003ctitle\u003eHello\u003c/title\u003e\n\t\t\u003cmeta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /\u003e\n\t\u003c/head\u003e\n\t\u003cbody\u003e\n\t\t\u003cp th:text=\"'안녕하세요. ' + ${data}\"\u003e안녕하세요. 손님\u003c/p\u003e\n\t\u003c/body\u003e\n\u003c/html\u003e\n```\n\n- `http://www.thymeleaf.org`를 추가함으로써 타임리프 문법 사용 가능\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/9RradTY.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n1. 웹 브라우저에서 `localhost:8080/hello`로 get 요청\n2. 내장된 톰캣이 웹서버의 역할을 하여 받아서 controller로 전달\n3. 스프링이 컨트롤러에 맵핑된 `hello`가 있나 찾아봄.\n4. controller인 helloController의 메서드가 실행된다. 이때 스프링이 Model을 만들어서 model을 controller에 넣어준다.\n5. controller는 이 model에다가 키 : data, 값 : hello!!를 넣는다.\n6. `/resources/templeates/hello`를 찾고 model을 화면에 넘기면서 화면을 렌더링해라\n\t- 즉, 컨트롤러에서 리턴 값으로 문자를 반환하면 뷰 리졸버( viewResolver )가 화면을 찾아서 처리하게 된다.\n\t- 뷰 리졸버는 View를 찾아주고 템플릿 엔진 연결시켜주는 녀석\n\t- 찾을 때, 스프링 부트 템플릿 엔진 기본 viewName에 매핑\n\t- `resources:templates/` + {ViewName} + `.html`\n\n\u003cbr\u003e\u003cbr\u003e\n\n**서버 재시작 없이 View 파일 리로드**\n\n1. `build.gradle`에 의존성 추가 (spring-boot-devtools 라이브러리 설치해준 것)\n\t- `developmentOnly 'org.springframework.boot:spring-boot-devtools'`\n2. `/resources/application.properties`에 아래 코드 추가 (필수는 아님)\n\n```java\nspring.devtools.livereload.enabled=true\nspring.devtools.restart.enabled=true\n```\n\n3. File - Settings - Advanced Settings - Compiler에서 `Allow auto-make to start~` 체크\n\n4. File - Settings - Build, Execution~ - Compiler에서 `Build project automatically` 체크\n\n이제 View 파일 수정하면 한 5초 뒤에 서버가 알아서 리로드 되면서 크롬 가서 새로고침 해보면 확인 가능하다. 만약, 새로고침 없이 보고 싶으면 크롬 확장 프로그램 Livereload 설치하셈\n\n\u003cbr\u003e\u003cbr\u003e\n\n### 빌드하고 실행하기\n\n빌드하고자 하는 프로젝트 폴더로 이동하고 거기서 마우스 우클릭으로 `Git Bash Here` 혹은 `터미널에서 열기` 클릭! WSL2 java 관련 설정은 [Java Settings](notes/TIL/fragment/lang/java/java-settings) 참고\n\n1. `./gradlew build`\n2. `cd build/libs`\n3. `java -jar hello-spring-0.0.1-SNAPSHOT.jar`\n\n이러면 서버 실행 완료된 것! 종료 하려면 `Ctrl + C`\n\n- 빌드 폴더 깔끔하게 지우기 `./gradlew clean`\n\n\u003chr\u003e\n\n## 스프링 웹 개발 기초\n\n웹을 개발한다는 것은 크게 3가지 방법이 있다.\n\n- 정적 컨텐츠 : welcomepage처럼 서버에서 하는 것 없이 파일을 그대로 웹 브라우저에게 내리는 것\n\n- MVC와 템플릿 엔진 : jsp, php가 흔히 말하는 템플릿 엔진인데 html을 그냥 주는 것이 아니라 서버에서 프로그래밍 해서 html을 동적으로 바꿔서 내리는 것. 이 작업을 하기 위하여 Model, View, Controller 패턴으로 개발\n\n- API : JSON 형식으로 데이터를 전달해주는 방식\n\n\u003cbr\u003e\n\n사실 정적 컨텐츠 방식을 제외하면, 이렇게 생각하면 된다.\n\n- MVC 방식처럼 View를 찾아서 템플릿 엔진을 통해 화면을 렌더링해서 HTML을 변환하여 HTML 파일을 웹 브라우저에 넘겨주는 방식, **HTML을 내리냐**\n\n- API를 사용하여 **데이터를 바로 내리냐**\n\n\u003cbr\u003e\n\n### 정적 컨텐츠\n\n스프링 부트는 정적 컨텐츠를 \u003ca href='https://docs.spring.io/spring-boot/docs/current/reference/html/web.html#web.servlet.spring-mvc.static-content' target='_blank'\u003e제공\u003c/a\u003e하고 있다. `/resources/static` 폴더에 아무 html 파일을 만들면 그대로 반환해준다. 만약 `hello-static.html` 파일을 만들었다면, `localhost:8080/hello-static.html`로 들어가면 나온다.\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/saADxTn.png\n\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n  \n\n1. 웹브라우저에서 `localhost:8080/hello-static.html`로 get 요청\n\n2. 내장 톰캣 서버가 요청을 받고 스프링에게 넘김\n\n3. 스프링은 컨트롤러 쪽에서 `hello-static`과 맵핑된 컨트롤러 있나 찾아봄\n\n4. 없으면 `resources: statc/hello-static.html`을 찾고 있으면 반환해줌\n\n\u003cbr\u003e\n\n### MVC와 템플릿 엔진\n\nMVC : Model, View, Controller\n\n과거에는 컨트롤러와 뷰를 따로 분리하지 않고 JSP 같은걸로 뷰에 모든 걸 다했다. 이것이 **Model 1 방식**이다. 하지만, 지금은 MVC 패턴으로 많이 한다. 그 이유는 **관심사의 분리, 역할과 책임** 때문이다.\n\nView는 화면을 그리는 것에 모든 역량을 집중해야 하고, Controller나 Model과 관련된 부분은 비즈니스 로직과 관련있거나 내부적인 걸 처리하는 것에 집중해야 한다.\n\n\u003cbr\u003e\n\n`HelloController.java`에 내용 추가\n\n```java\n@GetMapping(\"hello-mvc\")\npublic String helloMvc(@RequestParam(\"name\") String name, Model model) {\n\tmodel.addAttribute(\"name\", name);\n\treturn \"hello-template\";\n}\n```\n\n- `hello-mvc` get 요청에 맵핑\n\n- 외부, 웹에서 파라미터를 받기 위하여 `@RequestParam()`을 사용\n\n- 당연히 Model은 넘겨줘야지\n\n- `addAttribute`에서 파라미터로 넘어온 name을 넘긴다.\n\n\u003cbr\u003e\n\n`resources/templates/hello-static.html`\n\n```html\n\u003chtml xmlns:th=\"http://www.thymeleaf.org\"\u003e\n\t\u003cbody\u003e\n\t\t\u003cp th:text=\"'hello ' + ${name}\"\u003ehello! empty\u003c/p\u003e\n\t\u003c/body\u003e\n\u003c/html\u003e\n```\n\n- 템플릿 엔진으로써 잘 동작하면 th:text의 값인 `'hello ' + ${name}`로 우측의 내용(hello! empty)이 치환이 된다.\n\n\u003cbr\u003e\n\n타임리프 템플릿의 장점은 html을 쓰고 서버 없이 파일을 열어서 껍데기를 볼 수 있는 것이다. `템플릿 파일명 우클릭 - Copy Path/References.. - Absolute Path 복사`하고 웹 브라우저 링크에 치면 볼 수 있다.\n\n\u003cbr\u003e\n\n여기까지 하고 `localhost:8080/hello-mvc`를 입력하면!? `Required request parameter 'name' for method parameter type String is not present]`라는 오류가 콘솔창에 뜬다. 파라미터를 입력해주지 않았기 때문이다. 인텔리제이에서 필요한 파라미터가 무엇인지 볼 때 `Ctrl + P`를 누르면 뜬다.\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/ofYiI3f.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n`boolean required() default true`인 것으로 보아 반드시 값이 필요한게 디폴트 설정이다. 따라서, 웹 브라우저 창에 `localhost:8080/hello-mvc?name=name에 들어갈 문자열`을 넣어주면 된다. 그러면 결과로 `'hello ' + ${name}`이니까 `hello name에 들어갈 문자열`이라는 모습이 보일 것이다.\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/15HkOIc.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n  \n다시 한번, **달러($) 사인에 들어가는 것은 Model에서 뽑아온 key에 해당하는 value이다.** `model.addAttribute(\"name\", name);`이라고 했으니까 `name`이라는 key에서 `name`이라는 value를 가져오는 것!\n\n\u003cbr\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/gg0Tehb.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n1. 웹브라우저에서 `localhost:8080/hello-mvc`로 get 요청\n\n2. 내장 톰캣 서버가 요청을 받고 스프링에게 넘김\n\n3. 스프링은 컨트롤러 쪽에서 `hello-mvc`와 맵핑된 컨트롤러 있나 찾아봄\n\n4. 있으니까 `hello-template`으로 넘기고 `model(name:문자열)`을 넘김.\n\n5. 뷰 리졸버 (viewResolver)가 return의 `hello-template`와 같은`templates/hello-template.html`를 찾아서 타임리프 템플릿 엔진에 처리해달라고 넘김\n\n6. 템플릿 엔진이 렌더링해서 변환한 HTML 파일을 웹 브라우저에 반환\n\n\u003cbr\u003e\n\n### API\n\nMVC 방식과는 다르게 (HTML 파일을 내리는 방식과는 다르게) API는 데이터를 바로 내리는 방식이다. \n\n\u003cbr\u003e\n\n`HelloController.java`에 내용 추가\n\n```java\n@GetMapping(\"hello-string\")\n@ResponseBody\npublic String helloString(@RequestParam(\"name\") String name) {\n\treturn \"hello \" + name;\n}\n```\n\n- `hello-string` get 요청에 맵핑\n\n- `@ResponseBody`의 body는 html의 `\u003cbody\u003e\u003c/body\u003e`를 의미하는 것이 아니라 HTTP의 `헤더부와 바디부`를 의미하는 것이다. HTTP의 응답 body에 이 내용을 직접 넣어주겠다는 의미이다.\n\n- 템플릿 엔진과는 다르게 view 이런게 없어서 저 return 문자가 그대로 내려간다.\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/d2uD6Kh.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n이렇게 페이지 소스보기 해보면 html 태그 같은거 안뜨고 **문자 데이터 자체**가 그대로 왔다. 그러면, 본격적으로 api를 사용해보도록 하자. 객체를 만들어서 JSON 형식(`key : value`)으로 데이터를 보내보자.\n\n\u003cbr\u003e\n\n`HelloController.java`에 내용 추가\n\n```java\n@GetMapping(\"hello-api\")\n@ResponseBody\npublic Hello helloApi(@RequestParam(\"name\") String name) {\n\tHello hello = new Hello();\n\thello.setName(name);\n\treturn hello;\n}\n\nstatic class Hello {\n\tprivate String name;\n\t\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t  \n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n}\n```\n\n- static은 기억나지? 힙에 올리는게 아니라 그냥 클래스 변수로 만들어서 올리고 아무데서나 사용할 수 있게 만들었던거\n\n- private으로 해놨으니까 getter, setter 만들어준거고.\n\n- helloApi에서 hello 객체 만들고 setName으로 들어온 리퀘스트 파라미터인 name 넣어준거고!\n\n- 마지막으로 hello 객체를 반환해줌\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/Qt7XFIr.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n\u003cp align=\"center\"\u003e\u003cimg src=\"https://i.imgur.com/8obtOHl.png\" height=\"50%\" width=\"80%\"\u003e\u003c/p\u003e\n\n1. 웹브라우저에서 `localhost:8080/hello-api`로 get 요청\n2. 내장 톰캣 서버가 요청을 받고 스프링에게 넘김\n3. 스프링은 컨트롤러 쪽에서 `hello-api`와 맵핑된 컨트롤러 있나 찾아봄\n4. 있네. 근데 `@ResponseBody` 애노테이션이 붙어있네?\n\t- 저게 없으면, viewResolver에게 던져서 view에 맞는 템플릿 엔진 연결해줬잖아\n\t- 얘는 HTTP body 응답에 이걸 그대로 넘겨야겠구나 라고 생각\n\t- 근데, 문자였으면 바로 넣어서 주면 끝인데, 객체일 경우는 어떻게 해야할까?\n\t- 객체가 오면, 기본 default가 json 방식으로 데이터를 만들어서 HTTP 응답에 반환하겠다가 기본 정책!\n5. `viewResolver`가 아닌, `HttpMessageConverter`가 동작\n6. 단순 문자면 `StringConverter`가 동작. 객체이면 `JsonConverter`가 동작\n7. 이것을 응답으로 웹 브라우저에 \n\n\u003cbr\u003e\n\n- 기본 문자처리 : `StringHttpMessageConverter`\n- 기본 객체처리 : `MappingJackson2HttpMessageConverter`\n\t- 객체를 json으로 변환해주는 유명한 라이브러리 대표적인 2개\n\t\t- Jackson version 2\n\t\t- Gson (구글에서 만든거)\n\t- 스프링은 기본적으로 잭슨 라이브러리를 채택!\n- 참고 : 클라이언트의 HTTP Accept 헤더와 서버의 컨트롤러 반환 타입 정보를 조합해서 `HttpMessageConverter`가 선택된다. 예를 들어, 클라이언트 쪽에서 XML을 요청하면 서버 쪽에서 XML 라이브러리를 끼워넣고 XML로 보낼 수 있다는 말이다. 근데 그냥 마음 편하게 json으로 하자 ^^ 다 json으로 한다.","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/DB/":{"title":"Database","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/DS/":{"title":"Data Structure","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/Interview/":{"title":"Interview","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/Network/":{"title":"Network","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/OS/":{"title":"Operating System","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/Programming/":{"title":"Programming","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/Programming/Java/":{"title":"Java","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/Programming/Java/book/":{"title":"도서","content":"[chap01](brain/Programming/Java/book/jungseok/chap02)\n[chap02](brain/Programming/Java/book/jungseok/chap02)","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/Programming/Java/book/jungseok/":{"title":"자바의 정석","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/Programming/Java/book/jungseok/chap01":{"title":"자바의 정석 1장","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/Programming/Java/book/jungseok/chap02":{"title":"자바의 정석 2장","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/Programming/Spring-Boot/":{"title":"_index","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/Programming/Spring/":{"title":"_index","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/brain/Programming/html_css/":{"title":"HTML CSS","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null},"/project":{"title":"Project","content":"","lastmodified":"2023-03-07T08:12:32.383815571Z","tags":null}}